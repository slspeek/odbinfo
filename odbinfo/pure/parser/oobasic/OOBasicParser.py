# Generated from OOBasic.g4 by ANTLR 4.9.2
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *

if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00bb")
        buf.write("\u08f7\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\3\2\3\2\3\2\3\3\5\3\u00ef")
        buf.write("\n\3\3\3\7\3\u00f2\n\3\f\3\16\3\u00f5\13\3\3\3\3\3\6\3")
        buf.write("\u00f9\n\3\r\3\16\3\u00fa\5\3\u00fd\n\3\3\3\5\3\u0100")
        buf.write("\n\3\3\3\7\3\u0103\n\3\f\3\16\3\u0106\13\3\3\3\5\3\u0109")
        buf.write("\n\3\3\3\7\3\u010c\n\3\f\3\16\3\u010f\13\3\3\3\5\3\u0112")
        buf.write("\n\3\3\3\7\3\u0115\n\3\f\3\16\3\u0118\13\3\3\3\5\3\u011b")
        buf.write("\n\3\3\3\7\3\u011e\n\3\f\3\16\3\u0121\13\3\3\3\5\3\u0124")
        buf.write("\n\3\3\4\6\4\u0127\n\4\r\4\16\4\u0128\3\5\3\5\5\5\u012d")
        buf.write("\n\5\3\5\3\5\5\5\u0131\n\5\3\5\3\5\3\5\5\5\u0136\n\5\3")
        buf.write("\5\5\5\u0139\n\5\3\5\7\5\u013c\n\5\f\5\16\5\u013f\13\5")
        buf.write("\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\3\b\5\b\u014a\n\b\3\t")
        buf.write("\3\t\6\t\u014e\n\t\r\t\16\t\u014f\3\t\6\t\u0153\n\t\r")
        buf.write("\t\16\t\u0154\3\t\3\t\6\t\u0159\n\t\r\t\16\t\u015a\3\n")
        buf.write("\3\n\5\n\u015f\n\n\3\n\3\n\5\n\u0163\n\n\3\n\3\n\3\n\3")
        buf.write("\13\3\13\6\13\u016a\n\13\r\13\16\13\u016b\6\13\u016e\n")
        buf.write("\13\r\13\16\13\u016f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\5\f\u017c\n\f\3\r\3\r\6\r\u0180\n\r\r\r\16\r\u0181")
        buf.write("\3\r\7\r\u0185\n\r\f\r\16\r\u0188\13\r\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\5\16\u0192\n\16\3\17\3\17\3")
        buf.write("\20\3\20\6\20\u0198\n\20\r\20\16\20\u0199\3\20\5\20\u019d")
        buf.write("\n\20\3\20\7\20\u01a0\n\20\f\20\16\20\u01a3\13\20\3\21")
        buf.write("\3\21\5\21\u01a7\n\21\3\21\3\21\5\21\u01ab\n\21\3\21\7")
        buf.write("\21\u01ae\n\21\f\21\16\21\u01b1\13\21\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u01e0")
        buf.write("\n\22\3\23\3\23\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\26\5\26\u01f0\n\26\3\26\3\26\5\26\u01f4")
        buf.write("\n\26\3\26\7\26\u01f7\n\26\f\26\16\26\u01fa\13\26\5\26")
        buf.write("\u01fc\n\26\3\27\3\27\3\27\5\27\u0201\n\27\3\27\3\27\3")
        buf.write("\27\3\27\5\27\u0207\n\27\3\27\3\27\5\27\u020b\n\27\3\27")
        buf.write("\7\27\u020e\n\27\f\27\16\27\u0211\13\27\3\30\3\30\5\30")
        buf.write("\u0215\n\30\3\30\3\30\5\30\u0219\n\30\3\30\5\30\u021c")
        buf.write("\n\30\3\30\3\30\5\30\u0220\n\30\3\30\3\30\3\31\3\31\5")
        buf.write("\31\u0226\n\31\3\31\3\31\5\31\u022a\n\31\3\31\3\31\3\32")
        buf.write("\3\32\3\32\3\32\5\32\u0232\n\32\3\32\3\32\5\32\u0236\n")
        buf.write("\32\3\32\7\32\u0239\n\32\f\32\16\32\u023c\13\32\3\33\3")
        buf.write("\33\6\33\u0240\n\33\r\33\16\33\u0241\3\33\3\33\6\33\u0246")
        buf.write("\n\33\r\33\16\33\u0247\5\33\u024a\n\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\6\33\u0253\n\33\r\33\16\33\u0254")
        buf.write("\3\33\3\33\6\33\u0259\n\33\r\33\16\33\u025a\5\33\u025d")
        buf.write("\n\33\3\33\3\33\3\33\3\33\6\33\u0263\n\33\r\33\16\33\u0264")
        buf.write("\3\33\3\33\6\33\u0269\n\33\r\33\16\33\u026a\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\5\33\u0273\n\33\3\34\3\34\3\35\3")
        buf.write("\35\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3\37\5\37\u0281")
        buf.write("\n\37\3\37\3\37\5\37\u0285\n\37\3\37\3\37\3 \3 \3 \3 ")
        buf.write("\3 \3 \5 \u028f\n \3 \3 \3 \3 \3 \6 \u0296\n \r \16 \u0297")
        buf.write("\3 \3 \6 \u029c\n \r \16 \u029d\5 \u02a0\n \3 \3 \3 \5")
        buf.write(" \u02a5\n \3!\3!\3!\3!\5!\u02ab\n!\3!\3!\5!\u02af\n!\3")
        buf.write("!\5!\u02b2\n!\3!\3!\5!\u02b6\n!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\5!\u02c1\n!\3!\6!\u02c4\n!\r!\16!\u02c5\3!\3!\6!")
        buf.write("\u02ca\n!\r!\16!\u02cb\5!\u02ce\n!\3!\3!\3!\3!\5!\u02d4")
        buf.write("\n!\5!\u02d6\n!\3\"\3\"\3\"\5\"\u02db\n\"\3\"\3\"\5\"")
        buf.write("\u02df\n\"\3\"\3\"\3\"\3\"\5\"\u02e5\n\"\3\"\5\"\u02e8")
        buf.write("\n\"\3\"\3\"\5\"\u02ec\n\"\3\"\6\"\u02ef\n\"\r\"\16\"")
        buf.write("\u02f0\3\"\3\"\6\"\u02f5\n\"\r\"\16\"\u02f6\5\"\u02f9")
        buf.write("\n\"\3\"\3\"\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\5$\u030c\n$\3$\3$\7$\u0310\n$\f$\16$\u0313\13$\3")
        buf.write("$\5$\u0316\n$\3$\3$\5$\u031a\n$\3%\3%\3%\3%\3%\3%\5%\u0322")
        buf.write("\n%\3%\6%\u0325\n%\r%\16%\u0326\3%\3%\6%\u032b\n%\r%\16")
        buf.write("%\u032c\5%\u032f\n%\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\5\'")
        buf.write("\u0339\n\'\3\'\6\'\u033c\n\'\r\'\16\'\u033d\3\'\3\'\6")
        buf.write("\'\u0342\n\'\r\'\16\'\u0343\5\'\u0346\n\'\3(\3(\5(\u034a")
        buf.write("\n(\3(\6(\u034d\n(\r(\16(\u034e\3(\3(\6(\u0353\n(\r(\16")
        buf.write("(\u0354\5(\u0357\n(\3)\3)\3)\3)\5)\u035d\n)\3)\3)\5)\u0361")
        buf.write("\n)\3)\6)\u0364\n)\r)\16)\u0365\3*\3*\5*\u036a\n*\3*\3")
        buf.write("*\5*\u036e\n*\3*\3*\5*\u0372\n*\3*\3*\3+\3+\3+\3+\5+\u037a")
        buf.write("\n+\3+\3+\5+\u037e\n+\3+\3+\3,\3,\5,\u0384\n,\3,\3,\5")
        buf.write(",\u0388\n,\3,\3,\5,\u038c\n,\3,\3,\3-\3-\3-\3-\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3/\5/\u03a2\n/\3/\3/\3")
        buf.write("/\5/\u03a7\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\5\60\u03b1\n\60\3\60\3\60\5\60\u03b5\n\60\3\60\7\60\u03b8")
        buf.write("\n\60\f\60\16\60\u03bb\13\60\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u03c8\n\61\3\61\3")
        buf.write("\61\5\61\u03cc\n\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\5\61\u03d5\n\61\3\61\3\61\5\61\u03d9\n\61\3\61\5\61\u03dc")
        buf.write("\n\61\3\62\3\62\5\62\u03e0\n\62\3\62\3\62\5\62\u03e4\n")
        buf.write("\62\3\62\5\62\u03e7\n\62\7\62\u03e9\n\62\f\62\16\62\u03ec")
        buf.write("\13\62\3\62\5\62\u03ef\n\62\3\62\5\62\u03f2\n\62\3\62")
        buf.write("\3\62\5\62\u03f6\n\62\3\62\5\62\u03f9\n\62\6\62\u03fb")
        buf.write("\n\62\r\62\16\62\u03fc\5\62\u03ff\n\62\3\63\3\63\5\63")
        buf.write("\u0403\n\63\3\63\3\63\5\63\u0407\n\63\3\63\3\63\5\63\u040b")
        buf.write("\n\63\3\63\3\63\5\63\u040f\n\63\3\63\5\63\u0412\n\63\3")
        buf.write("\64\3\64\3\64\3\64\5\64\u0418\n\64\3\64\3\64\5\64\u041c")
        buf.write("\n\64\3\64\5\64\u041f\n\64\5\64\u0421\n\64\3\64\3\64\5")
        buf.write("\64\u0425\n\64\3\64\3\64\5\64\u0429\n\64\3\64\3\64\5\64")
        buf.write("\u042d\n\64\3\64\3\64\5\64\u0431\n\64\3\64\5\64\u0434")
        buf.write("\n\64\3\64\5\64\u0437\n\64\3\64\3\64\5\64\u043b\n\64\3")
        buf.write("\65\3\65\3\65\5\65\u0440\n\65\3\65\3\65\5\65\u0444\n\65")
        buf.write("\3\65\3\65\3\65\3\65\5\65\u044a\n\65\3\65\5\65\u044d\n")
        buf.write("\65\3\65\5\65\u0450\n\65\3\65\3\65\5\65\u0454\n\65\3\65")
        buf.write("\6\65\u0457\n\65\r\65\16\65\u0458\3\65\3\65\6\65\u045d")
        buf.write("\n\65\r\65\16\65\u045e\5\65\u0461\n\65\3\65\3\65\3\66")
        buf.write("\3\66\3\66\5\66\u0468\n\66\3\66\3\66\5\66\u046c\n\66\3")
        buf.write("\66\3\66\3\66\3\66\5\66\u0472\n\66\3\66\5\66\u0475\n\66")
        buf.write("\3\66\6\66\u0478\n\66\r\66\16\66\u0479\3\66\3\66\6\66")
        buf.write("\u047e\n\66\r\66\16\66\u047f\5\66\u0482\n\66\3\66\3\66")
        buf.write("\3\67\3\67\3\67\5\67\u0489\n\67\3\67\3\67\5\67\u048d\n")
        buf.write("\67\3\67\3\67\3\67\3\67\5\67\u0493\n\67\3\67\5\67\u0496")
        buf.write("\n\67\3\67\6\67\u0499\n\67\r\67\16\67\u049a\3\67\3\67")
        buf.write("\6\67\u049f\n\67\r\67\16\67\u04a0\5\67\u04a3\n\67\3\67")
        buf.write("\3\67\38\38\38\38\58\u04ab\n8\38\38\58\u04af\n8\38\58")
        buf.write("\u04b2\n8\38\58\u04b5\n8\38\38\58\u04b9\n8\38\38\39\3")
        buf.write("9\39\59\u04c0\n9\3:\3:\3:\3:\5:\u04c6\n:\3:\3:\5:\u04ca")
        buf.write("\n:\3:\3:\5:\u04ce\n:\3:\7:\u04d1\n:\f:\16:\u04d4\13:")
        buf.write("\3;\3;\5;\u04d8\n;\3;\3;\5;\u04dc\n;\3;\3;\5;\u04e0\n")
        buf.write(";\3;\3;\3;\5;\u04e5\n;\3<\3<\3=\3=\3=\3=\5=\u04ed\n=\5")
        buf.write("=\u04ef\n=\3>\3>\3>\3>\3?\3?\3?\3?\3?\3?\6?\u04fb\n?\r")
        buf.write("?\16?\u04fc\3?\7?\u0500\n?\f?\16?\u0503\13?\3?\5?\u0506")
        buf.write("\n?\3?\3?\3@\3@\3@\3@\5@\u050e\n@\3@\5@\u0511\n@\3@\7")
        buf.write("@\u0514\n@\f@\16@\u0517\13@\3@\6@\u051a\n@\r@\16@\u051b")
        buf.write("\5@\u051e\n@\3@\5@\u0521\n@\3@\3@\6@\u0525\n@\r@\16@\u0526")
        buf.write("\5@\u0529\n@\3@\3@\6@\u052d\n@\r@\16@\u052e\5@\u0531\n")
        buf.write("@\3A\3A\3A\5A\u0536\nA\3A\3A\5A\u053a\nA\3A\7A\u053d\n")
        buf.write("A\fA\16A\u0540\13A\5A\u0542\nA\3B\3B\3B\3B\3B\3B\3B\5")
        buf.write("B\u054b\nB\3C\3C\3C\3C\5C\u0551\nC\3C\3C\5C\u0555\nC\3")
        buf.write("C\3C\3D\3D\3E\3E\3E\5E\u055e\nE\3E\3E\5E\u0562\nE\3E\3")
        buf.write("E\3E\3E\5E\u0568\nE\3E\5E\u056b\nE\3E\6E\u056e\nE\rE\16")
        buf.write("E\u056f\3E\3E\6E\u0574\nE\rE\16E\u0575\5E\u0578\nE\3E")
        buf.write("\3E\3F\3F\5F\u057e\nF\3F\3F\5F\u0582\nF\3F\3F\3G\3G\3")
        buf.write("G\5G\u0589\nG\3G\3G\3G\3G\6G\u058f\nG\rG\16G\u0590\3G")
        buf.write("\7G\u0594\nG\fG\16G\u0597\13G\3G\3G\3H\3H\5H\u059d\nH")
        buf.write("\3H\3H\5H\u05a1\nH\3H\5H\u05a4\nH\3H\5H\u05a7\nH\3H\5")
        buf.write("H\u05aa\nH\3H\3H\5H\u05ae\nH\3H\6H\u05b1\nH\rH\16H\u05b2")
        buf.write("\3I\3I\3I\3I\5I\u05b9\nI\3I\3I\5I\u05bd\nI\3I\3I\5I\u05c1")
        buf.write("\nI\3I\7I\u05c4\nI\fI\16I\u05c7\13I\3I\5I\u05ca\nI\3I")
        buf.write("\3I\3I\3I\3I\3I\3I\5I\u05d3\nI\3I\3I\5I\u05d7\nI\3I\3")
        buf.write("I\3I\3I\5I\u05dd\nI\3I\3I\3I\5I\u05e2\nI\3I\3I\3I\3I\3")
        buf.write("I\3I\5I\u05ea\nI\3I\3I\5I\u05ee\nI\3I\3I\5I\u05f2\nI\3")
        buf.write("I\3I\3I\5I\u05f7\nI\3I\3I\5I\u05fb\nI\3I\3I\5I\u05ff\n")
        buf.write("I\3I\3I\3I\5I\u0604\nI\3I\3I\5I\u0608\nI\3I\3I\3I\5I\u060d")
        buf.write("\nI\3I\3I\5I\u0611\nI\3I\3I\3I\5I\u0616\nI\3I\3I\5I\u061a")
        buf.write("\nI\3I\3I\3I\5I\u061f\nI\3I\3I\5I\u0623\nI\3I\3I\3I\5")
        buf.write("I\u0628\nI\3I\3I\5I\u062c\nI\3I\3I\3I\5I\u0631\nI\3I\3")
        buf.write("I\5I\u0635\nI\3I\3I\3I\5I\u063a\nI\3I\3I\5I\u063e\nI\3")
        buf.write("I\3I\3I\5I\u0643\nI\3I\3I\5I\u0647\nI\3I\3I\3I\5I\u064c")
        buf.write("\nI\3I\3I\5I\u0650\nI\3I\3I\3I\5I\u0655\nI\3I\3I\5I\u0659")
        buf.write("\nI\3I\3I\3I\5I\u065e\nI\3I\3I\5I\u0662\nI\3I\3I\3I\5")
        buf.write("I\u0667\nI\3I\3I\5I\u066b\nI\3I\3I\3I\5I\u0670\nI\3I\3")
        buf.write("I\5I\u0674\nI\3I\3I\3I\5I\u0679\nI\3I\3I\5I\u067d\nI\3")
        buf.write("I\3I\3I\5I\u0682\nI\3I\3I\5I\u0686\nI\3I\3I\3I\5I\u068b")
        buf.write("\nI\3I\3I\5I\u068f\nI\3I\3I\3I\5I\u0694\nI\3I\3I\5I\u0698")
        buf.write("\nI\3I\7I\u069b\nI\fI\16I\u069e\13I\3J\3J\3J\5J\u06a3")
        buf.write("\nJ\3J\3J\3J\3K\3K\5K\u06aa\nK\3K\3K\5K\u06ae\nK\3K\7")
        buf.write("K\u06b1\nK\fK\16K\u06b4\13K\3L\3L\5L\u06b8\nL\3L\5L\u06bb")
        buf.write("\nL\3L\3L\5L\u06bf\nL\3L\3L\5L\u06c3\nL\5L\u06c5\nL\3")
        buf.write("L\3L\5L\u06c9\nL\5L\u06cb\nL\3L\3L\5L\u06cf\nL\3M\3M\3")
        buf.write("M\3M\6M\u06d5\nM\rM\16M\u06d6\3M\7M\u06da\nM\fM\16M\u06dd")
        buf.write("\13M\3M\7M\u06e0\nM\fM\16M\u06e3\13M\3M\3M\3N\3N\3N\3")
        buf.write("N\5N\u06eb\nN\3N\3N\5N\u06ef\nN\3N\3N\3O\3O\3O\3O\5O\u06f7")
        buf.write("\nO\3O\3O\6O\u06fb\nO\rO\16O\u06fc\3O\3O\6O\u0701\nO\r")
        buf.write("O\16O\u0702\5O\u0705\nO\3O\3O\3P\3P\3P\3P\5P\u070d\nP")
        buf.write("\3P\3P\5P\u0711\nP\3P\5P\u0714\nP\3Q\3Q\5Q\u0718\nQ\3")
        buf.write("R\3R\3R\3R\5R\u071e\nR\3R\5R\u0721\nR\3R\3R\5R\u0725\n")
        buf.write("R\3R\3R\5R\u0729\nR\5R\u072b\nR\3R\5R\u072e\nR\3S\3S\3")
        buf.write("S\5S\u0733\nS\3S\3S\5S\u0737\nS\3S\3S\5S\u073b\nS\3S\5")
        buf.write("S\u073e\nS\3S\3S\5S\u0742\nS\3S\3S\5S\u0746\nS\5S\u0748")
        buf.write("\nS\3S\5S\u074b\nS\3T\3T\5T\u074f\nT\3T\3T\5T\u0753\n")
        buf.write("T\3T\3T\5T\u0757\nT\3T\3T\3T\3T\3T\5T\u075e\nT\3U\3U\5")
        buf.write("U\u0762\nU\3V\3V\5V\u0766\nV\3V\3V\5V\u076a\nV\3V\3V\5")
        buf.write("V\u076e\nV\5V\u0770\nV\3V\5V\u0773\nV\3V\3V\5V\u0777\n")
        buf.write("V\3V\3V\5V\u077b\nV\5V\u077d\nV\5V\u077f\nV\3W\5W\u0782")
        buf.write("\nW\3W\3W\3W\5W\u0787\nW\3W\5W\u078a\nW\3W\3W\5W\u078e")
        buf.write("\nW\3W\3W\5W\u0792\nW\5W\u0794\nW\3W\5W\u0797\nW\3W\5")
        buf.write("W\u079a\nW\3W\3W\3W\5W\u079f\nW\3W\5W\u07a2\nW\3W\3W\5")
        buf.write("W\u07a6\nW\5W\u07a8\nW\5W\u07aa\nW\3X\3X\3X\5X\u07af\n")
        buf.write("X\3Y\3Y\5Y\u07b3\nY\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u07be")
        buf.write("\nZ\3[\5[\u07c1\n[\3[\5[\u07c4\n[\3[\3[\5[\u07c8\n[\3")
        buf.write("[\3[\5[\u07cc\n[\5[\u07ce\n[\3[\6[\u07d1\n[\r[\16[\u07d2")
        buf.write("\3\\\3\\\5\\\u07d7\n\\\3\\\5\\\u07da\n\\\3\\\3\\\5\\\u07de")
        buf.write("\n\\\3\\\3\\\5\\\u07e2\n\\\5\\\u07e4\n\\\3\\\3\\\3]\3")
        buf.write("]\5]\u07ea\n]\3]\6]\u07ed\n]\r]\16]\u07ee\3^\5^\u07f2")
        buf.write("\n^\3^\3^\3^\5^\u07f7\n^\3_\5_\u07fa\n_\3_\5_\u07fd\n")
        buf.write("_\3_\3_\5_\u0801\n_\7_\u0803\n_\f_\16_\u0806\13_\3_\3")
        buf.write("_\5_\u080a\n_\3_\3_\5_\u080e\n_\3_\5_\u0811\n_\7_\u0813")
        buf.write("\n_\f_\16_\u0816\13_\3`\3`\5`\u081a\n`\3`\3`\3a\3a\5a")
        buf.write("\u0820\na\3a\3a\5a\u0824\na\3a\3a\5a\u0828\na\3a\3a\5")
        buf.write("a\u082c\na\7a\u082e\na\fa\16a\u0831\13a\5a\u0833\na\3")
        buf.write("a\5a\u0836\na\3a\3a\3b\3b\5b\u083c\nb\3b\3b\5b\u0840\n")
        buf.write("b\3b\3b\5b\u0844\nb\3b\3b\5b\u0848\nb\3b\5b\u084b\nb\3")
        buf.write("b\3b\5b\u084f\nb\3b\5b\u0852\nb\3b\3b\5b\u0856\nb\3b\5")
        buf.write("b\u0859\nb\3b\5b\u085c\nb\3c\3c\5c\u0860\nc\3c\3c\3d\3")
        buf.write("d\5d\u0866\nd\3d\3d\5d\u086a\nd\3d\7d\u086d\nd\fd\16d")
        buf.write("\u0870\13d\3e\3e\3e\3e\3e\5e\u0877\ne\3e\3e\3f\3f\6f\u087d")
        buf.write("\nf\rf\16f\u087e\3f\3f\3f\6f\u0884\nf\rf\16f\u0885\3f")
        buf.write("\5f\u0889\nf\3g\3g\3g\3g\5g\u088f\ng\3g\3g\3g\5g\u0894")
        buf.write("\ng\3h\3h\3i\3i\3i\7i\u089b\ni\fi\16i\u089e\13i\3i\3i")
        buf.write("\3i\6i\u08a3\ni\ri\16i\u08a4\5i\u08a7\ni\3j\3j\3k\3k\3")
        buf.write("k\7k\u08ae\nk\fk\16k\u08b1\13k\3l\3l\5l\u08b5\nl\3l\3")
        buf.write("l\5l\u08b9\nl\3m\3m\5m\u08bd\nm\3m\3m\5m\u08c1\nm\3m\5")
        buf.write("m\u08c4\nm\3n\3n\3n\3o\3o\3o\5o\u08cc\no\3o\3o\3o\5o\u08d1")
        buf.write("\no\3o\3o\5o\u08d5\no\3o\3o\3o\3o\3o\3o\5o\u08dd\no\3")
        buf.write("p\3p\3q\3q\3r\3r\5r\u08e5\nr\3r\5r\u08e8\nr\3r\3r\5r\u08ec")
        buf.write("\nr\3r\5r\u08ef\nr\3s\3s\3t\3t\3u\3u\3u\2\3\u0090v\2\4")
        buf.write("\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\2\25\4\2\13\13\u0081\u0081")
        buf.write("\3\2\30#\4\2\u0088\u0088\u008c\u008c\3\2\64\67\6\2\4\4")
        buf.write("\u0099\u0099\u00a2\u00a2\u00a7\u00a7\3\2YZ\7\2\5\5\13")
        buf.write("\13AAddmm\4\2op\u008f\u008f\4\2IKxx\4\2\u0095\u0095\u00ab")
        buf.write("\u00ab\4\2zz\u0080\u0080\3\2\r\16\13\2\f\f\17\17\27\27")
        buf.write("&&BBDDWW~~\u0089\u0089\6\2\u0099\u009b\u009d\u009d\u00a0")
        buf.write("\u00a0\u00a4\u00a4\4\2\u00a1\u00a1\u00a6\u00a6\4\2ggk")
        buf.write("k\5\2<<ggkk\7\2\u0091\u0091\u0093\u0093\u0097\u0097\u009c")
        buf.write("\u009c\u00a5\u00a5\20\2\3\3\5)\61\638BDGLLNX[\\cgkoqt")
        buf.write("vwyy{\u0090\2\u0a83\2\u00ea\3\2\2\2\4\u00ee\3\2\2\2\6")
        buf.write("\u0126\3\2\2\2\b\u012a\3\2\2\2\n\u0140\3\2\2\2\f\u0142")
        buf.write("\3\2\2\2\16\u0144\3\2\2\2\20\u014b\3\2\2\2\22\u015c\3")
        buf.write("\2\2\2\24\u016d\3\2\2\2\26\u017b\3\2\2\2\30\u017d\3\2")
        buf.write("\2\2\32\u0191\3\2\2\2\34\u0193\3\2\2\2\36\u0195\3\2\2")
        buf.write("\2 \u01a4\3\2\2\2\"\u01df\3\2\2\2$\u01e1\3\2\2\2&\u01e3")
        buf.write("\3\2\2\2(\u01e7\3\2\2\2*\u01eb\3\2\2\2,\u0200\3\2\2\2")
        buf.write(".\u0212\3\2\2\2\60\u0223\3\2\2\2\62\u022d\3\2\2\2\64\u0272")
        buf.write("\3\2\2\2\66\u0274\3\2\2\28\u0276\3\2\2\2:\u027a\3\2\2")
        buf.write("\2<\u027c\3\2\2\2>\u0288\3\2\2\2@\u02a6\3\2\2\2B\u02da")
        buf.write("\3\2\2\2D\u02fc\3\2\2\2F\u0319\3\2\2\2H\u031b\3\2\2\2")
        buf.write("J\u0330\3\2\2\2L\u0332\3\2\2\2N\u0347\3\2\2\2P\u0358\3")
        buf.write("\2\2\2R\u0369\3\2\2\2T\u0375\3\2\2\2V\u0381\3\2\2\2X\u038f")
        buf.write("\3\2\2\2Z\u0393\3\2\2\2\\\u039b\3\2\2\2^\u03a8\3\2\2\2")
        buf.write("`\u03bc\3\2\2\2b\u03fe\3\2\2\2d\u0411\3\2\2\2f\u043a\3")
        buf.write("\2\2\2h\u043f\3\2\2\2j\u0467\3\2\2\2l\u0488\3\2\2\2n\u04a6")
        buf.write("\3\2\2\2p\u04bc\3\2\2\2r\u04c1\3\2\2\2t\u04d5\3\2\2\2")
        buf.write("v\u04e6\3\2\2\2x\u04e8\3\2\2\2z\u04f0\3\2\2\2|\u04f4\3")
        buf.write("\2\2\2~\u0530\3\2\2\2\u0080\u0541\3\2\2\2\u0082\u054a")
        buf.write("\3\2\2\2\u0084\u054c\3\2\2\2\u0086\u0558\3\2\2\2\u0088")
        buf.write("\u055d\3\2\2\2\u008a\u057b\3\2\2\2\u008c\u0588\3\2\2\2")
        buf.write("\u008e\u059a\3\2\2\2\u0090\u05f6\3\2\2\2\u0092\u06a2\3")
        buf.write("\2\2\2\u0094\u06a7\3\2\2\2\u0096\u06b5\3\2\2\2\u0098\u06d0")
        buf.write("\3\2\2\2\u009a\u06e6\3\2\2\2\u009c\u06f2\3\2\2\2\u009e")
        buf.write("\u0708\3\2\2\2\u00a0\u0717\3\2\2\2\u00a2\u0719\3\2\2\2")
        buf.write("\u00a4\u072f\3\2\2\2\u00a6\u075d\3\2\2\2\u00a8\u0761\3")
        buf.write("\2\2\2\u00aa\u077e\3\2\2\2\u00ac\u07a9\3\2\2\2\u00ae\u07ae")
        buf.write("\3\2\2\2\u00b0\u07b0\3\2\2\2\u00b2\u07bd\3\2\2\2\u00b4")
        buf.write("\u07c0\3\2\2\2\u00b6\u07d4\3\2\2\2\u00b8\u07e9\3\2\2\2")
        buf.write("\u00ba\u07f1\3\2\2\2\u00bc\u0804\3\2\2\2\u00be\u0819\3")
        buf.write("\2\2\2\u00c0\u081d\3\2\2\2\u00c2\u083b\3\2\2\2\u00c4\u085d")
        buf.write("\3\2\2\2\u00c6\u0863\3\2\2\2\u00c8\u0876\3\2\2\2\u00ca")
        buf.write("\u0888\3\2\2\2\u00cc\u088a\3\2\2\2\u00ce\u0895\3\2\2\2")
        buf.write("\u00d0\u08a6\3\2\2\2\u00d2\u08a8\3\2\2\2\u00d4\u08aa\3")
        buf.write("\2\2\2\u00d6\u08b2\3\2\2\2\u00d8\u08ba\3\2\2\2\u00da\u08c5")
        buf.write("\3\2\2\2\u00dc\u08dc\3\2\2\2\u00de\u08de\3\2\2\2\u00e0")
        buf.write("\u08e0\3\2\2\2\u00e2\u08e4\3\2\2\2\u00e4\u08f0\3\2\2\2")
        buf.write("\u00e6\u08f2\3\2\2\2\u00e8\u08f4\3\2\2\2\u00ea\u00eb\5")
        buf.write("\4\3\2\u00eb\u00ec\7\2\2\3\u00ec\3\3\2\2\2\u00ed\u00ef")
        buf.write("\7\u00bb\2\2\u00ee\u00ed\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef")
        buf.write("\u00f3\3\2\2\2\u00f0\u00f2\7\u00b9\2\2\u00f1\u00f0\3\2")
        buf.write("\2\2\u00f2\u00f5\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f3\u00f4")
        buf.write("\3\2\2\2\u00f4\u00fc\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f6")
        buf.write("\u00f8\5\16\b\2\u00f7\u00f9\7\u00b9\2\2\u00f8\u00f7\3")
        buf.write("\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00f8\3\2\2\2\u00fa\u00fb")
        buf.write("\3\2\2\2\u00fb\u00fd\3\2\2\2\u00fc\u00f6\3\2\2\2\u00fc")
        buf.write("\u00fd\3\2\2\2\u00fd\u00ff\3\2\2\2\u00fe\u0100\5\6\4\2")
        buf.write("\u00ff\u00fe\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0104\3")
        buf.write("\2\2\2\u0101\u0103\7\u00b9\2\2\u0102\u0101\3\2\2\2\u0103")
        buf.write("\u0106\3\2\2\2\u0104\u0102\3\2\2\2\u0104\u0105\3\2\2\2")
        buf.write("\u0105\u0108\3\2\2\2\u0106\u0104\3\2\2\2\u0107\u0109\5")
        buf.write("\20\t\2\u0108\u0107\3\2\2\2\u0108\u0109\3\2\2\2\u0109")
        buf.write("\u010d\3\2\2\2\u010a\u010c\7\u00b9\2\2\u010b\u010a\3\2")
        buf.write("\2\2\u010c\u010f\3\2\2\2\u010d\u010b\3\2\2\2\u010d\u010e")
        buf.write("\3\2\2\2\u010e\u0111\3\2\2\2\u010f\u010d\3\2\2\2\u0110")
        buf.write("\u0112\5\24\13\2\u0111\u0110\3\2\2\2\u0111\u0112\3\2\2")
        buf.write("\2\u0112\u0116\3\2\2\2\u0113\u0115\7\u00b9\2\2\u0114\u0113")
        buf.write("\3\2\2\2\u0115\u0118\3\2\2\2\u0116\u0114\3\2\2\2\u0116")
        buf.write("\u0117\3\2\2\2\u0117\u011a\3\2\2\2\u0118\u0116\3\2\2\2")
        buf.write("\u0119\u011b\5\30\r\2\u011a\u0119\3\2\2\2\u011a\u011b")
        buf.write("\3\2\2\2\u011b\u011f\3\2\2\2\u011c\u011e\7\u00b9\2\2\u011d")
        buf.write("\u011c\3\2\2\2\u011e\u0121\3\2\2\2\u011f\u011d\3\2\2\2")
        buf.write("\u011f\u0120\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f\3")
        buf.write("\2\2\2\u0122\u0124\7\u00bb\2\2\u0123\u0122\3\2\2\2\u0123")
        buf.write("\u0124\3\2\2\2\u0124\5\3\2\2\2\u0125\u0127\5\b\5\2\u0126")
        buf.write("\u0125\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u0126\3\2\2\2")
        buf.write("\u0128\u0129\3\2\2\2\u0129\7\3\2\2\2\u012a\u012c\7W\2")
        buf.write("\2\u012b\u012d\7\u00bb\2\2\u012c\u012b\3\2\2\2\u012c\u012d")
        buf.write("\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0130\7\u0099\2\2\u012f")
        buf.write("\u0131\7\u00bb\2\2\u0130\u012f\3\2\2\2\u0130\u0131\3\2")
        buf.write("\2\2\u0131\u0132\3\2\2\2\u0132\u0138\5\n\6\2\u0133\u0135")
        buf.write("\7\u00ab\2\2\u0134\u0136\7\u00bb\2\2\u0135\u0134\3\2\2")
        buf.write("\2\u0135\u0136\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u0139")
        buf.write("\5\f\7\2\u0138\u0133\3\2\2\2\u0138\u0139\3\2\2\2\u0139")
        buf.write("\u013d\3\2\2\2\u013a\u013c\7\u00b9\2\2\u013b\u013a\3\2")
        buf.write("\2\2\u013c\u013f\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e")
        buf.write("\3\2\2\2\u013e\t\3\2\2\2\u013f\u013d\3\2\2\2\u0140\u0141")
        buf.write("\7\u00ae\2\2\u0141\13\3\2\2\2\u0142\u0143\7\u00ae\2\2")
        buf.write("\u0143\r\3\2\2\2\u0144\u0145\7\u008a\2\2\u0145\u0146\7")
        buf.write("\u00bb\2\2\u0146\u0149\7\u00b2\2\2\u0147\u0148\7\u00bb")
        buf.write("\2\2\u0148\u014a\7\24\2\2\u0149\u0147\3\2\2\2\u0149\u014a")
        buf.write("\3\2\2\2\u014a\17\3\2\2\2\u014b\u014d\7\n\2\2\u014c\u014e")
        buf.write("\7\u00b9\2\2\u014d\u014c\3\2\2\2\u014e\u014f\3\2\2\2\u014f")
        buf.write("\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0152\3\2\2\2")
        buf.write("\u0151\u0153\5\22\n\2\u0152\u0151\3\2\2\2\u0153\u0154")
        buf.write("\3\2\2\2\u0154\u0152\3\2\2\2\u0154\u0155\3\2\2\2\u0155")
        buf.write("\u0156\3\2\2\2\u0156\u0158\7\61\2\2\u0157\u0159\7\u00b9")
        buf.write("\2\2\u0158\u0157\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u0158")
        buf.write("\3\2\2\2\u015a\u015b\3\2\2\2\u015b\21\3\2\2\2\u015c\u015e")
        buf.write("\5\u00caf\2\u015d\u015f\7\u00bb\2\2\u015e\u015d\3\2\2")
        buf.write("\2\u015e\u015f\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0162")
        buf.write("\7\u0099\2\2\u0161\u0163\7\u00bb\2\2\u0162\u0161\3\2\2")
        buf.write("\2\u0162\u0163\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0165")
        buf.write("\5\u00dco\2\u0165\u0166\7\u00b9\2\2\u0166\23\3\2\2\2\u0167")
        buf.write("\u0169\5\26\f\2\u0168\u016a\7\u00b9\2\2\u0169\u0168\3")
        buf.write("\2\2\2\u016a\u016b\3\2\2\2\u016b\u0169\3\2\2\2\u016b\u016c")
        buf.write("\3\2\2\2\u016c\u016e\3\2\2\2\u016d\u0167\3\2\2\2\u016e")
        buf.write("\u016f\3\2\2\2\u016f\u016d\3\2\2\2\u016f\u0170\3\2\2\2")
        buf.write("\u0170\25\3\2\2\2\u0171\u0172\7]\2\2\u0172\u0173\7\u00bb")
        buf.write("\2\2\u0173\u017c\7\u00b1\2\2\u0174\u0175\7_\2\2\u0175")
        buf.write("\u0176\7\u00bb\2\2\u0176\u017c\t\2\2\2\u0177\u017c\7^")
        buf.write("\2\2\u0178\u017c\7`\2\2\u0179\u017c\7a\2\2\u017a\u017c")
        buf.write("\7b\2\2\u017b\u0171\3\2\2\2\u017b\u0174\3\2\2\2\u017b")
        buf.write("\u0177\3\2\2\2\u017b\u0178\3\2\2\2\u017b\u0179\3\2\2\2")
        buf.write("\u017b\u017a\3\2\2\2\u017c\27\3\2\2\2\u017d\u0186\5\32")
        buf.write("\16\2\u017e\u0180\7\u00b9\2\2\u017f\u017e\3\2\2\2\u0180")
        buf.write("\u0181\3\2\2\2\u0181\u017f\3\2\2\2\u0181\u0182\3\2\2\2")
        buf.write("\u0182\u0183\3\2\2\2\u0183\u0185\5\32\16\2\u0184\u017f")
        buf.write("\3\2\2\2\u0185\u0188\3\2\2\2\u0186\u0184\3\2\2\2\u0186")
        buf.write("\u0187\3\2\2\2\u0187\31\3\2\2\2\u0188\u0186\3\2\2\2\u0189")
        buf.write("\u0192\5\34\17\2\u018a\u0192\5\26\f\2\u018b\u0192\5B\"")
        buf.write("\2\u018c\u0192\5h\65\2\u018d\u0192\5j\66\2\u018e\u0192")
        buf.write("\5l\67\2\u018f\u0192\5\u0088E\2\u0190\u0192\5\u008cG\2")
        buf.write("\u0191\u0189\3\2\2\2\u0191\u018a\3\2\2\2\u0191\u018b\3")
        buf.write("\2\2\2\u0191\u018c\3\2\2\2\u0191\u018d\3\2\2\2\u0191\u018e")
        buf.write("\3\2\2\2\u0191\u018f\3\2\2\2\u0191\u0190\3\2\2\2\u0192")
        buf.write("\33\3\2\2\2\u0193\u0194\5\36\20\2\u0194\35\3\2\2\2\u0195")
        buf.write("\u01a1\5 \21\2\u0196\u0198\7\u00b9\2\2\u0197\u0196\3\2")
        buf.write("\2\2\u0198\u0199\3\2\2\2\u0199\u0197\3\2\2\2\u0199\u019a")
        buf.write("\3\2\2\2\u019a\u019c\3\2\2\2\u019b\u019d\7\u00bb\2\2\u019c")
        buf.write("\u019b\3\2\2\2\u019c\u019d\3\2\2\2\u019d\u019e\3\2\2\2")
        buf.write("\u019e\u01a0\5 \21\2\u019f\u0197\3\2\2\2\u01a0\u01a3\3")
        buf.write("\2\2\2\u01a1\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\37")
        buf.write("\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a4\u01af\5\"\22\2\u01a5")
        buf.write("\u01a7\7\u00bb\2\2\u01a6\u01a5\3\2\2\2\u01a6\u01a7\3\2")
        buf.write("\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01aa\7\u0094\2\2\u01a9")
        buf.write("\u01ab\7\u00bb\2\2\u01aa\u01a9\3\2\2\2\u01aa\u01ab\3\2")
        buf.write("\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ae\5\"\22\2\u01ad\u01a6")
        buf.write("\3\2\2\2\u01ae\u01b1\3\2\2\2\u01af\u01ad\3\2\2\2\u01af")
        buf.write("\u01b0\3\2\2\2\u01b0!\3\2\2\2\u01b1\u01af\3\2\2\2\u01b2")
        buf.write("\u01e0\5\u00a6T\2\u01b3\u01e0\5$\23\2\u01b4\u01e0\5&\24")
        buf.write("\2\u01b5\u01e0\5(\25\2\u01b6\u01e0\5*\26\2\u01b7\u01e0")
        buf.write("\5,\27\2\u01b8\u01e0\5\60\31\2\u01b9\u01e0\5\62\32\2\u01ba")
        buf.write("\u01e0\5\64\33\2\u01bb\u01e0\5\66\34\2\u01bc\u01e0\5\u00a0")
        buf.write("Q\2\u01bd\u01e0\58\35\2\u01be\u01e0\5:\36\2\u01bf\u01e0")
        buf.write("\5<\37\2\u01c0\u01e0\5> \2\u01c1\u01e0\5@!\2\u01c2\u01e0")
        buf.write("\5D#\2\u01c3\u01e0\5F$\2\u01c4\u01e0\5P)\2\u01c5\u01e0")
        buf.write("\5R*\2\u01c6\u01e0\5T+\2\u01c7\u01e0\5\u00dan\2\u01c8")
        buf.write("\u01e0\5V,\2\u01c9\u01e0\5X-\2\u01ca\u01e0\5Z.\2\u01cb")
        buf.write("\u01e0\5\\/\2\u01cc\u01e0\5^\60\2\u01cd\u01e0\5`\61\2")
        buf.write("\u01ce\u01e0\5f\64\2\u01cf\u01e0\5n8\2\u01d0\u01e0\5p")
        buf.write("9\2\u01d1\u01e0\5r:\2\u01d2\u01e0\5v<\2\u01d3\u01e0\5")
        buf.write("x=\2\u01d4\u01e0\5z>\2\u01d5\u01e0\5|?\2\u01d6\u01e0\5")
        buf.write("\u0084C\2\u01d7\u01e0\5\u0086D\2\u01d8\u01e0\5\u008aF")
        buf.write("\2\u01d9\u01e0\5\u0092J\2\u01da\u01e0\5\u0098M\2\u01db")
        buf.write("\u01e0\5\u009aN\2\u01dc\u01e0\5\u009cO\2\u01dd\u01e0\5")
        buf.write("\u009eP\2\u01de\u01e0\5\u00a8U\2\u01df\u01b2\3\2\2\2\u01df")
        buf.write("\u01b3\3\2\2\2\u01df\u01b4\3\2\2\2\u01df\u01b5\3\2\2\2")
        buf.write("\u01df\u01b6\3\2\2\2\u01df\u01b7\3\2\2\2\u01df\u01b8\3")
        buf.write("\2\2\2\u01df\u01b9\3\2\2\2\u01df\u01ba\3\2\2\2\u01df\u01bb")
        buf.write("\3\2\2\2\u01df\u01bc\3\2\2\2\u01df\u01bd\3\2\2\2\u01df")
        buf.write("\u01be\3\2\2\2\u01df\u01bf\3\2\2\2\u01df\u01c0\3\2\2\2")
        buf.write("\u01df\u01c1\3\2\2\2\u01df\u01c2\3\2\2\2\u01df\u01c3\3")
        buf.write("\2\2\2\u01df\u01c4\3\2\2\2\u01df\u01c5\3\2\2\2\u01df\u01c6")
        buf.write("\3\2\2\2\u01df\u01c7\3\2\2\2\u01df\u01c8\3\2\2\2\u01df")
        buf.write("\u01c9\3\2\2\2\u01df\u01ca\3\2\2\2\u01df\u01cb\3\2\2\2")
        buf.write("\u01df\u01cc\3\2\2\2\u01df\u01cd\3\2\2\2\u01df\u01ce\3")
        buf.write("\2\2\2\u01df\u01cf\3\2\2\2\u01df\u01d0\3\2\2\2\u01df\u01d1")
        buf.write("\3\2\2\2\u01df\u01d2\3\2\2\2\u01df\u01d3\3\2\2\2\u01df")
        buf.write("\u01d4\3\2\2\2\u01df\u01d5\3\2\2\2\u01df\u01d6\3\2\2\2")
        buf.write("\u01df\u01d7\3\2\2\2\u01df\u01d8\3\2\2\2\u01df\u01d9\3")
        buf.write("\2\2\2\u01df\u01da\3\2\2\2\u01df\u01db\3\2\2\2\u01df\u01dc")
        buf.write("\3\2\2\2\u01df\u01dd\3\2\2\2\u01df\u01de\3\2\2\2\u01e0")
        buf.write("#\3\2\2\2\u01e1\u01e2\7\t\2\2\u01e2%\3\2\2\2\u01e3\u01e4")
        buf.write("\7\21\2\2\u01e4\u01e5\7\u00bb\2\2\u01e5\u01e6\5\u0090")
        buf.write("I\2\u01e6\'\3\2\2\2\u01e7\u01e8\7\22\2\2\u01e8\u01e9\7")
        buf.write("\u00bb\2\2\u01e9\u01ea\5\u0090I\2\u01ea)\3\2\2\2\u01eb")
        buf.write("\u01fb\7\25\2\2\u01ec\u01ed\7\u00bb\2\2\u01ed\u01f8\5")
        buf.write("\u0090I\2\u01ee\u01f0\7\u00bb\2\2\u01ef\u01ee\3\2\2\2")
        buf.write("\u01ef\u01f0\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3\7")
        buf.write("\u0095\2\2\u01f2\u01f4\7\u00bb\2\2\u01f3\u01f2\3\2\2\2")
        buf.write("\u01f3\u01f4\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f7\5")
        buf.write("\u0090I\2\u01f6\u01ef\3\2\2\2\u01f7\u01fa\3\2\2\2\u01f8")
        buf.write("\u01f6\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fc\3\2\2\2")
        buf.write("\u01fa\u01f8\3\2\2\2\u01fb\u01ec\3\2\2\2\u01fb\u01fc\3")
        buf.write("\2\2\2\u01fc+\3\2\2\2\u01fd\u01fe\5\u00e0q\2\u01fe\u01ff")
        buf.write("\7\u00bb\2\2\u01ff\u0201\3\2\2\2\u0200\u01fd\3\2\2\2\u0200")
        buf.write("\u0201\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0203\7\26\2")
        buf.write("\2\u0203\u0204\7\u00bb\2\2\u0204\u020f\5.\30\2\u0205\u0207")
        buf.write("\7\u00bb\2\2\u0206\u0205\3\2\2\2\u0206\u0207\3\2\2\2\u0207")
        buf.write("\u0208\3\2\2\2\u0208\u020a\7\u0095\2\2\u0209\u020b\7\u00bb")
        buf.write("\2\2\u020a\u0209\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020c")
        buf.write("\3\2\2\2\u020c\u020e\5.\30\2\u020d\u0206\3\2\2\2\u020e")
        buf.write("\u0211\3\2\2\2\u020f\u020d\3\2\2\2\u020f\u0210\3\2\2\2")
        buf.write("\u0210-\3\2\2\2\u0211\u020f\3\2\2\2\u0212\u0214\5\u00ca")
        buf.write("f\2\u0213\u0215\5\u00e4s\2\u0214\u0213\3\2\2\2\u0214\u0215")
        buf.write("\3\2\2\2\u0215\u0218\3\2\2\2\u0216\u0217\7\u00bb\2\2\u0217")
        buf.write("\u0219\5\u00ccg\2\u0218\u0216\3\2\2\2\u0218\u0219\3\2")
        buf.write("\2\2\u0219\u021b\3\2\2\2\u021a\u021c\7\u00bb\2\2\u021b")
        buf.write("\u021a\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021d\3\2\2\2")
        buf.write("\u021d\u021f\7\u0099\2\2\u021e\u0220\7\u00bb\2\2\u021f")
        buf.write("\u021e\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0221\3\2\2\2")
        buf.write("\u0221\u0222\5\u0090I\2\u0222/\3\2\2\2\u0223\u0225\7\27")
        buf.write("\2\2\u0224\u0226\7\u00bb\2\2\u0225\u0224\3\2\2\2\u0225")
        buf.write("\u0226\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u0229\7\u0099")
        buf.write("\2\2\u0228\u022a\7\u00bb\2\2\u0229\u0228\3\2\2\2\u0229")
        buf.write("\u022a\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022c\5\u0090")
        buf.write("I\2\u022c\61\3\2\2\2\u022d\u022e\t\3\2\2\u022e\u022f\7")
        buf.write("\u00bb\2\2\u022f\u023a\5\u00d8m\2\u0230\u0232\7\u00bb")
        buf.write("\2\2\u0231\u0230\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0233")
        buf.write("\3\2\2\2\u0233\u0235\7\u0095\2\2\u0234\u0236\7\u00bb\2")
        buf.write("\2\u0235\u0234\3\2\2\2\u0235\u0236\3\2\2\2\u0236\u0237")
        buf.write("\3\2\2\2\u0237\u0239\5\u00d8m\2\u0238\u0231\3\2\2\2\u0239")
        buf.write("\u023c\3\2\2\2\u023a\u0238\3\2\2\2\u023a\u023b\3\2\2\2")
        buf.write("\u023b\63\3\2\2\2\u023c\u023a\3\2\2\2\u023d\u023f\7%\2")
        buf.write("\2\u023e\u0240\7\u00b9\2\2\u023f\u023e\3\2\2\2\u0240\u0241")
        buf.write("\3\2\2\2\u0241\u023f\3\2\2\2\u0241\u0242\3\2\2\2\u0242")
        buf.write("\u0249\3\2\2\2\u0243\u0245\5\36\20\2\u0244\u0246\7\u00b9")
        buf.write("\2\2\u0245\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0245")
        buf.write("\3\2\2\2\u0247\u0248\3\2\2\2\u0248\u024a\3\2\2\2\u0249")
        buf.write("\u0243\3\2\2\2\u0249\u024a\3\2\2\2\u024a\u024b\3\2\2\2")
        buf.write("\u024b\u0273\7E\2\2\u024c\u024d\7%\2\2\u024d\u024e\7\u00bb")
        buf.write("\2\2\u024e\u024f\t\4\2\2\u024f\u0250\7\u00bb\2\2\u0250")
        buf.write("\u0252\5\u0090I\2\u0251\u0253\7\u00b9\2\2\u0252\u0251")
        buf.write("\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0252\3\2\2\2\u0254")
        buf.write("\u0255\3\2\2\2\u0255\u025c\3\2\2\2\u0256\u0258\5\36\20")
        buf.write("\2\u0257\u0259\7\u00b9\2\2\u0258\u0257\3\2\2\2\u0259\u025a")
        buf.write("\3\2\2\2\u025a\u0258\3\2\2\2\u025a\u025b\3\2\2\2\u025b")
        buf.write("\u025d\3\2\2\2\u025c\u0256\3\2\2\2\u025c\u025d\3\2\2\2")
        buf.write("\u025d\u025e\3\2\2\2\u025e\u025f\7E\2\2\u025f\u0273\3")
        buf.write("\2\2\2\u0260\u0262\7%\2\2\u0261\u0263\7\u00b9\2\2\u0262")
        buf.write("\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u0262\3\2\2\2")
        buf.write("\u0264\u0265\3\2\2\2\u0265\u0266\3\2\2\2\u0266\u0268\5")
        buf.write("\36\20\2\u0267\u0269\7\u00b9\2\2\u0268\u0267\3\2\2\2\u0269")
        buf.write("\u026a\3\2\2\2\u026a\u0268\3\2\2\2\u026a\u026b\3\2\2\2")
        buf.write("\u026b\u026c\3\2\2\2\u026c\u026d\7E\2\2\u026d\u026e\7")
        buf.write("\u00bb\2\2\u026e\u026f\t\4\2\2\u026f\u0270\7\u00bb\2\2")
        buf.write("\u0270\u0271\5\u0090I\2\u0271\u0273\3\2\2\2\u0272\u023d")
        buf.write("\3\2\2\2\u0272\u024c\3\2\2\2\u0272\u0260\3\2\2\2\u0273")
        buf.write("\65\3\2\2\2\u0274\u0275\7\61\2\2\u0275\67\3\2\2\2\u0276")
        buf.write("\u0277\7\63\2\2\u0277\u0278\7\u00bb\2\2\u0278\u0279\5")
        buf.write("\u0090I\2\u02799\3\2\2\2\u027a\u027b\t\5\2\2\u027b;\3")
        buf.write("\2\2\2\u027c\u027d\79\2\2\u027d\u027e\7\u00bb\2\2\u027e")
        buf.write("\u0280\5\u0090I\2\u027f\u0281\7\u00bb\2\2\u0280\u027f")
        buf.write("\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0282\3\2\2\2\u0282")
        buf.write("\u0284\7\u0095\2\2\u0283\u0285\7\u00bb\2\2\u0284\u0283")
        buf.write("\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0286\3\2\2\2\u0286")
        buf.write("\u0287\5\u0090I\2\u0287=\3\2\2\2\u0288\u0289\7:\2\2\u0289")
        buf.write("\u028a\7\u00bb\2\2\u028a\u028b\7\'\2\2\u028b\u028c\7\u00bb")
        buf.write("\2\2\u028c\u028e\5\u00caf\2\u028d\u028f\5\u00e4s\2\u028e")
        buf.write("\u028d\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0290\3\2\2\2")
        buf.write("\u0290\u0291\7\u00bb\2\2\u0291\u0292\7@\2\2\u0292\u0293")
        buf.write("\7\u00bb\2\2\u0293\u0295\5\u0090I\2\u0294\u0296\7\u00b9")
        buf.write("\2\2\u0295\u0294\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0295")
        buf.write("\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u029f\3\2\2\2\u0299")
        buf.write("\u029b\5\36\20\2\u029a\u029c\7\u00b9\2\2\u029b\u029a\3")
        buf.write("\2\2\2\u029c\u029d\3\2\2\2\u029d\u029b\3\2\2\2\u029d\u029e")
        buf.write("\3\2\2\2\u029e\u02a0\3\2\2\2\u029f\u0299\3\2\2\2\u029f")
        buf.write("\u02a0\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02a4\7R\2\2")
        buf.write("\u02a2\u02a3\7\u00bb\2\2\u02a3\u02a5\5\u00caf\2\u02a4")
        buf.write("\u02a2\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5?\3\2\2\2\u02a6")
        buf.write("\u02a7\7:\2\2\u02a7\u02a8\7\u00bb\2\2\u02a8\u02aa\5\u00b0")
        buf.write("Y\2\u02a9\u02ab\5\u00e4s\2\u02aa\u02a9\3\2\2\2\u02aa\u02ab")
        buf.write("\3\2\2\2\u02ab\u02ae\3\2\2\2\u02ac\u02ad\7\u00bb\2\2\u02ad")
        buf.write("\u02af\5\u00ccg\2\u02ae\u02ac\3\2\2\2\u02ae\u02af\3\2")
        buf.write("\2\2\u02af\u02b1\3\2\2\2\u02b0\u02b2\7\u00bb\2\2\u02b1")
        buf.write("\u02b0\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b3\3\2\2\2")
        buf.write("\u02b3\u02b5\7\u0099\2\2\u02b4\u02b6\7\u00bb\2\2\u02b5")
        buf.write("\u02b4\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b7\3\2\2\2")
        buf.write("\u02b7\u02b8\5\u0090I\2\u02b8\u02b9\7\u00bb\2\2\u02b9")
        buf.write("\u02ba\7\u0084\2\2\u02ba\u02bb\7\u00bb\2\2\u02bb\u02c0")
        buf.write("\5\u0090I\2\u02bc\u02bd\7\u00bb\2\2\u02bd\u02be\7|\2\2")
        buf.write("\u02be\u02bf\7\u00bb\2\2\u02bf\u02c1\5\u0090I\2\u02c0")
        buf.write("\u02bc\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02c3\3\2\2\2")
        buf.write("\u02c2\u02c4\7\u00b9\2\2\u02c3\u02c2\3\2\2\2\u02c4\u02c5")
        buf.write("\3\2\2\2\u02c5\u02c3\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6")
        buf.write("\u02cd\3\2\2\2\u02c7\u02c9\5\36\20\2\u02c8\u02ca\7\u00b9")
        buf.write("\2\2\u02c9\u02c8\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02c9")
        buf.write("\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02ce\3\2\2\2\u02cd")
        buf.write("\u02c7\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02cf\3\2\2\2")
        buf.write("\u02cf\u02d5\7R\2\2\u02d0\u02d1\7\u00bb\2\2\u02d1\u02d3")
        buf.write("\5\u00caf\2\u02d2\u02d4\5\u00e4s\2\u02d3\u02d2\3\2\2\2")
        buf.write("\u02d3\u02d4\3\2\2\2\u02d4\u02d6\3\2\2\2\u02d5\u02d0\3")
        buf.write("\2\2\2\u02d5\u02d6\3\2\2\2\u02d6A\3\2\2\2\u02d7\u02d8")
        buf.write("\5\u00e6t\2\u02d8\u02d9\7\u00bb\2\2\u02d9\u02db\3\2\2")
        buf.write("\2\u02da\u02d7\3\2\2\2\u02da\u02db\3\2\2\2\u02db\u02de")
        buf.write("\3\2\2\2\u02dc\u02dd\7{\2\2\u02dd\u02df\7\u00bb\2\2\u02de")
        buf.write("\u02dc\3\2\2\2\u02de\u02df\3\2\2\2\u02df\u02e0\3\2\2\2")
        buf.write("\u02e0\u02e1\7;\2\2\u02e1\u02e2\7\u00bb\2\2\u02e2\u02e7")
        buf.write("\5\u00caf\2\u02e3\u02e5\7\u00bb\2\2\u02e4\u02e3\3\2\2")
        buf.write("\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e8")
        buf.write("\5\u00c0a\2\u02e7\u02e4\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8")
        buf.write("\u02eb\3\2\2\2\u02e9\u02ea\7\u00bb\2\2\u02ea\u02ec\5\u00cc")
        buf.write("g\2\u02eb\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ee")
        buf.write("\3\2\2\2\u02ed\u02ef\7\u00b9\2\2\u02ee\u02ed\3\2\2\2\u02ef")
        buf.write("\u02f0\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f0\u02f1\3\2\2\2")
        buf.write("\u02f1\u02f8\3\2\2\2\u02f2\u02f4\5\36\20\2\u02f3\u02f5")
        buf.write("\7\u00b9\2\2\u02f4\u02f3\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6")
        buf.write("\u02f4\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f9\3\2\2\2")
        buf.write("\u02f8\u02f2\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa\3")
        buf.write("\2\2\2\u02fa\u02fb\7*\2\2\u02fbC\3\2\2\2\u02fc\u02fd\7")
        buf.write("=\2\2\u02fd\u02fe\7\u00bb\2\2\u02fe\u02ff\5\u0090I\2\u02ff")
        buf.write("E\3\2\2\2\u0300\u0301\7>\2\2\u0301\u0302\7\u00bb\2\2\u0302")
        buf.write("\u0303\5J&\2\u0303\u0304\7\u00bb\2\2\u0304\u0305\7\u0082")
        buf.write("\2\2\u0305\u0306\7\u00bb\2\2\u0306\u030b\5\"\22\2\u0307")
        buf.write("\u0308\7\u00bb\2\2\u0308\u0309\7(\2\2\u0309\u030a\7\u00bb")
        buf.write("\2\2\u030a\u030c\5\"\22\2\u030b\u0307\3\2\2\2\u030b\u030c")
        buf.write("\3\2\2\2\u030c\u031a\3\2\2\2\u030d\u0311\5H%\2\u030e\u0310")
        buf.write("\5L\'\2\u030f\u030e\3\2\2\2\u0310\u0313\3\2\2\2\u0311")
        buf.write("\u030f\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0315\3\2\2\2")
        buf.write("\u0313\u0311\3\2\2\2\u0314\u0316\5N(\2\u0315\u0314\3\2")
        buf.write("\2\2\u0315\u0316\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u0318")
        buf.write("\7+\2\2\u0318\u031a\3\2\2\2\u0319\u0300\3\2\2\2\u0319")
        buf.write("\u030d\3\2\2\2\u031aG\3\2\2\2\u031b\u031c\7>\2\2\u031c")
        buf.write("\u031d\7\u00bb\2\2\u031d\u031e\5J&\2\u031e\u031f\7\u00bb")
        buf.write("\2\2\u031f\u0321\7\u0082\2\2\u0320\u0322\7\u00bb\2\2\u0321")
        buf.write("\u0320\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0324\3\2\2\2")
        buf.write("\u0323\u0325\7\u00b9\2\2\u0324\u0323\3\2\2\2\u0325\u0326")
        buf.write("\3\2\2\2\u0326\u0324\3\2\2\2\u0326\u0327\3\2\2\2\u0327")
        buf.write("\u032e\3\2\2\2\u0328\u032a\5\36\20\2\u0329\u032b\7\u00b9")
        buf.write("\2\2\u032a\u0329\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032a")
        buf.write("\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032f\3\2\2\2\u032e")
        buf.write("\u0328\3\2\2\2\u032e\u032f\3\2\2\2\u032fI\3\2\2\2\u0330")
        buf.write("\u0331\5\u0090I\2\u0331K\3\2\2\2\u0332\u0333\7)\2\2\u0333")
        buf.write("\u0334\7\u00bb\2\2\u0334\u0335\5J&\2\u0335\u0336\7\u00bb")
        buf.write("\2\2\u0336\u0338\7\u0082\2\2\u0337\u0339\7\u00bb\2\2\u0338")
        buf.write("\u0337\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033b\3\2\2\2")
        buf.write("\u033a\u033c\7\u00b9\2\2\u033b\u033a\3\2\2\2\u033c\u033d")
        buf.write("\3\2\2\2\u033d\u033b\3\2\2\2\u033d\u033e\3\2\2\2\u033e")
        buf.write("\u0345\3\2\2\2\u033f\u0341\5\36\20\2\u0340\u0342\7\u00b9")
        buf.write("\2\2\u0341\u0340\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0341")
        buf.write("\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0346\3\2\2\2\u0345")
        buf.write("\u033f\3\2\2\2\u0345\u0346\3\2\2\2\u0346M\3\2\2\2\u0347")
        buf.write("\u0349\7(\2\2\u0348\u034a\7\u00bb\2\2\u0349\u0348\3\2")
        buf.write("\2\2\u0349\u034a\3\2\2\2\u034a\u034c\3\2\2\2\u034b\u034d")
        buf.write("\7\u00b9\2\2\u034c\u034b\3\2\2\2\u034d\u034e\3\2\2\2\u034e")
        buf.write("\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0356\3\2\2\2")
        buf.write("\u0350\u0352\5\36\20\2\u0351\u0353\7\u00b9\2\2\u0352\u0351")
        buf.write("\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0352\3\2\2\2\u0354")
        buf.write("\u0355\3\2\2\2\u0355\u0357\3\2\2\2\u0356\u0350\3\2\2\2")
        buf.write("\u0356\u0357\3\2\2\2\u0357O\3\2\2\2\u0358\u0359\7A\2\2")
        buf.write("\u0359\u035a\7\u00bb\2\2\u035a\u0363\5\u0090I\2\u035b")
        buf.write("\u035d\7\u00bb\2\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2")
        buf.write("\2\2\u035d\u035e\3\2\2\2\u035e\u0360\7\u0095\2\2\u035f")
        buf.write("\u0361\7\u00bb\2\2\u0360\u035f\3\2\2\2\u0360\u0361\3\2")
        buf.write("\2\2\u0361\u0362\3\2\2\2\u0362\u0364\5\u0090I\2\u0363")
        buf.write("\u035c\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0363\3\2\2\2")
        buf.write("\u0365\u0366\3\2\2\2\u0366Q\3\2\2\2\u0367\u0368\7G\2\2")
        buf.write("\u0368\u036a\7\u00bb\2\2\u0369\u0367\3\2\2\2\u0369\u036a")
        buf.write("\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036d\5\u00aeX\2\u036c")
        buf.write("\u036e\7\u00bb\2\2\u036d\u036c\3\2\2\2\u036d\u036e\3\2")
        buf.write("\2\2\u036e\u036f\3\2\2\2\u036f\u0371\t\6\2\2\u0370\u0372")
        buf.write("\7\u00bb\2\2\u0371\u0370\3\2\2\2\u0371\u0372\3\2\2\2\u0372")
        buf.write("\u0373\3\2\2\2\u0373\u0374\5\u0090I\2\u0374S\3\2\2\2\u0375")
        buf.write("\u0376\7H\2\2\u0376\u0377\7\u00bb\2\2\u0377\u0379\5\u0090")
        buf.write("I\2\u0378\u037a\7\u00bb\2\2\u0379\u0378\3\2\2\2\u0379")
        buf.write("\u037a\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037d\7\u0095")
        buf.write("\2\2\u037c\u037e\7\u00bb\2\2\u037d\u037c\3\2\2\2\u037d")
        buf.write("\u037e\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380\5\u0090")
        buf.write("I\2\u0380U\3\2\2\2\u0381\u0383\7N\2\2\u0382\u0384\7\u00bb")
        buf.write("\2\2\u0383\u0382\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u0385")
        buf.write("\3\2\2\2\u0385\u0387\7\u009f\2\2\u0386\u0388\7\u00bb\2")
        buf.write("\2\u0387\u0386\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u0389")
        buf.write("\3\2\2\2\u0389\u038b\5\u00bc_\2\u038a\u038c\7\u00bb\2")
        buf.write("\2\u038b\u038a\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038d")
        buf.write("\3\2\2\2\u038d\u038e\7\u00aa\2\2\u038eW\3\2\2\2\u038f")
        buf.write("\u0390\7O\2\2\u0390\u0391\7\u00bb\2\2\u0391\u0392\5\u0090")
        buf.write("I\2\u0392Y\3\2\2\2\u0393\u0394\7Q\2\2\u0394\u0395\7\u00bb")
        buf.write("\2\2\u0395\u0396\5\u0090I\2\u0396\u0397\7\u00bb\2\2\u0397")
        buf.write("\u0398\7\b\2\2\u0398\u0399\7\u00bb\2\2\u0399\u039a\5\u0090")
        buf.write("I\2\u039a[\3\2\2\2\u039b\u039c\t\7\2\2\u039c\u03a6\7\u00bb")
        buf.write("\2\2\u039d\u039e\7=\2\2\u039e\u039f\7\u00bb\2\2\u039f")
        buf.write("\u03a1\5\u0090I\2\u03a0\u03a2\7\u0094\2\2\u03a1\u03a0")
        buf.write("\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a7\3\2\2\2\u03a3")
        buf.write("\u03a4\7t\2\2\u03a4\u03a5\7\u00bb\2\2\u03a5\u03a7\7R\2")
        buf.write("\2\u03a6\u039d\3\2\2\2\u03a6\u03a3\3\2\2\2\u03a7]\3\2")
        buf.write("\2\2\u03a8\u03a9\7X\2\2\u03a9\u03aa\7\u00bb\2\2\u03aa")
        buf.write("\u03ab\5\u0090I\2\u03ab\u03ac\7\u00bb\2\2\u03ac\u03ad")
        buf.write("\7=\2\2\u03ad\u03ae\7\u00bb\2\2\u03ae\u03b9\5\u0090I\2")
        buf.write("\u03af\u03b1\7\u00bb\2\2\u03b0\u03af\3\2\2\2\u03b0\u03b1")
        buf.write("\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b4\7\u0095\2\2\u03b3")
        buf.write("\u03b5\7\u00bb\2\2\u03b4\u03b3\3\2\2\2\u03b4\u03b5\3\2")
        buf.write("\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b8\5\u0090I\2\u03b7")
        buf.write("\u03b0\3\2\2\2\u03b8\u03bb\3\2\2\2\u03b9\u03b7\3\2\2\2")
        buf.write("\u03b9\u03ba\3\2\2\2\u03ba_\3\2\2\2\u03bb\u03b9\3\2\2")
        buf.write("\2\u03bc\u03bd\7[\2\2\u03bd\u03be\7\u00bb\2\2\u03be\u03bf")
        buf.write("\5\u0090I\2\u03bf\u03c0\7\u00bb\2\2\u03c0\u03c1\7:\2\2")
        buf.write("\u03c1\u03c2\7\u00bb\2\2\u03c2\u03c7\t\b\2\2\u03c3\u03c4")
        buf.write("\7\u00bb\2\2\u03c4\u03c5\7\3\2\2\u03c5\u03c6\7\u00bb\2")
        buf.write("\2\u03c6\u03c8\t\t\2\2\u03c7\u03c3\3\2\2\2\u03c7\u03c8")
        buf.write("\3\2\2\2\u03c8\u03cb\3\2\2\2\u03c9\u03ca\7\u00bb\2\2\u03ca")
        buf.write("\u03cc\t\n\2\2\u03cb\u03c9\3\2\2\2\u03cb\u03cc\3\2\2\2")
        buf.write("\u03cc\u03cd\3\2\2\2\u03cd\u03ce\7\u00bb\2\2\u03ce\u03cf")
        buf.write("\7\b\2\2\u03cf\u03d0\7\u00bb\2\2\u03d0\u03db\5\u0090I")
        buf.write("\2\u03d1\u03d2\7\u00bb\2\2\u03d2\u03d4\7F\2\2\u03d3\u03d5")
        buf.write("\7\u00bb\2\2\u03d4\u03d3\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5")
        buf.write("\u03d6\3\2\2\2\u03d6\u03d8\7\u0099\2\2\u03d7\u03d9\7\u00bb")
        buf.write("\2\2\u03d8\u03d7\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03da")
        buf.write("\3\2\2\2\u03da\u03dc\5\u0090I\2\u03db\u03d1\3\2\2\2\u03db")
        buf.write("\u03dc\3\2\2\2\u03dca\3\2\2\2\u03dd\u03ea\5d\63\2\u03de")
        buf.write("\u03e0\7\u00bb\2\2\u03df\u03de\3\2\2\2\u03df\u03e0\3\2")
        buf.write("\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e3\t\13\2\2\u03e2\u03e4")
        buf.write("\7\u00bb\2\2\u03e3\u03e2\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4")
        buf.write("\u03e6\3\2\2\2\u03e5\u03e7\5d\63\2\u03e6\u03e5\3\2\2\2")
        buf.write("\u03e6\u03e7\3\2\2\2\u03e7\u03e9\3\2\2\2\u03e8\u03df\3")
        buf.write("\2\2\2\u03e9\u03ec\3\2\2\2\u03ea\u03e8\3\2\2\2\u03ea\u03eb")
        buf.write("\3\2\2\2\u03eb\u03ff\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ed")
        buf.write("\u03ef\5d\63\2\u03ee\u03ed\3\2\2\2\u03ee\u03ef\3\2\2\2")
        buf.write("\u03ef\u03fa\3\2\2\2\u03f0\u03f2\7\u00bb\2\2\u03f1\u03f0")
        buf.write("\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3")
        buf.write("\u03f5\t\13\2\2\u03f4\u03f6\7\u00bb\2\2\u03f5\u03f4\3")
        buf.write("\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f8\3\2\2\2\u03f7\u03f9")
        buf.write("\5d\63\2\u03f8\u03f7\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9")
        buf.write("\u03fb\3\2\2\2\u03fa\u03f1\3\2\2\2\u03fb\u03fc\3\2\2\2")
        buf.write("\u03fc\u03fa\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03ff\3")
        buf.write("\2\2\2\u03fe\u03dd\3\2\2\2\u03fe\u03ee\3\2\2\2\u03ffc")
        buf.write("\3\2\2\2\u0400\u040e\t\f\2\2\u0401\u0403\7\u00bb\2\2\u0402")
        buf.write("\u0401\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u0404\3\2\2\2")
        buf.write("\u0404\u0406\7\u009f\2\2\u0405\u0407\7\u00bb\2\2\u0406")
        buf.write("\u0405\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0408\3\2\2\2")
        buf.write("\u0408\u040a\5\u00bc_\2\u0409\u040b\7\u00bb\2\2\u040a")
        buf.write("\u0409\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u040c\3\2\2\2")
        buf.write("\u040c\u040d\7\u00aa\2\2\u040d\u040f\3\2\2\2\u040e\u0402")
        buf.write("\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0412\3\2\2\2\u0410")
        buf.write("\u0412\5\u0090I\2\u0411\u0400\3\2\2\2\u0411\u0410\3\2")
        buf.write("\2\2\u0412e\3\2\2\2\u0413\u0414\7f\2\2\u0414\u0415\7\u00bb")
        buf.write("\2\2\u0415\u0420\5\u0090I\2\u0416\u0418\7\u00bb\2\2\u0417")
        buf.write("\u0416\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u0419\3\2\2\2")
        buf.write("\u0419\u041e\7\u0095\2\2\u041a\u041c\7\u00bb\2\2\u041b")
        buf.write("\u041a\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041d\3\2\2\2")
        buf.write("\u041d\u041f\5b\62\2\u041e\u041b\3\2\2\2\u041e\u041f\3")
        buf.write("\2\2\2\u041f\u0421\3\2\2\2\u0420\u0417\3\2\2\2\u0420\u0421")
        buf.write("\3\2\2\2\u0421\u043b\3\2\2\2\u0422\u0424\7f\2\2\u0423")
        buf.write("\u0425\7\u00bb\2\2\u0424\u0423\3\2\2\2\u0424\u0425\3\2")
        buf.write("\2\2\u0425\u0426\3\2\2\2\u0426\u0428\7\u009f\2\2\u0427")
        buf.write("\u0429\7\u00bb\2\2\u0428\u0427\3\2\2\2\u0428\u0429\3\2")
        buf.write("\2\2\u0429\u042a\3\2\2\2\u042a\u0433\5\u0090I\2\u042b")
        buf.write("\u042d\7\u00bb\2\2\u042c\u042b\3\2\2\2\u042c\u042d\3\2")
        buf.write("\2\2\u042d\u042e\3\2\2\2\u042e\u0430\7\u0095\2\2\u042f")
        buf.write("\u0431\7\u00bb\2\2\u0430\u042f\3\2\2\2\u0430\u0431\3\2")
        buf.write("\2\2\u0431\u0432\3\2\2\2\u0432\u0434\5b\62\2\u0433\u042c")
        buf.write("\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0436\3\2\2\2\u0435")
        buf.write("\u0437\7\u00bb\2\2\u0436\u0435\3\2\2\2\u0436\u0437\3\2")
        buf.write("\2\2\u0437\u0438\3\2\2\2\u0438\u0439\7\u00aa\2\2\u0439")
        buf.write("\u043b\3\2\2\2\u043a\u0413\3\2\2\2\u043a\u0422\3\2\2\2")
        buf.write("\u043bg\3\2\2\2\u043c\u043d\5\u00e6t\2\u043d\u043e\7\u00bb")
        buf.write("\2\2\u043e\u0440\3\2\2\2\u043f\u043c\3\2\2\2\u043f\u0440")
        buf.write("\3\2\2\2\u0440\u0443\3\2\2\2\u0441\u0442\7{\2\2\u0442")
        buf.write("\u0444\7\u00bb\2\2\u0443\u0441\3\2\2\2\u0443\u0444\3\2")
        buf.write("\2\2\u0444\u0445\3\2\2\2\u0445\u0446\7h\2\2\u0446\u0447")
        buf.write("\7\u00bb\2\2\u0447\u0449\5\u00caf\2\u0448\u044a\5\u00e4")
        buf.write("s\2\u0449\u0448\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u044f")
        buf.write("\3\2\2\2\u044b\u044d\7\u00bb\2\2\u044c\u044b\3\2\2\2\u044c")
        buf.write("\u044d\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u0450\5\u00c0")
        buf.write("a\2\u044f\u044c\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0453")
        buf.write("\3\2\2\2\u0451\u0452\7\u00bb\2\2\u0452\u0454\5\u00ccg")
        buf.write("\2\u0453\u0451\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0456")
        buf.write("\3\2\2\2\u0455\u0457\7\u00b9\2\2\u0456\u0455\3\2\2\2\u0457")
        buf.write("\u0458\3\2\2\2\u0458\u0456\3\2\2\2\u0458\u0459\3\2\2\2")
        buf.write("\u0459\u0460\3\2\2\2\u045a\u045c\5\36\20\2\u045b\u045d")
        buf.write("\7\u00b9\2\2\u045c\u045b\3\2\2\2\u045d\u045e\3\2\2\2\u045e")
        buf.write("\u045c\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0461\3\2\2\2")
        buf.write("\u0460\u045a\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0462\3")
        buf.write("\2\2\2\u0462\u0463\7,\2\2\u0463i\3\2\2\2\u0464\u0465\5")
        buf.write("\u00e6t\2\u0465\u0466\7\u00bb\2\2\u0466\u0468\3\2\2\2")
        buf.write("\u0467\u0464\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u046b\3")
        buf.write("\2\2\2\u0469\u046a\7{\2\2\u046a\u046c\7\u00bb\2\2\u046b")
        buf.write("\u0469\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046d\3\2\2\2")
        buf.write("\u046d\u046e\7j\2\2\u046e\u046f\7\u00bb\2\2\u046f\u0474")
        buf.write("\5\u00caf\2\u0470\u0472\7\u00bb\2\2\u0471\u0470\3\2\2")
        buf.write("\2\u0471\u0472\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u0475")
        buf.write("\5\u00c0a\2\u0474\u0471\3\2\2\2\u0474\u0475\3\2\2\2\u0475")
        buf.write("\u0477\3\2\2\2\u0476\u0478\7\u00b9\2\2\u0477\u0476\3\2")
        buf.write("\2\2\u0478\u0479\3\2\2\2\u0479\u0477\3\2\2\2\u0479\u047a")
        buf.write("\3\2\2\2\u047a\u0481\3\2\2\2\u047b\u047d\5\36\20\2\u047c")
        buf.write("\u047e\7\u00b9\2\2\u047d\u047c\3\2\2\2\u047e\u047f\3\2")
        buf.write("\2\2\u047f\u047d\3\2\2\2\u047f\u0480\3\2\2\2\u0480\u0482")
        buf.write("\3\2\2\2\u0481\u047b\3\2\2\2\u0481\u0482\3\2\2\2\u0482")
        buf.write("\u0483\3\2\2\2\u0483\u0484\7,\2\2\u0484k\3\2\2\2\u0485")
        buf.write("\u0486\5\u00e6t\2\u0486\u0487\7\u00bb\2\2\u0487\u0489")
        buf.write("\3\2\2\2\u0488\u0485\3\2\2\2\u0488\u0489\3\2\2\2\u0489")
        buf.write("\u048c\3\2\2\2\u048a\u048b\7{\2\2\u048b\u048d\7\u00bb")
        buf.write("\2\2\u048c\u048a\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e")
        buf.write("\3\2\2\2\u048e\u048f\7i\2\2\u048f\u0490\7\u00bb\2\2\u0490")
        buf.write("\u0495\5\u00caf\2\u0491\u0493\7\u00bb\2\2\u0492\u0491")
        buf.write("\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494\3\2\2\2\u0494")
        buf.write("\u0496\5\u00c0a\2\u0495\u0492\3\2\2\2\u0495\u0496\3\2")
        buf.write("\2\2\u0496\u0498\3\2\2\2\u0497\u0499\7\u00b9\2\2\u0498")
        buf.write("\u0497\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u0498\3\2\2\2")
        buf.write("\u049a\u049b\3\2\2\2\u049b\u04a2\3\2\2\2\u049c\u049e\5")
        buf.write("\36\20\2\u049d\u049f\7\u00b9\2\2\u049e\u049d\3\2\2\2\u049f")
        buf.write("\u04a0\3\2\2\2\u04a0\u049e\3\2\2\2\u04a0\u04a1\3\2\2\2")
        buf.write("\u04a1\u04a3\3\2\2\2\u04a2\u049c\3\2\2\2\u04a2\u04a3\3")
        buf.write("\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a5\7,\2\2\u04a5m\3")
        buf.write("\2\2\2\u04a6\u04a7\7l\2\2\u04a7\u04a8\7\u00bb\2\2\u04a8")
        buf.write("\u04aa\5\u0090I\2\u04a9\u04ab\7\u00bb\2\2\u04aa\u04a9")
        buf.write("\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac")
        buf.write("\u04ae\7\u0095\2\2\u04ad\u04af\7\u00bb\2\2\u04ae\u04ad")
        buf.write("\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b1\3\2\2\2\u04b0")
        buf.write("\u04b2\5\u0090I\2\u04b1\u04b0\3\2\2\2\u04b1\u04b2\3\2")
        buf.write("\2\2\u04b2\u04b4\3\2\2\2\u04b3\u04b5\7\u00bb\2\2\u04b4")
        buf.write("\u04b3\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b6\3\2\2\2")
        buf.write("\u04b6\u04b8\7\u0095\2\2\u04b7\u04b9\7\u00bb\2\2\u04b8")
        buf.write("\u04b7\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04ba\3\2\2\2")
        buf.write("\u04ba\u04bb\5\u0090I\2\u04bbo\3\2\2\2\u04bc\u04bf\7n")
        buf.write("\2\2\u04bd\u04be\7\u00bb\2\2\u04be\u04c0\5\u0090I\2\u04bf")
        buf.write("\u04bd\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0q\3\2\2\2\u04c1")
        buf.write("\u04c2\7q\2\2\u04c2\u04c5\7\u00bb\2\2\u04c3\u04c4\7e\2")
        buf.write("\2\u04c4\u04c6\7\u00bb\2\2\u04c5\u04c3\3\2\2\2\u04c5\u04c6")
        buf.write("\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04d2\5t;\2\u04c8\u04ca")
        buf.write("\7\u00bb\2\2\u04c9\u04c8\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca")
        buf.write("\u04cb\3\2\2\2\u04cb\u04cd\7\u0095\2\2\u04cc\u04ce\7\u00bb")
        buf.write("\2\2\u04cd\u04cc\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04cf")
        buf.write("\3\2\2\2\u04cf\u04d1\5t;\2\u04d0\u04c9\3\2\2\2\u04d1\u04d4")
        buf.write("\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3")
        buf.write("s\3\2\2\2\u04d4\u04d2\3\2\2\2\u04d5\u04d7\5\u00aeX\2\u04d6")
        buf.write("\u04d8\7\u00bb\2\2\u04d7\u04d6\3\2\2\2\u04d7\u04d8\3\2")
        buf.write("\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04db\7\u009f\2\2\u04da")
        buf.write("\u04dc\7\u00bb\2\2\u04db\u04da\3\2\2\2\u04db\u04dc\3\2")
        buf.write("\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04df\5\u00c6d\2\u04de")
        buf.write("\u04e0\7\u00bb\2\2\u04df\u04de\3\2\2\2\u04df\u04e0\3\2")
        buf.write("\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e4\7\u00aa\2\2\u04e2")
        buf.write("\u04e3\7\u00bb\2\2\u04e3\u04e5\5\u00ccg\2\u04e4\u04e2")
        buf.write("\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5u\3\2\2\2\u04e6\u04e7")
        buf.write("\7s\2\2\u04e7w\3\2\2\2\u04e8\u04ee\7t\2\2\u04e9\u04ec")
        buf.write("\7\u00bb\2\2\u04ea\u04ed\7R\2\2\u04eb\u04ed\5\u00caf\2")
        buf.write("\u04ec\u04ea\3\2\2\2\u04ec\u04eb\3\2\2\2\u04ed\u04ef\3")
        buf.write("\2\2\2\u04ee\u04e9\3\2\2\2\u04ee\u04ef\3\2\2\2\u04efy")
        buf.write("\3\2\2\2\u04f0\u04f1\7v\2\2\u04f1\u04f2\7\u00bb\2\2\u04f2")
        buf.write("\u04f3\5\u0090I\2\u04f3{\3\2\2\2\u04f4\u04f5\7w\2\2\u04f5")
        buf.write("\u04f6\7\u00bb\2\2\u04f6\u04f7\7\20\2\2\u04f7\u04f8\7")
        buf.write("\u00bb\2\2\u04f8\u04fa\5\u0090I\2\u04f9\u04fb\7\u00b9")
        buf.write("\2\2\u04fa\u04f9\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04fa")
        buf.write("\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u0501\3\2\2\2\u04fe")
        buf.write("\u0500\5~@\2\u04ff\u04fe\3\2\2\2\u0500\u0503\3\2\2\2\u0501")
        buf.write("\u04ff\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u0505\3\2\2\2")
        buf.write("\u0503\u0501\3\2\2\2\u0504\u0506\7\u00bb\2\2\u0505\u0504")
        buf.write("\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0507\3\2\2\2\u0507")
        buf.write("\u0508\7-\2\2\u0508}\3\2\2\2\u0509\u050a\7\20\2\2\u050a")
        buf.write("\u050b\7\u00bb\2\2\u050b\u050d\5\u0080A\2\u050c\u050e")
        buf.write("\7\u00bb\2\2\u050d\u050c\3\2\2\2\u050d\u050e\3\2\2\2\u050e")
        buf.write("\u051d\3\2\2\2\u050f\u0511\7\u0094\2\2\u0510\u050f\3\2")
        buf.write("\2\2\u0510\u0511\3\2\2\2\u0511\u0515\3\2\2\2\u0512\u0514")
        buf.write("\7\u00b9\2\2\u0513\u0512\3\2\2\2\u0514\u0517\3\2\2\2\u0515")
        buf.write("\u0513\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u051e\3\2\2\2")
        buf.write("\u0517\u0515\3\2\2\2\u0518\u051a\7\u00b9\2\2\u0519\u0518")
        buf.write("\3\2\2\2\u051a\u051b\3\2\2\2\u051b\u0519\3\2\2\2\u051b")
        buf.write("\u051c\3\2\2\2\u051c\u051e\3\2\2\2\u051d\u0510\3\2\2\2")
        buf.write("\u051d\u0519\3\2\2\2\u051e\u0528\3\2\2\2\u051f\u0521\7")
        buf.write("\u00bb\2\2\u0520\u051f\3\2\2\2\u0520\u0521\3\2\2\2\u0521")
        buf.write("\u0522\3\2\2\2\u0522\u0524\5\36\20\2\u0523\u0525\7\u00b9")
        buf.write("\2\2\u0524\u0523\3\2\2\2\u0525\u0526\3\2\2\2\u0526\u0524")
        buf.write("\3\2\2\2\u0526\u0527\3\2\2\2\u0527\u0529\3\2\2\2\u0528")
        buf.write("\u0520\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u0531\3\2\2\2")
        buf.write("\u052a\u052c\7\u00ba\2\2\u052b\u052d\7\u00b9\2\2\u052c")
        buf.write("\u052b\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u052c\3\2\2\2")
        buf.write("\u052e\u052f\3\2\2\2\u052f\u0531\3\2\2\2\u0530\u0509\3")
        buf.write("\2\2\2\u0530\u052a\3\2\2\2\u0531\177\3\2\2\2\u0532\u0542")
        buf.write("\7(\2\2\u0533\u053e\5\u0082B\2\u0534\u0536\7\u00bb\2\2")
        buf.write("\u0535\u0534\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0537\3")
        buf.write("\2\2\2\u0537\u0539\7\u0095\2\2\u0538\u053a\7\u00bb\2\2")
        buf.write("\u0539\u0538\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u053b\3")
        buf.write("\2\2\2\u053b\u053d\5\u0082B\2\u053c\u0535\3\2\2\2\u053d")
        buf.write("\u0540\3\2\2\2\u053e\u053c\3\2\2\2\u053e\u053f\3\2\2\2")
        buf.write("\u053f\u0542\3\2\2\2\u0540\u053e\3\2\2\2\u0541\u0532\3")
        buf.write("\2\2\2\u0541\u0533\3\2\2\2\u0542\u0081\3\2\2\2\u0543\u054b")
        buf.write("\5\u0090I\2\u0544\u0545\5\u0090I\2\u0545\u0546\7\u00bb")
        buf.write("\2\2\u0546\u0547\7\u0084\2\2\u0547\u0548\7\u00bb\2\2\u0548")
        buf.write("\u0549\5\u0090I\2\u0549\u054b\3\2\2\2\u054a\u0543\3\2")
        buf.write("\2\2\u054a\u0544\3\2\2\2\u054b\u0083\3\2\2\2\u054c\u054d")
        buf.write("\7y\2\2\u054d\u054e\7\u00bb\2\2\u054e\u0550\5\u00aeX\2")
        buf.write("\u054f\u0551\7\u00bb\2\2\u0550\u054f\3\2\2\2\u0550\u0551")
        buf.write("\3\2\2\2\u0551\u0552\3\2\2\2\u0552\u0554\7\u0099\2\2\u0553")
        buf.write("\u0555\7\u00bb\2\2\u0554\u0553\3\2\2\2\u0554\u0555\3\2")
        buf.write("\2\2\u0555\u0556\3\2\2\2\u0556\u0557\5\u0090I\2\u0557")
        buf.write("\u0085\3\2\2\2\u0558\u0559\7}\2\2\u0559\u0087\3\2\2\2")
        buf.write("\u055a\u055b\5\u00e6t\2\u055b\u055c\7\u00bb\2\2\u055c")
        buf.write("\u055e\3\2\2\2\u055d\u055a\3\2\2\2\u055d\u055e\3\2\2\2")
        buf.write("\u055e\u0561\3\2\2\2\u055f\u0560\7{\2\2\u0560\u0562\7")
        buf.write("\u00bb\2\2\u0561\u055f\3\2\2\2\u0561\u0562\3\2\2\2\u0562")
        buf.write("\u0563\3\2\2\2\u0563\u0564\7\177\2\2\u0564\u0565\7\u00bb")
        buf.write("\2\2\u0565\u056a\5\u00caf\2\u0566\u0568\7\u00bb\2\2\u0567")
        buf.write("\u0566\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u0569\3\2\2\2")
        buf.write("\u0569\u056b\5\u00c0a\2\u056a\u0567\3\2\2\2\u056a\u056b")
        buf.write("\3\2\2\2\u056b\u056d\3\2\2\2\u056c\u056e\7\u00b9\2\2\u056d")
        buf.write("\u056c\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u056d\3\2\2\2")
        buf.write("\u056f\u0570\3\2\2\2\u0570\u0577\3\2\2\2\u0571\u0573\5")
        buf.write("\36\20\2\u0572\u0574\7\u00b9\2\2\u0573\u0572\3\2\2\2\u0574")
        buf.write("\u0575\3\2\2\2\u0575\u0573\3\2\2\2\u0575\u0576\3\2\2\2")
        buf.write("\u0576\u0578\3\2\2\2\u0577\u0571\3\2\2\2\u0577\u0578\3")
        buf.write("\2\2\2\u0578\u0579\3\2\2\2\u0579\u057a\7.\2\2\u057a\u0089")
        buf.write("\3\2\2\2\u057b\u057d\7\u0083\2\2\u057c\u057e\7\u00bb\2")
        buf.write("\2\u057d\u057c\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u057f")
        buf.write("\3\2\2\2\u057f\u0581\7\u0099\2\2\u0580\u0582\7\u00bb\2")
        buf.write("\2\u0581\u0580\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0583")
        buf.write("\3\2\2\2\u0583\u0584\5\u0090I\2\u0584\u008b\3\2\2\2\u0585")
        buf.write("\u0586\5\u00e6t\2\u0586\u0587\7\u00bb\2\2\u0587\u0589")
        buf.write("\3\2\2\2\u0588\u0585\3\2\2\2\u0588\u0589\3\2\2\2\u0589")
        buf.write("\u058a\3\2\2\2\u058a\u058b\7\u0086\2\2\u058b\u058c\7\u00bb")
        buf.write("\2\2\u058c\u058e\5\u00caf\2\u058d\u058f\7\u00b9\2\2\u058e")
        buf.write("\u058d\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u058e\3\2\2\2")
        buf.write("\u0590\u0591\3\2\2\2\u0591\u0595\3\2\2\2\u0592\u0594\5")
        buf.write("\u008eH\2\u0593\u0592\3\2\2\2\u0594\u0597\3\2\2\2\u0595")
        buf.write("\u0593\3\2\2\2\u0595\u0596\3\2\2\2\u0596\u0598\3\2\2\2")
        buf.write("\u0597\u0595\3\2\2\2\u0598\u0599\7/\2\2\u0599\u008d\3")
        buf.write("\2\2\2\u059a\u05a9\5\u00caf\2\u059b\u059d\7\u00bb\2\2")
        buf.write("\u059c\u059b\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059e\3")
        buf.write("\2\2\2\u059e\u05a3\7\u009f\2\2\u059f\u05a1\7\u00bb\2\2")
        buf.write("\u05a0\u059f\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a2\3")
        buf.write("\2\2\2\u05a2\u05a4\5\u00c6d\2\u05a3\u05a0\3\2\2\2\u05a3")
        buf.write("\u05a4\3\2\2\2\u05a4\u05a6\3\2\2\2\u05a5\u05a7\7\u00bb")
        buf.write("\2\2\u05a6\u05a5\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05a8")
        buf.write("\3\2\2\2\u05a8\u05aa\7\u00aa\2\2\u05a9\u059c\3\2\2\2\u05a9")
        buf.write("\u05aa\3\2\2\2\u05aa\u05ad\3\2\2\2\u05ab\u05ac\7\u00bb")
        buf.write("\2\2\u05ac\u05ae\5\u00ccg\2\u05ad\u05ab\3\2\2\2\u05ad")
        buf.write("\u05ae\3\2\2\2\u05ae\u05b0\3\2\2\2\u05af\u05b1\7\u00b9")
        buf.write("\2\2\u05b0\u05af\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b0")
        buf.write("\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u008f\3\2\2\2\u05b4")
        buf.write("\u05b5\bI\1\2\u05b5\u05f7\5\u00dco\2\u05b6\u05b8\7\u009f")
        buf.write("\2\2\u05b7\u05b9\7\u00bb\2\2\u05b8\u05b7\3\2\2\2\u05b8")
        buf.write("\u05b9\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05c5\5\u0090")
        buf.write("I\2\u05bb\u05bd\7\u00bb\2\2\u05bc\u05bb\3\2\2\2\u05bc")
        buf.write("\u05bd\3\2\2\2\u05bd\u05be\3\2\2\2\u05be\u05c0\7\u0095")
        buf.write("\2\2\u05bf\u05c1\7\u00bb\2\2\u05c0\u05bf\3\2\2\2\u05c0")
        buf.write("\u05c1\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c4\5\u0090")
        buf.write("I\2\u05c3\u05bc\3\2\2\2\u05c4\u05c7\3\2\2\2\u05c5\u05c3")
        buf.write("\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c9\3\2\2\2\u05c7")
        buf.write("\u05c5\3\2\2\2\u05c8\u05ca\7\u00bb\2\2\u05c9\u05c8\3\2")
        buf.write("\2\2\u05c9\u05ca\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc")
        buf.write("\7\u00aa\2\2\u05cc\u05f7\3\2\2\2\u05cd\u05ce\7S\2\2\u05ce")
        buf.write("\u05cf\7\u00bb\2\2\u05cf\u05f7\5\u0090I\34\u05d0\u05d2")
        buf.write("\5\u00aeX\2\u05d1\u05d3\7\u00bb\2\2\u05d2\u05d1\3\2\2")
        buf.write("\2\u05d2\u05d3\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4\u05d6")
        buf.write("\7\u0092\2\2\u05d5\u05d7\7\u00bb\2\2\u05d6\u05d5\3\2\2")
        buf.write("\2\u05d6\u05d7\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05d9")
        buf.write("\5\u0090I\33\u05d9\u05f7\3\2\2\2\u05da\u05dc\7\u00a1\2")
        buf.write("\2\u05db\u05dd\7\u00bb\2\2\u05dc\u05db\3\2\2\2\u05dc\u05dd")
        buf.write("\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05f7\5\u0090I\31\u05df")
        buf.write("\u05e1\7\u00a6\2\2\u05e0\u05e2\7\u00bb\2\2\u05e1\u05e0")
        buf.write("\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3")
        buf.write("\u05f7\5\u0090I\30\u05e4\u05f1\7T\2\2\u05e5\u05e6\7\u00bb")
        buf.write("\2\2\u05e6\u05f2\5\u0090I\2\u05e7\u05e9\7\u009f\2\2\u05e8")
        buf.write("\u05ea\7\u00bb\2\2\u05e9\u05e8\3\2\2\2\u05e9\u05ea\3\2")
        buf.write("\2\2\u05ea\u05eb\3\2\2\2\u05eb\u05ed\5\u0090I\2\u05ec")
        buf.write("\u05ee\7\u00bb\2\2\u05ed\u05ec\3\2\2\2\u05ed\u05ee\3\2")
        buf.write("\2\2\u05ee\u05ef\3\2\2\2\u05ef\u05f0\7\u00aa\2\2\u05f0")
        buf.write("\u05f2\3\2\2\2\u05f1\u05e5\3\2\2\2\u05f1\u05e7\3\2\2\2")
        buf.write("\u05f2\u05f7\3\2\2\2\u05f3\u05f7\5\u00aeX\2\u05f4\u05f7")
        buf.write("\5V,\2\u05f5\u05f7\5\u00a6T\2\u05f6\u05b4\3\2\2\2\u05f6")
        buf.write("\u05b6\3\2\2\2\u05f6\u05cd\3\2\2\2\u05f6\u05d0\3\2\2\2")
        buf.write("\u05f6\u05da\3\2\2\2\u05f6\u05df\3\2\2\2\u05f6\u05e4\3")
        buf.write("\2\2\2\u05f6\u05f3\3\2\2\2\u05f6\u05f4\3\2\2\2\u05f6\u05f5")
        buf.write("\3\2\2\2\u05f7\u069c\3\2\2\2\u05f8\u05fa\f\32\2\2\u05f9")
        buf.write("\u05fb\7\u00bb\2\2\u05fa\u05f9\3\2\2\2\u05fa\u05fb\3\2")
        buf.write("\2\2\u05fb\u05fc\3\2\2\2\u05fc\u05fe\7\u00a8\2\2\u05fd")
        buf.write("\u05ff\7\u00bb\2\2\u05fe\u05fd\3\2\2\2\u05fe\u05ff\3\2")
        buf.write("\2\2\u05ff\u0600\3\2\2\2\u0600\u069b\5\u0090I\33\u0601")
        buf.write("\u0603\f\27\2\2\u0602\u0604\7\u00bb\2\2\u0603\u0602\3")
        buf.write("\2\2\2\u0603\u0604\3\2\2\2\u0604\u0605\3\2\2\2\u0605\u0607")
        buf.write("\7\u0096\2\2\u0606\u0608\7\u00bb\2\2\u0607\u0606\3\2\2")
        buf.write("\2\u0607\u0608\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u069b")
        buf.write("\5\u0090I\30\u060a\u060c\f\26\2\2\u060b\u060d\7\u00bb")
        buf.write("\2\2\u060c\u060b\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u060e")
        buf.write("\3\2\2\2\u060e\u0610\7\u00a3\2\2\u060f\u0611\7\u00bb\2")
        buf.write("\2\u0610\u060f\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u0612")
        buf.write("\3\2\2\2\u0612\u069b\5\u0090I\27\u0613\u0615\f\25\2\2")
        buf.write("\u0614\u0616\7\u00bb\2\2\u0615\u0614\3\2\2\2\u0615\u0616")
        buf.write("\3\2\2\2\u0616\u0617\3\2\2\2\u0617\u0619\7P\2\2\u0618")
        buf.write("\u061a\7\u00bb\2\2\u0619\u0618\3\2\2\2\u0619\u061a\3\2")
        buf.write("\2\2\u061a\u061b\3\2\2\2\u061b\u069b\5\u0090I\26\u061c")
        buf.write("\u061e\f\24\2\2\u061d\u061f\7\u00bb\2\2\u061e\u061d\3")
        buf.write("\2\2\2\u061e\u061f\3\2\2\2\u061f\u0620\3\2\2\2\u0620\u0622")
        buf.write("\7\u00a6\2\2\u0621\u0623\7\u00bb\2\2\u0622\u0621\3\2\2")
        buf.write("\2\u0622\u0623\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u069b")
        buf.write("\5\u0090I\25\u0625\u0627\f\23\2\2\u0626\u0628\7\u00bb")
        buf.write("\2\2\u0627\u0626\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u0629")
        buf.write("\3\2\2\2\u0629\u062b\7\u00a1\2\2\u062a\u062c\7\u00bb\2")
        buf.write("\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2\2\2\u062c\u062d")
        buf.write("\3\2\2\2\u062d\u069b\5\u0090I\24\u062e\u0630\f\22\2\2")
        buf.write("\u062f\u0631\7\u00bb\2\2\u0630\u062f\3\2\2\2\u0630\u0631")
        buf.write("\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0634\7\u0091\2\2\u0633")
        buf.write("\u0635\7\u00bb\2\2\u0634\u0633\3\2\2\2\u0634\u0635\3\2")
        buf.write("\2\2\u0635\u0636\3\2\2\2\u0636\u069b\5\u0090I\23\u0637")
        buf.write("\u0639\f\21\2\2\u0638\u063a\7\u00bb\2\2\u0639\u0638\3")
        buf.write("\2\2\2\u0639\u063a\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u063d")
        buf.write("\7\u0099\2\2\u063c\u063e\7\u00bb\2\2\u063d\u063c\3\2\2")
        buf.write("\2\u063d\u063e\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u069b")
        buf.write("\5\u0090I\22\u0640\u0642\f\20\2\2\u0641\u0643\7\u00bb")
        buf.write("\2\2\u0642\u0641\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u0644")
        buf.write("\3\2\2\2\u0644\u0646\7\u00a4\2\2\u0645\u0647\7\u00bb\2")
        buf.write("\2\u0646\u0645\3\2\2\2\u0646\u0647\3\2\2\2\u0647\u0648")
        buf.write("\3\2\2\2\u0648\u069b\5\u0090I\21\u0649\u064b\f\17\2\2")
        buf.write("\u064a\u064c\7\u00bb\2\2\u064b\u064a\3\2\2\2\u064b\u064c")
        buf.write("\3\2\2\2\u064c\u064d\3\2\2\2\u064d\u064f\7\u00a0\2\2\u064e")
        buf.write("\u0650\7\u00bb\2\2\u064f\u064e\3\2\2\2\u064f\u0650\3\2")
        buf.write("\2\2\u0650\u0651\3\2\2\2\u0651\u069b\5\u0090I\20\u0652")
        buf.write("\u0654\f\16\2\2\u0653\u0655\7\u00bb\2\2\u0654\u0653\3")
        buf.write("\2\2\2\u0654\u0655\3\2\2\2\u0655\u0656\3\2\2\2\u0656\u0658")
        buf.write("\7\u009b\2\2\u0657\u0659\7\u00bb\2\2\u0658\u0657\3\2\2")
        buf.write("\2\u0658\u0659\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u069b")
        buf.write("\5\u0090I\17\u065b\u065d\f\r\2\2\u065c\u065e\7\u00bb\2")
        buf.write("\2\u065d\u065c\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u065f")
        buf.write("\3\2\2\2\u065f\u0661\7\u009d\2\2\u0660\u0662\7\u00bb\2")
        buf.write("\2\u0661\u0660\3\2\2\2\u0661\u0662\3\2\2\2\u0662\u0663")
        buf.write("\3\2\2\2\u0663\u069b\5\u0090I\16\u0664\u0666\f\f\2\2\u0665")
        buf.write("\u0667\7\u00bb\2\2\u0666\u0665\3\2\2\2\u0666\u0667\3\2")
        buf.write("\2\2\u0667\u0668\3\2\2\2\u0668\u066a\7\u009a\2\2\u0669")
        buf.write("\u066b\7\u00bb\2\2\u066a\u0669\3\2\2\2\u066a\u066b\3\2")
        buf.write("\2\2\u066b\u066c\3\2\2\2\u066c\u069b\5\u0090I\r\u066d")
        buf.write("\u066f\f\n\2\2\u066e\u0670\7\u00bb\2\2\u066f\u066e\3\2")
        buf.write("\2\2\u066f\u0670\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u0673")
        buf.write("\7\7\2\2\u0672\u0674\7\u00bb\2\2\u0673\u0672\3\2\2\2\u0673")
        buf.write("\u0674\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u069b\5\u0090")
        buf.write("I\13\u0676\u0678\f\t\2\2\u0677\u0679\7\u00bb\2\2\u0678")
        buf.write("\u0677\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067a\3\2\2\2")
        buf.write("\u067a\u067c\7c\2\2\u067b\u067d\7\u00bb\2\2\u067c\u067b")
        buf.write("\3\2\2\2\u067c\u067d\3\2\2\2\u067d\u067e\3\2\2\2\u067e")
        buf.write("\u069b\5\u0090I\n\u067f\u0681\f\b\2\2\u0680\u0682\7\u00bb")
        buf.write("\2\2\u0681\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0683")
        buf.write("\3\2\2\2\u0683\u0685\7\u0090\2\2\u0684\u0686\7\u00bb\2")
        buf.write("\2\u0685\u0684\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u0687")
        buf.write("\3\2\2\2\u0687\u069b\5\u0090I\t\u0688\u068a\f\7\2\2\u0689")
        buf.write("\u068b\7\u00bb\2\2\u068a\u0689\3\2\2\2\u068a\u068b\3\2")
        buf.write("\2\2\u068b\u068c\3\2\2\2\u068c\u068e\7\62\2\2\u068d\u068f")
        buf.write("\7\u00bb\2\2\u068e\u068d\3\2\2\2\u068e\u068f\3\2\2\2\u068f")
        buf.write("\u0690\3\2\2\2\u0690\u069b\5\u0090I\b\u0691\u0693\f\6")
        buf.write("\2\2\u0692\u0694\7\u00bb\2\2\u0693\u0692\3\2\2\2\u0693")
        buf.write("\u0694\3\2\2\2\u0694\u0695\3\2\2\2\u0695\u0697\7?\2\2")
        buf.write("\u0696\u0698\7\u00bb\2\2\u0697\u0696\3\2\2\2\u0697\u0698")
        buf.write("\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u069b\5\u0090I\7\u069a")
        buf.write("\u05f8\3\2\2\2\u069a\u0601\3\2\2\2\u069a\u060a\3\2\2\2")
        buf.write("\u069a\u0613\3\2\2\2\u069a\u061c\3\2\2\2\u069a\u0625\3")
        buf.write("\2\2\2\u069a\u062e\3\2\2\2\u069a\u0637\3\2\2\2\u069a\u0640")
        buf.write("\3\2\2\2\u069a\u0649\3\2\2\2\u069a\u0652\3\2\2\2\u069a")
        buf.write("\u065b\3\2\2\2\u069a\u0664\3\2\2\2\u069a\u066d\3\2\2\2")
        buf.write("\u069a\u0676\3\2\2\2\u069a\u067f\3\2\2\2\u069a\u0688\3")
        buf.write("\2\2\2\u069a\u0691\3\2\2\2\u069b\u069e\3\2\2\2\u069c\u069a")
        buf.write("\3\2\2\2\u069c\u069d\3\2\2\2\u069d\u0091\3\2\2\2\u069e")
        buf.write("\u069c\3\2\2\2\u069f\u06a3\7$\2\2\u06a0\u06a3\7{\2\2\u06a1")
        buf.write("\u06a3\5\u00e6t\2\u06a2\u069f\3\2\2\2\u06a2\u06a0\3\2")
        buf.write("\2\2\u06a2\u06a1\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5")
        buf.write("\7\u00bb\2\2\u06a5\u06a6\5\u0094K\2\u06a6\u0093\3\2\2")
        buf.write("\2\u06a7\u06b2\5\u0096L\2\u06a8\u06aa\7\u00bb\2\2\u06a9")
        buf.write("\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ab\3\2\2\2")
        buf.write("\u06ab\u06ad\7\u0095\2\2\u06ac\u06ae\7\u00bb\2\2\u06ad")
        buf.write("\u06ac\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06af\3\2\2\2")
        buf.write("\u06af\u06b1\5\u0096L\2\u06b0\u06a9\3\2\2\2\u06b1\u06b4")
        buf.write("\3\2\2\2\u06b2\u06b0\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3")
        buf.write("\u0095\3\2\2\2\u06b4\u06b2\3\2\2\2\u06b5\u06b7\5\u00ca")
        buf.write("f\2\u06b6\u06b8\5\u00e4s\2\u06b7\u06b6\3\2\2\2\u06b7\u06b8")
        buf.write("\3\2\2\2\u06b8\u06ca\3\2\2\2\u06b9\u06bb\7\u00bb\2\2\u06ba")
        buf.write("\u06b9\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc\3\2\2\2")
        buf.write("\u06bc\u06be\7\u009f\2\2\u06bd\u06bf\7\u00bb\2\2\u06be")
        buf.write("\u06bd\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c4\3\2\2\2")
        buf.write("\u06c0\u06c2\5\u00c6d\2\u06c1\u06c3\7\u00bb\2\2\u06c2")
        buf.write("\u06c1\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c5\3\2\2\2")
        buf.write("\u06c4\u06c0\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c6\3")
        buf.write("\2\2\2\u06c6\u06c8\7\u00aa\2\2\u06c7\u06c9\7\u00bb\2\2")
        buf.write("\u06c8\u06c7\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9\u06cb\3")
        buf.write("\2\2\2\u06ca\u06ba\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06ce")
        buf.write("\3\2\2\2\u06cc\u06cd\7\u00bb\2\2\u06cd\u06cf\5\u00ccg")
        buf.write("\2\u06ce\u06cc\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf\u0097")
        buf.write("\3\2\2\2\u06d0\u06d1\7\u008c\2\2\u06d1\u06d2\7\u00bb\2")
        buf.write("\2\u06d2\u06d4\5\u0090I\2\u06d3\u06d5\7\u00b9\2\2\u06d4")
        buf.write("\u06d3\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d4\3\2\2\2")
        buf.write("\u06d6\u06d7\3\2\2\2\u06d7\u06db\3\2\2\2\u06d8\u06da\5")
        buf.write("\36\20\2\u06d9\u06d8\3\2\2\2\u06da\u06dd\3\2\2\2\u06db")
        buf.write("\u06d9\3\2\2\2\u06db\u06dc\3\2\2\2\u06dc\u06e1\3\2\2\2")
        buf.write("\u06dd\u06db\3\2\2\2\u06de\u06e0\7\u00b9\2\2\u06df\u06de")
        buf.write("\3\2\2\2\u06e0\u06e3\3\2\2\2\u06e1\u06df\3\2\2\2\u06e1")
        buf.write("\u06e2\3\2\2\2\u06e2\u06e4\3\2\2\2\u06e3\u06e1\3\2\2\2")
        buf.write("\u06e4\u06e5\7\u008b\2\2\u06e5\u0099\3\2\2\2\u06e6\u06e7")
        buf.write("\7\u008d\2\2\u06e7\u06e8\7\u00bb\2\2\u06e8\u06ea\5\u0090")
        buf.write("I\2\u06e9\u06eb\7\u00bb\2\2\u06ea\u06e9\3\2\2\2\u06ea")
        buf.write("\u06eb\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ee\7\u0095")
        buf.write("\2\2\u06ed\u06ef\7\u00bb\2\2\u06ee\u06ed\3\2\2\2\u06ee")
        buf.write("\u06ef\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f1\5\u0090")
        buf.write("I\2\u06f1\u009b\3\2\2\2\u06f2\u06f3\7\u008e\2\2\u06f3")
        buf.write("\u06f6\7\u00bb\2\2\u06f4\u06f5\7S\2\2\u06f5\u06f7\7\u00bb")
        buf.write("\2\2\u06f6\u06f4\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u06f8")
        buf.write("\3\2\2\2\u06f8\u06fa\5\u00aeX\2\u06f9\u06fb\7\u00b9\2")
        buf.write("\2\u06fa\u06f9\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u06fa")
        buf.write("\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fd\u0704\3\2\2\2\u06fe")
        buf.write("\u0700\5\36\20\2\u06ff\u0701\7\u00b9\2\2\u0700\u06ff\3")
        buf.write("\2\2\2\u0701\u0702\3\2\2\2\u0702\u0700\3\2\2\2\u0702\u0703")
        buf.write("\3\2\2\2\u0703\u0705\3\2\2\2\u0704\u06fe\3\2\2\2\u0704")
        buf.write("\u0705\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u0707\7\60\2")
        buf.write("\2\u0707\u009d\3\2\2\2\u0708\u0709\7\u008f\2\2\u0709\u070a")
        buf.write("\7\u00bb\2\2\u070a\u070c\5\u0090I\2\u070b\u070d\7\u00bb")
        buf.write("\2\2\u070c\u070b\3\2\2\2\u070c\u070d\3\2\2\2\u070d\u070e")
        buf.write("\3\2\2\2\u070e\u0713\7\u0095\2\2\u070f\u0711\7\u00bb\2")
        buf.write("\2\u0710\u070f\3\2\2\2\u0710\u0711\3\2\2\2\u0711\u0712")
        buf.write("\3\2\2\2\u0712\u0714\5b\62\2\u0713\u0710\3\2\2\2\u0713")
        buf.write("\u0714\3\2\2\2\u0714\u009f\3\2\2\2\u0715\u0718\5\u00a2")
        buf.write("R\2\u0716\u0718\5\u00a4S\2\u0717\u0715\3\2\2\2\u0717\u0716")
        buf.write("\3\2\2\2\u0718\u00a1\3\2\2\2\u0719\u071a\7\23\2\2\u071a")
        buf.write("\u071b\7\u00bb\2\2\u071b\u071d\5\u00caf\2\u071c\u071e")
        buf.write("\5\u00e4s\2\u071d\u071c\3\2\2\2\u071d\u071e\3\2\2\2\u071e")
        buf.write("\u072d\3\2\2\2\u071f\u0721\7\u00bb\2\2\u0720\u071f\3\2")
        buf.write("\2\2\u0720\u0721\3\2\2\2\u0721\u0722\3\2\2\2\u0722\u0724")
        buf.write("\7\u009f\2\2\u0723\u0725\7\u00bb\2\2\u0724\u0723\3\2\2")
        buf.write("\2\u0724\u0725\3\2\2\2\u0725\u072a\3\2\2\2\u0726\u0728")
        buf.write("\5\u00bc_\2\u0727\u0729\7\u00bb\2\2\u0728\u0727\3\2\2")
        buf.write("\2\u0728\u0729\3\2\2\2\u0729\u072b\3\2\2\2\u072a\u0726")
        buf.write("\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u072c\3\2\2\2\u072c")
        buf.write("\u072e\7\u00aa\2\2\u072d\u0720\3\2\2\2\u072d\u072e\3\2")
        buf.write("\2\2\u072e\u00a3\3\2\2\2\u072f\u0730\7\23\2\2\u0730\u0732")
        buf.write("\7\u00bb\2\2\u0731\u0733\5\u00aeX\2\u0732\u0731\3\2\2")
        buf.write("\2\u0732\u0733\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u0736")
        buf.write("\7\u0098\2\2\u0735\u0737\7\u00bb\2\2\u0736\u0735\3\2\2")
        buf.write("\2\u0736\u0737\3\2\2\2\u0737\u0738\3\2\2\2\u0738\u073a")
        buf.write("\5\u00caf\2\u0739\u073b\5\u00e4s\2\u073a\u0739\3\2\2\2")
        buf.write("\u073a\u073b\3\2\2\2\u073b\u074a\3\2\2\2\u073c\u073e\7")
        buf.write("\u00bb\2\2\u073d\u073c\3\2\2\2\u073d\u073e\3\2\2\2\u073e")
        buf.write("\u073f\3\2\2\2\u073f\u0741\7\u009f\2\2\u0740\u0742\7\u00bb")
        buf.write("\2\2\u0741\u0740\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u0747")
        buf.write("\3\2\2\2\u0743\u0745\5\u00bc_\2\u0744\u0746\7\u00bb\2")
        buf.write("\2\u0745\u0744\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u0748")
        buf.write("\3\2\2\2\u0747\u0743\3\2\2\2\u0747\u0748\3\2\2\2\u0748")
        buf.write("\u0749\3\2\2\2\u0749\u074b\7\u00aa\2\2\u074a\u073d\3\2")
        buf.write("\2\2\u074a\u074b\3\2\2\2\u074b\u00a5\3\2\2\2\u074c\u074e")
        buf.write("\7M\2\2\u074d\u074f\7\u00bb\2\2\u074e\u074d\3\2\2\2\u074e")
        buf.write("\u074f\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0752\7\u009f")
        buf.write("\2\2\u0751\u0753\7\u00bb\2\2\u0752\u0751\3\2\2\2\u0752")
        buf.write("\u0753\3\2\2\2\u0753\u0754\3\2\2\2\u0754\u0756\5\u00bc")
        buf.write("_\2\u0755\u0757\7\u00bb\2\2\u0756\u0755\3\2\2\2\u0756")
        buf.write("\u0757\3\2\2\2\u0757\u0758\3\2\2\2\u0758\u0759\7\u00aa")
        buf.write("\2\2\u0759\u075e\3\2\2\2\u075a\u075b\7M\2\2\u075b\u075c")
        buf.write("\7\u00bb\2\2\u075c\u075e\5\u00bc_\2\u075d\u074c\3\2\2")
        buf.write("\2\u075d\u075a\3\2\2\2\u075e\u00a7\3\2\2\2\u075f\u0762")
        buf.write("\5\u00aaV\2\u0760\u0762\5\u00acW\2\u0761\u075f\3\2\2\2")
        buf.write("\u0761\u0760\3\2\2\2\u0762\u00a9\3\2\2\2\u0763\u0772\5")
        buf.write("\u00d0i\2\u0764\u0766\7\u00bb\2\2\u0765\u0764\3\2\2\2")
        buf.write("\u0765\u0766\3\2\2\2\u0766\u0767\3\2\2\2\u0767\u0769\7")
        buf.write("\u009f\2\2\u0768\u076a\7\u00bb\2\2\u0769\u0768\3\2\2\2")
        buf.write("\u0769\u076a\3\2\2\2\u076a\u076f\3\2\2\2\u076b\u076d\5")
        buf.write("\u00bc_\2\u076c\u076e\7\u00bb\2\2\u076d\u076c\3\2\2\2")
        buf.write("\u076d\u076e\3\2\2\2\u076e\u0770\3\2\2\2\u076f\u076b\3")
        buf.write("\2\2\2\u076f\u0770\3\2\2\2\u0770\u0771\3\2\2\2\u0771\u0773")
        buf.write("\7\u00aa\2\2\u0772\u0765\3\2\2\2\u0772\u0773\3\2\2\2\u0773")
        buf.write("\u077f\3\2\2\2\u0774\u0776\5\u00d0i\2\u0775\u0777\7\u00bb")
        buf.write("\2\2\u0776\u0775\3\2\2\2\u0776\u0777\3\2\2\2\u0777\u077c")
        buf.write("\3\2\2\2\u0778\u077a\5\u00bc_\2\u0779\u077b\7\u00bb\2")
        buf.write("\2\u077a\u0779\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077d")
        buf.write("\3\2\2\2\u077c\u0778\3\2\2\2\u077c\u077d\3\2\2\2\u077d")
        buf.write("\u077f\3\2\2\2\u077e\u0763\3\2\2\2\u077e\u0774\3\2\2\2")
        buf.write("\u077f\u00ab\3\2\2\2\u0780\u0782\5\u00aeX\2\u0781\u0780")
        buf.write("\3\2\2\2\u0781\u0782\3\2\2\2\u0782\u0783\3\2\2\2\u0783")
        buf.write("\u0784\7\u0098\2\2\u0784\u0786\5\u00caf\2\u0785\u0787")
        buf.write("\5\u00e4s\2\u0786\u0785\3\2\2\2\u0786\u0787\3\2\2\2\u0787")
        buf.write("\u0796\3\2\2\2\u0788\u078a\7\u00bb\2\2\u0789\u0788\3\2")
        buf.write("\2\2\u0789\u078a\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078d")
        buf.write("\7\u009f\2\2\u078c\u078e\7\u00bb\2\2\u078d\u078c\3\2\2")
        buf.write("\2\u078d\u078e\3\2\2\2\u078e\u0793\3\2\2\2\u078f\u0791")
        buf.write("\5\u00bc_\2\u0790\u0792\7\u00bb\2\2\u0791\u0790\3\2\2")
        buf.write("\2\u0791\u0792\3\2\2\2\u0792\u0794\3\2\2\2\u0793\u078f")
        buf.write("\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u0795\3\2\2\2\u0795")
        buf.write("\u0797\7\u00aa\2\2\u0796\u0789\3\2\2\2\u0796\u0797\3\2")
        buf.write("\2\2\u0797\u07aa\3\2\2\2\u0798\u079a\5\u00aeX\2\u0799")
        buf.write("\u0798\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079b\3\2\2\2")
        buf.write("\u079b\u079c\7\u0098\2\2\u079c\u079e\5\u00caf\2\u079d")
        buf.write("\u079f\5\u00e4s\2\u079e\u079d\3\2\2\2\u079e\u079f\3\2")
        buf.write("\2\2\u079f\u07a1\3\2\2\2\u07a0\u07a2\7\u00bb\2\2\u07a1")
        buf.write("\u07a0\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07a7\3\2\2\2")
        buf.write("\u07a3\u07a5\5\u00bc_\2\u07a4\u07a6\7\u00bb\2\2\u07a5")
        buf.write("\u07a4\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6\u07a8\3\2\2\2")
        buf.write("\u07a7\u07a3\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8\u07aa\3")
        buf.write("\2\2\2\u07a9\u0781\3\2\2\2\u07a9\u0799\3\2\2\2\u07aa\u00ad")
        buf.write("\3\2\2\2\u07ab\u07af\5\u00b8]\2\u07ac\u07af\5\u00b0Y\2")
        buf.write("\u07ad\u07af\5\u00b2Z\2\u07ae\u07ab\3\2\2\2\u07ae\u07ac")
        buf.write("\3\2\2\2\u07ae\u07ad\3\2\2\2\u07af\u00af\3\2\2\2\u07b0")
        buf.write("\u07b2\5\u00caf\2\u07b1\u07b3\5\u00e4s\2\u07b2\u07b1\3")
        buf.write("\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u00b1\3\2\2\2\u07b4\u07b5")
        buf.write("\5\u00caf\2\u07b5\u07b6\5\u00b4[\2\u07b6\u07be\3\2\2\2")
        buf.write("\u07b7\u07b8\5\u00ceh\2\u07b8\u07b9\5\u00b4[\2\u07b9\u07be")
        buf.write("\3\2\2\2\u07ba\u07bb\5\u00b6\\\2\u07bb\u07bc\5\u00b4[")
        buf.write("\2\u07bc\u07be\3\2\2\2\u07bd\u07b4\3\2\2\2\u07bd\u07b7")
        buf.write("\3\2\2\2\u07bd\u07ba\3\2\2\2\u07be\u00b3\3\2\2\2\u07bf")
        buf.write("\u07c1\5\u00e4s\2\u07c0\u07bf\3\2\2\2\u07c0\u07c1\3\2")
        buf.write("\2\2\u07c1\u07c3\3\2\2\2\u07c2\u07c4\7\u00bb\2\2\u07c3")
        buf.write("\u07c2\3\2\2\2\u07c3\u07c4\3\2\2\2\u07c4\u07d0\3\2\2\2")
        buf.write("\u07c5\u07c7\7\u009f\2\2\u07c6\u07c8\7\u00bb\2\2\u07c7")
        buf.write("\u07c6\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07cd\3\2\2\2")
        buf.write("\u07c9\u07cb\5\u00bc_\2\u07ca\u07cc\7\u00bb\2\2\u07cb")
        buf.write("\u07ca\3\2\2\2\u07cb\u07cc\3\2\2\2\u07cc\u07ce\3\2\2\2")
        buf.write("\u07cd\u07c9\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07cf\3")
        buf.write("\2\2\2\u07cf\u07d1\7\u00aa\2\2\u07d0\u07c5\3\2\2\2\u07d1")
        buf.write("\u07d2\3\2\2\2\u07d2\u07d0\3\2\2\2\u07d2\u07d3\3\2\2\2")
        buf.write("\u07d3\u00b5\3\2\2\2\u07d4\u07d6\5\u00caf\2\u07d5\u07d7")
        buf.write("\5\u00e4s\2\u07d6\u07d5\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7")
        buf.write("\u07d9\3\2\2\2\u07d8\u07da\7\u00bb\2\2\u07d9\u07d8\3\2")
        buf.write("\2\2\u07d9\u07da\3\2\2\2\u07da\u07db\3\2\2\2\u07db\u07dd")
        buf.write("\7\u009f\2\2\u07dc\u07de\7\u00bb\2\2\u07dd\u07dc\3\2\2")
        buf.write("\2\u07dd\u07de\3\2\2\2\u07de\u07e3\3\2\2\2\u07df\u07e1")
        buf.write("\5\u00bc_\2\u07e0\u07e2\7\u00bb\2\2\u07e1\u07e0\3\2\2")
        buf.write("\2\u07e1\u07e2\3\2\2\2\u07e2\u07e4\3\2\2\2\u07e3\u07df")
        buf.write("\3\2\2\2\u07e3\u07e4\3\2\2\2\u07e4\u07e5\3\2\2\2\u07e5")
        buf.write("\u07e6\7\u00aa\2\2\u07e6\u00b7\3\2\2\2\u07e7\u07ea\5\u00b0")
        buf.write("Y\2\u07e8\u07ea\5\u00b2Z\2\u07e9\u07e7\3\2\2\2\u07e9\u07e8")
        buf.write("\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07ec\3\2\2\2\u07eb")
        buf.write("\u07ed\5\u00ba^\2\u07ec\u07eb\3\2\2\2\u07ed\u07ee\3\2")
        buf.write("\2\2\u07ee\u07ec\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef\u00b9")
        buf.write("\3\2\2\2\u07f0\u07f2\7\u00bb\2\2\u07f1\u07f0\3\2\2\2\u07f1")
        buf.write("\u07f2\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f6\7\u0098")
        buf.write("\2\2\u07f4\u07f7\5\u00b0Y\2\u07f5\u07f7\5\u00b2Z\2\u07f6")
        buf.write("\u07f4\3\2\2\2\u07f6\u07f5\3\2\2\2\u07f7\u00bb\3\2\2\2")
        buf.write("\u07f8\u07fa\5\u00be`\2\u07f9\u07f8\3\2\2\2\u07f9\u07fa")
        buf.write("\3\2\2\2\u07fa\u07fc\3\2\2\2\u07fb\u07fd\7\u00bb\2\2\u07fc")
        buf.write("\u07fb\3\2\2\2\u07fc\u07fd\3\2\2\2\u07fd\u07fe\3\2\2\2")
        buf.write("\u07fe\u0800\t\13\2\2\u07ff\u0801\7\u00bb\2\2\u0800\u07ff")
        buf.write("\3\2\2\2\u0800\u0801\3\2\2\2\u0801\u0803\3\2\2\2\u0802")
        buf.write("\u07f9\3\2\2\2\u0803\u0806\3\2\2\2\u0804\u0802\3\2\2\2")
        buf.write("\u0804\u0805\3\2\2\2\u0805\u0807\3\2\2\2\u0806\u0804\3")
        buf.write("\2\2\2\u0807\u0814\5\u00be`\2\u0808\u080a\7\u00bb\2\2")
        buf.write("\u0809\u0808\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u080b\3")
        buf.write("\2\2\2\u080b\u080d\t\13\2\2\u080c\u080e\7\u00bb\2\2\u080d")
        buf.write("\u080c\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u0810\3\2\2\2")
        buf.write("\u080f\u0811\5\u00be`\2\u0810\u080f\3\2\2\2\u0810\u0811")
        buf.write("\3\2\2\2\u0811\u0813\3\2\2\2\u0812\u0809\3\2\2\2\u0813")
        buf.write("\u0816\3\2\2\2\u0814\u0812\3\2\2\2\u0814\u0815\3\2\2\2")
        buf.write("\u0815\u00bd\3\2\2\2\u0816\u0814\3\2\2\2\u0817\u0818\t")
        buf.write("\r\2\2\u0818\u081a\7\u00bb\2\2\u0819\u0817\3\2\2\2\u0819")
        buf.write("\u081a\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u081c\5\u0090")
        buf.write("I\2\u081c\u00bf\3\2\2\2\u081d\u0832\7\u009f\2\2\u081e")
        buf.write("\u0820\7\u00bb\2\2\u081f\u081e\3\2\2\2\u081f\u0820\3\2")
        buf.write("\2\2\u0820\u0821\3\2\2\2\u0821\u082f\5\u00c2b\2\u0822")
        buf.write("\u0824\7\u00bb\2\2\u0823\u0822\3\2\2\2\u0823\u0824\3\2")
        buf.write("\2\2\u0824\u0825\3\2\2\2\u0825\u0827\7\u0095\2\2\u0826")
        buf.write("\u0828\7\u00bb\2\2\u0827\u0826\3\2\2\2\u0827\u0828\3\2")
        buf.write("\2\2\u0828\u0829\3\2\2\2\u0829\u082b\5\u00c2b\2\u082a")
        buf.write("\u082c\7\u00bb\2\2\u082b\u082a\3\2\2\2\u082b\u082c\3\2")
        buf.write("\2\2\u082c\u082e\3\2\2\2\u082d\u0823\3\2\2\2\u082e\u0831")
        buf.write("\3\2\2\2\u082f\u082d\3\2\2\2\u082f\u0830\3\2\2\2\u0830")
        buf.write("\u0833\3\2\2\2\u0831\u082f\3\2\2\2\u0832\u081f\3\2\2\2")
        buf.write("\u0832\u0833\3\2\2\2\u0833\u0835\3\2\2\2\u0834\u0836\7")
        buf.write("\u00bb\2\2\u0835\u0834\3\2\2\2\u0835\u0836\3\2\2\2\u0836")
        buf.write("\u0837\3\2\2\2\u0837\u0838\7\u00aa\2\2\u0838\u00c1\3\2")
        buf.write("\2\2\u0839\u083a\7\\\2\2\u083a\u083c\7\u00bb\2\2\u083b")
        buf.write("\u0839\3\2\2\2\u083b\u083c\3\2\2\2\u083c\u083f\3\2\2\2")
        buf.write("\u083d\u083e\t\r\2\2\u083e\u0840\7\u00bb\2\2\u083f\u083d")
        buf.write("\3\2\2\2\u083f\u0840\3\2\2\2\u0840\u0843\3\2\2\2\u0841")
        buf.write("\u0842\7\\\2\2\u0842\u0844\7\u00bb\2\2\u0843\u0841\3\2")
        buf.write("\2\2\u0843\u0844\3\2\2\2\u0844\u0845\3\2\2\2\u0845\u0847")
        buf.write("\5\u00caf\2\u0846\u0848\5\u00e4s\2\u0847\u0846\3\2\2\2")
        buf.write("\u0847\u0848\3\2\2\2\u0848\u0851\3\2\2\2\u0849\u084b\7")
        buf.write("\u00bb\2\2\u084a\u0849\3\2\2\2\u084a\u084b\3\2\2\2\u084b")
        buf.write("\u084c\3\2\2\2\u084c\u084e\7\u009f\2\2\u084d\u084f\7\u00bb")
        buf.write("\2\2\u084e\u084d\3\2\2\2\u084e\u084f\3\2\2\2\u084f\u0850")
        buf.write("\3\2\2\2\u0850\u0852\7\u00aa\2\2\u0851\u084a\3\2\2\2\u0851")
        buf.write("\u0852\3\2\2\2\u0852\u0855\3\2\2\2\u0853\u0854\7\u00bb")
        buf.write("\2\2\u0854\u0856\5\u00ccg\2\u0855\u0853\3\2\2\2\u0855")
        buf.write("\u0856\3\2\2\2\u0856\u085b\3\2\2\2\u0857\u0859\7\u00bb")
        buf.write("\2\2\u0858\u0857\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u085a")
        buf.write("\3\2\2\2\u085a\u085c\5\u00c4c\2\u085b\u0858\3\2\2\2\u085b")
        buf.write("\u085c\3\2\2\2\u085c\u00c3\3\2\2\2\u085d\u085f\7\u0099")
        buf.write("\2\2\u085e\u0860\7\u00bb\2\2\u085f\u085e\3\2\2\2\u085f")
        buf.write("\u0860\3\2\2\2\u0860\u0861\3\2\2\2\u0861\u0862\5\u0090")
        buf.write("I\2\u0862\u00c5\3\2\2\2\u0863\u086e\5\u00c8e\2\u0864\u0866")
        buf.write("\7\u00bb\2\2\u0865\u0864\3\2\2\2\u0865\u0866\3\2\2\2\u0866")
        buf.write("\u0867\3\2\2\2\u0867\u0869\7\u0095\2\2\u0868\u086a\7\u00bb")
        buf.write("\2\2\u0869\u0868\3\2\2\2\u0869\u086a\3\2\2\2\u086a\u086b")
        buf.write("\3\2\2\2\u086b\u086d\5\u00c8e\2\u086c\u0865\3\2\2\2\u086d")
        buf.write("\u0870\3\2\2\2\u086e\u086c\3\2\2\2\u086e\u086f\3\2\2\2")
        buf.write("\u086f\u00c7\3\2\2\2\u0870\u086e\3\2\2\2\u0871\u0872\5")
        buf.write("\u0090I\2\u0872\u0873\7\u00bb\2\2\u0873\u0874\7\u0084")
        buf.write("\2\2\u0874\u0875\7\u00bb\2\2\u0875\u0877\3\2\2\2\u0876")
        buf.write("\u0871\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u0878\3\2\2\2")
        buf.write("\u0878\u0879\5\u0090I\2\u0879\u00c9\3\2\2\2\u087a\u087d")
        buf.write("\7\u00b7\2\2\u087b\u087d\5\u00e8u\2\u087c\u087a\3\2\2")
        buf.write("\2\u087c\u087b\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u087c")
        buf.write("\3\2\2\2\u087e\u087f\3\2\2\2\u087f\u0889\3\2\2\2\u0880")
        buf.write("\u0883\7\u00ac\2\2\u0881\u0884\7\u00b7\2\2\u0882\u0884")
        buf.write("\5\u00e8u\2\u0883\u0881\3\2\2\2\u0883\u0882\3\2\2\2\u0884")
        buf.write("\u0885\3\2\2\2\u0885\u0883\3\2\2\2\u0885\u0886\3\2\2\2")
        buf.write("\u0886\u0887\3\2\2\2\u0887\u0889\7\u00ad\2\2\u0888\u087c")
        buf.write("\3\2\2\2\u0888\u0880\3\2\2\2\u0889\u00cb\3\2\2\2\u088a")
        buf.write("\u088b\7\b\2\2\u088b\u088e\7\u00bb\2\2\u088c\u088d\7S")
        buf.write("\2\2\u088d\u088f\7\u00bb\2\2\u088e\u088c\3\2\2\2\u088e")
        buf.write("\u088f\3\2\2\2\u088f\u0890\3\2\2\2\u0890\u0893\5\u00e2")
        buf.write("r\2\u0891\u0892\7\u00bb\2\2\u0892\u0894\5\u00d6l\2\u0893")
        buf.write("\u0891\3\2\2\2\u0893\u0894\3\2\2\2\u0894\u00cd\3\2\2\2")
        buf.write("\u0895\u0896\t\16\2\2\u0896\u00cf\3\2\2\2\u0897\u089c")
        buf.write("\7\u00b7\2\2\u0898\u089b\5\u00e8u\2\u0899\u089b\7\u00b7")
        buf.write("\2\2\u089a\u0898\3\2\2\2\u089a\u0899\3\2\2\2\u089b\u089e")
        buf.write("\3\2\2\2\u089c\u089a\3\2\2\2\u089c\u089d\3\2\2\2\u089d")
        buf.write("\u08a7\3\2\2\2\u089e\u089c\3\2\2\2\u089f\u08a2\5\u00e8")
        buf.write("u\2\u08a0\u08a3\5\u00e8u\2\u08a1\u08a3\7\u00b7\2\2\u08a2")
        buf.write("\u08a0\3\2\2\2\u08a2\u08a1\3\2\2\2\u08a3\u08a4\3\2\2\2")
        buf.write("\u08a4\u08a2\3\2\2\2\u08a4\u08a5\3\2\2\2\u08a5\u08a7\3")
        buf.write("\2\2\2\u08a6\u0897\3\2\2\2\u08a6\u089f\3\2\2\2\u08a7\u00d1")
        buf.write("\3\2\2\2\u08a8\u08a9\t\17\2\2\u08a9\u00d3\3\2\2\2\u08aa")
        buf.write("\u08af\5\u00caf\2\u08ab\u08ac\7\u0098\2\2\u08ac\u08ae")
        buf.write("\5\u00caf\2\u08ad\u08ab\3\2\2\2\u08ae\u08b1\3\2\2\2\u08af")
        buf.write("\u08ad\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u00d5\3\2\2\2")
        buf.write("\u08b1\u08af\3\2\2\2\u08b2\u08b4\7\u00a3\2\2\u08b3\u08b5")
        buf.write("\7\u00bb\2\2\u08b4\u08b3\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5")
        buf.write("\u08b8\3\2\2\2\u08b6\u08b9\7\u00b1\2\2\u08b7\u08b9\5\u00ca")
        buf.write("f\2\u08b8\u08b6\3\2\2\2\u08b8\u08b7\3\2\2\2\u08b9\u00d7")
        buf.write("\3\2\2\2\u08ba\u08c3\5\u00d0i\2\u08bb\u08bd\7\u00bb\2")
        buf.write("\2\u08bc\u08bb\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd\u08be")
        buf.write("\3\2\2\2\u08be\u08c0\7\u00a1\2\2\u08bf\u08c1\7\u00bb\2")
        buf.write("\2\u08c0\u08bf\3\2\2\2\u08c0\u08c1\3\2\2\2\u08c1\u08c2")
        buf.write("\3\2\2\2\u08c2\u08c4\5\u00d0i\2\u08c3\u08bc\3\2\2\2\u08c3")
        buf.write("\u08c4\3\2\2\2\u08c4\u00d9\3\2\2\2\u08c5\u08c6\5\u00ca")
        buf.write("f\2\u08c6\u08c7\7\u0094\2\2\u08c7\u00db\3\2\2\2\u08c8")
        buf.write("\u08dd\7\u00b0\2\2\u08c9\u08dd\7\u00af\2\2\u08ca\u08cc")
        buf.write("\t\20\2\2\u08cb\u08ca\3\2\2\2\u08cb\u08cc\3\2\2\2\u08cc")
        buf.write("\u08cd\3\2\2\2\u08cd\u08dd\7\u00b2\2\2\u08ce\u08dd\7\u00b3")
        buf.write("\2\2\u08cf\u08d1\t\20\2\2\u08d0\u08cf\3\2\2\2\u08d0\u08d1")
        buf.write("\3\2\2\2\u08d1\u08d2\3\2\2\2\u08d2\u08dd\7\u00b1\2\2\u08d3")
        buf.write("\u08d5\t\20\2\2\u08d4\u08d3\3\2\2\2\u08d4\u08d5\3\2\2")
        buf.write("\2\u08d5\u08d6\3\2\2\2\u08d6\u08dd\7\u00b4\2\2\u08d7\u08dd")
        buf.write("\7\u00ae\2\2\u08d8\u08dd\7\u0085\2\2\u08d9\u08dd\78\2")
        buf.write("\2\u08da\u08dd\7U\2\2\u08db\u08dd\7V\2\2\u08dc\u08c8\3")
        buf.write("\2\2\2\u08dc\u08c9\3\2\2\2\u08dc\u08cb\3\2\2\2\u08dc\u08ce")
        buf.write("\3\2\2\2\u08dc\u08d0\3\2\2\2\u08dc\u08d4\3\2\2\2\u08dc")
        buf.write("\u08d7\3\2\2\2\u08dc\u08d8\3\2\2\2\u08dc\u08d9\3\2\2\2")
        buf.write("\u08dc\u08da\3\2\2\2\u08dc\u08db\3\2\2\2\u08dd\u00dd\3")
        buf.write("\2\2\2\u08de\u08df\t\21\2\2\u08df\u00df\3\2\2\2\u08e0")
        buf.write("\u08e1\t\22\2\2\u08e1\u00e1\3\2\2\2\u08e2\u08e5\5\u00ce")
        buf.write("h\2\u08e3\u08e5\5\u00d4k\2\u08e4\u08e2\3\2\2\2\u08e4\u08e3")
        buf.write("\3\2\2\2\u08e5\u08ee\3\2\2\2\u08e6\u08e8\7\u00bb\2\2\u08e7")
        buf.write("\u08e6\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u08e9\3\2\2\2")
        buf.write("\u08e9\u08eb\7\u009f\2\2\u08ea\u08ec\7\u00bb\2\2\u08eb")
        buf.write("\u08ea\3\2\2\2\u08eb\u08ec\3\2\2\2\u08ec\u08ed\3\2\2\2")
        buf.write("\u08ed\u08ef\7\u00aa\2\2\u08ee\u08e7\3\2\2\2\u08ee\u08ef")
        buf.write("\3\2\2\2\u08ef\u00e3\3\2\2\2\u08f0\u08f1\t\23\2\2\u08f1")
        buf.write("\u00e5\3\2\2\2\u08f2\u08f3\t\22\2\2\u08f3\u00e7\3\2\2")
        buf.write("\2\u08f4\u08f5\t\24\2\2\u08f5\u00e9\3\2\2\2\u01a8\u00ee")
        buf.write("\u00f3\u00fa\u00fc\u00ff\u0104\u0108\u010d\u0111\u0116")
        buf.write("\u011a\u011f\u0123\u0128\u012c\u0130\u0135\u0138\u013d")
        buf.write("\u0149\u014f\u0154\u015a\u015e\u0162\u016b\u016f\u017b")
        buf.write("\u0181\u0186\u0191\u0199\u019c\u01a1\u01a6\u01aa\u01af")
        buf.write("\u01df\u01ef\u01f3\u01f8\u01fb\u0200\u0206\u020a\u020f")
        buf.write("\u0214\u0218\u021b\u021f\u0225\u0229\u0231\u0235\u023a")
        buf.write("\u0241\u0247\u0249\u0254\u025a\u025c\u0264\u026a\u0272")
        buf.write("\u0280\u0284\u028e\u0297\u029d\u029f\u02a4\u02aa\u02ae")
        buf.write("\u02b1\u02b5\u02c0\u02c5\u02cb\u02cd\u02d3\u02d5\u02da")
        buf.write("\u02de\u02e4\u02e7\u02eb\u02f0\u02f6\u02f8\u030b\u0311")
        buf.write("\u0315\u0319\u0321\u0326\u032c\u032e\u0338\u033d\u0343")
        buf.write("\u0345\u0349\u034e\u0354\u0356\u035c\u0360\u0365\u0369")
        buf.write("\u036d\u0371\u0379\u037d\u0383\u0387\u038b\u03a1\u03a6")
        buf.write("\u03b0\u03b4\u03b9\u03c7\u03cb\u03d4\u03d8\u03db\u03df")
        buf.write("\u03e3\u03e6\u03ea\u03ee\u03f1\u03f5\u03f8\u03fc\u03fe")
        buf.write("\u0402\u0406\u040a\u040e\u0411\u0417\u041b\u041e\u0420")
        buf.write("\u0424\u0428\u042c\u0430\u0433\u0436\u043a\u043f\u0443")
        buf.write("\u0449\u044c\u044f\u0453\u0458\u045e\u0460\u0467\u046b")
        buf.write("\u0471\u0474\u0479\u047f\u0481\u0488\u048c\u0492\u0495")
        buf.write("\u049a\u04a0\u04a2\u04aa\u04ae\u04b1\u04b4\u04b8\u04bf")
        buf.write("\u04c5\u04c9\u04cd\u04d2\u04d7\u04db\u04df\u04e4\u04ec")
        buf.write("\u04ee\u04fc\u0501\u0505\u050d\u0510\u0515\u051b\u051d")
        buf.write("\u0520\u0526\u0528\u052e\u0530\u0535\u0539\u053e\u0541")
        buf.write("\u054a\u0550\u0554\u055d\u0561\u0567\u056a\u056f\u0575")
        buf.write("\u0577\u057d\u0581\u0588\u0590\u0595\u059c\u05a0\u05a3")
        buf.write("\u05a6\u05a9\u05ad\u05b2\u05b8\u05bc\u05c0\u05c5\u05c9")
        buf.write("\u05d2\u05d6\u05dc\u05e1\u05e9\u05ed\u05f1\u05f6\u05fa")
        buf.write("\u05fe\u0603\u0607\u060c\u0610\u0615\u0619\u061e\u0622")
        buf.write("\u0627\u062b\u0630\u0634\u0639\u063d\u0642\u0646\u064b")
        buf.write("\u064f\u0654\u0658\u065d\u0661\u0666\u066a\u066f\u0673")
        buf.write("\u0678\u067c\u0681\u0685\u068a\u068e\u0693\u0697\u069a")
        buf.write("\u069c\u06a2\u06a9\u06ad\u06b2\u06b7\u06ba\u06be\u06c2")
        buf.write("\u06c4\u06c8\u06ca\u06ce\u06d6\u06db\u06e1\u06ea\u06ee")
        buf.write("\u06f6\u06fc\u0702\u0704\u070c\u0710\u0713\u0717\u071d")
        buf.write("\u0720\u0724\u0728\u072a\u072d\u0732\u0736\u073a\u073d")
        buf.write("\u0741\u0745\u0747\u074a\u074e\u0752\u0756\u075d\u0761")
        buf.write("\u0765\u0769\u076d\u076f\u0772\u0776\u077a\u077c\u077e")
        buf.write("\u0781\u0786\u0789\u078d\u0791\u0793\u0796\u0799\u079e")
        buf.write("\u07a1\u07a5\u07a7\u07a9\u07ae\u07b2\u07bd\u07c0\u07c3")
        buf.write("\u07c7\u07cb\u07cd\u07d2\u07d6\u07d9\u07dd\u07e1\u07e3")
        buf.write("\u07e9\u07ee\u07f1\u07f6\u07f9\u07fc\u0800\u0804\u0809")
        buf.write("\u080d\u0810\u0814\u0819\u081f\u0823\u0827\u082b\u082f")
        buf.write("\u0832\u0835\u083b\u083f\u0843\u0847\u084a\u084e\u0851")
        buf.write("\u0855\u0858\u085b\u085f\u0865\u0869\u086e\u0876\u087c")
        buf.write("\u087e\u0883\u0885\u0888\u088e\u0893\u089a\u089c\u08a2")
        buf.write("\u08a4\u08a6\u08af\u08b4\u08b8\u08bc\u08c0\u08c3\u08cb")
        buf.write("\u08d0\u08d4\u08dc\u08e4\u08e7\u08eb\u08ee")
        return buf.getvalue()


class OOBasicParser ( Parser ):

    grammarFileName = "OOBasic.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'&'", "':='", 
                     "'@'", "':'", "','", "<INVALID>", "'$'", "'.'", "'='", 
                     "'>='", "'>'", "'#'", "'<='", "'{'", "'('", "'<'", 
                     "'-'", "'-='", "'*'", "'<>'", "'%'", "'+'", "'+='", 
                     "'^'", "'}'", "')'", "';'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "ACCESS", "ADDNUMERIC", "APPEND", "ALIAS", 
                      "AND", "AS", "BEEP", "BEGIN", "BINARY", "BOOLEAN", 
                      "BYVAL", "BYREF", "BYTE", "CASE", "CHDIR", "CHDRIVE", 
                      "CALL", "CLASS", "CLOSE", "CONST", "DATE", "DEFBOOL", 
                      "DEFBYTE", "DEFDATE", "DEFDBL", "DEFDEC", "DEFCUR", 
                      "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", 
                      "DEFVAR", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", 
                      "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", 
                      "END_SUB", "END_TYPE", "END_WITH", "END", "EQV", "ERROR", 
                      "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_SUB", 
                      "FALSE", "FILECOPY", "FOR", "FUNCTION", "GLOBAL", 
                      "GOTO", "IF", "IMP", "IN", "INPUT", "INTEGER", "LOCK", 
                      "LONG", "LOOP", "LEN", "LET", "LINE_INPUT", "LOCK_READ", 
                      "LOCK_WRITE", "LOCK_READ_WRITE", "ME", "MSGBOX", "MID", 
                      "MKDIR", "MOD", "NAME", "NEXT", "NEW", "NOT", "NOTHING", 
                      "NULL", "OBJECT", "ON", "ON_ERROR", "ON_LOCAL_ERROR", 
                      "OPEN", "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", 
                      "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OPTION_COMPATIBLE", 
                      "OPTION_CLASSMODULE", "OR", "OUTPUT", "PRESERVE", 
                      "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
                      "PROPERTY_SET", "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", 
                      "READ", "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", 
                      "RETURN", "RMDIR", "SELECT", "SHARED", "SET", "SPC", 
                      "STATIC", "STEP", "STOP", "STRING", "SUB", "TAB", 
                      "TEXT", "THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", 
                      "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", 
                      "WITH", "WRITE", "XOR", "AMPERSAND", "ASSIGN", "AT", 
                      "COLON", "COMMA", "DIV", "DOLLAR", "DOT", "EQ", "GEQ", 
                      "GT", "HASH", "LEQ", "LBRACE", "LPAREN", "LT", "MINUS", 
                      "MINUS_EQ", "MULT", "NEQ", "PERCENT", "PLUS", "PLUS_EQ", 
                      "POW", "RBRACE", "RPAREN", "SEMICOLON", "L_SQUARE_BRACKET", 
                      "R_SQUARE_BRACKET", "STRINGLITERAL", "DATELITERAL", 
                      "COLORLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", 
                      "FILENUMBER", "OCTALLITERAL", "FRX_OFFSET", "GUID", 
                      "IDENTIFIER", "LINE_CONTINUATION", "NEWLINE", "COMMENT", 
                      "WS" ]

    RULE_startRule = 0
    RULE_module = 1
    RULE_moduleReferences = 2
    RULE_moduleReference = 3
    RULE_moduleReferenceValue = 4
    RULE_moduleReferenceComponent = 5
    RULE_moduleHeader = 6
    RULE_moduleConfig = 7
    RULE_moduleConfigElement = 8
    RULE_moduleOptions = 9
    RULE_moduleOption = 10
    RULE_moduleBody = 11
    RULE_moduleBodyElement = 12
    RULE_moduleBlock = 13
    RULE_block = 14
    RULE_blockLine = 15
    RULE_blockStmt = 16
    RULE_beepStmt = 17
    RULE_chDirStmt = 18
    RULE_chDriveStmt = 19
    RULE_closeStmt = 20
    RULE_constStmt = 21
    RULE_constSubStmt = 22
    RULE_dateStmt = 23
    RULE_deftypeStmt = 24
    RULE_doLoopStmt = 25
    RULE_endStmt = 26
    RULE_errorStmt = 27
    RULE_exitStmt = 28
    RULE_filecopyStmt = 29
    RULE_forEachStmt = 30
    RULE_forNextStmt = 31
    RULE_functionStmt = 32
    RULE_goToStmt = 33
    RULE_ifThenElseStmt = 34
    RULE_ifBlockStmt = 35
    RULE_ifConditionStmt = 36
    RULE_ifElseIfBlockStmt = 37
    RULE_ifElseBlockStmt = 38
    RULE_inputStmt = 39
    RULE_letStmt = 40
    RULE_lineInputStmt = 41
    RULE_midStmt = 42
    RULE_mkdirStmt = 43
    RULE_nameStmt = 44
    RULE_onErrorStmt = 45
    RULE_onGoToStmt = 46
    RULE_openStmt = 47
    RULE_outputList = 48
    RULE_outputList_Expression = 49
    RULE_printStmt = 50
    RULE_propertyGetStmt = 51
    RULE_propertySetStmt = 52
    RULE_propertyLetStmt = 53
    RULE_putStmt = 54
    RULE_randomizeStmt = 55
    RULE_redimStmt = 56
    RULE_redimSubStmt = 57
    RULE_resetStmt = 58
    RULE_resumeStmt = 59
    RULE_rmdirStmt = 60
    RULE_selectCaseStmt = 61
    RULE_sC_Case = 62
    RULE_sC_Cond = 63
    RULE_sC_CondExpr = 64
    RULE_setStmt = 65
    RULE_stopStmt = 66
    RULE_subStmt = 67
    RULE_timeStmt = 68
    RULE_typeStmt = 69
    RULE_typeStmt_Element = 70
    RULE_valueStmt = 71
    RULE_variableStmt = 72
    RULE_variableListStmt = 73
    RULE_variableSubStmt = 74
    RULE_whileWendStmt = 75
    RULE_widthStmt = 76
    RULE_withStmt = 77
    RULE_writeStmt = 78
    RULE_explicitCallStmt = 79
    RULE_eCS_ProcedureCall = 80
    RULE_eCS_MemberProcedureCall = 81
    RULE_msgBox = 82
    RULE_implicitCallStmt_InBlock = 83
    RULE_iCS_B_ProcedureCall = 84
    RULE_iCS_B_MemberProcedureCall = 85
    RULE_implicitCallStmt_InStmt = 86
    RULE_iCS_S_VariableOrProcedureCall = 87
    RULE_iCS_S_ProcedureOrArrayCall = 88
    RULE_helper_rule = 89
    RULE_iCS_S_NestedProcedureCall = 90
    RULE_iCS_S_MembersCall = 91
    RULE_iCS_S_MemberCall = 92
    RULE_argsCall = 93
    RULE_argCall = 94
    RULE_argList = 95
    RULE_arg = 96
    RULE_argDefaultValue = 97
    RULE_subscripts = 98
    RULE_subscript = 99
    RULE_ambiguousIdentifier = 100
    RULE_asTypeClause = 101
    RULE_baseType = 102
    RULE_certainIdentifier = 103
    RULE_comparisonOperator = 104
    RULE_complexType = 105
    RULE_fieldLength = 106
    RULE_letterrange = 107
    RULE_lineLabel = 108
    RULE_literal = 109
    RULE_publicPrivateVisibility = 110
    RULE_publicPrivateGlobalVisibility = 111
    RULE_otype = 112
    RULE_typeHint = 113
    RULE_visibility = 114
    RULE_ambiguousKeyword = 115

    ruleNames =  [ "startRule", "module", "moduleReferences", "moduleReference", 
                   "moduleReferenceValue", "moduleReferenceComponent", "moduleHeader", 
                   "moduleConfig", "moduleConfigElement", "moduleOptions", 
                   "moduleOption", "moduleBody", "moduleBodyElement", "moduleBlock", 
                   "block", "blockLine", "blockStmt", "beepStmt", "chDirStmt", 
                   "chDriveStmt", "closeStmt", "constStmt", "constSubStmt", 
                   "dateStmt", "deftypeStmt", "doLoopStmt", "endStmt", "errorStmt", 
                   "exitStmt", "filecopyStmt", "forEachStmt", "forNextStmt", 
                   "functionStmt", "goToStmt", "ifThenElseStmt", "ifBlockStmt", 
                   "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
                   "inputStmt", "letStmt", "lineInputStmt", "midStmt", "mkdirStmt", 
                   "nameStmt", "onErrorStmt", "onGoToStmt", "openStmt", 
                   "outputList", "outputList_Expression", "printStmt", "propertyGetStmt", 
                   "propertySetStmt", "propertyLetStmt", "putStmt", "randomizeStmt", 
                   "redimStmt", "redimSubStmt", "resetStmt", "resumeStmt", 
                   "rmdirStmt", "selectCaseStmt", "sC_Case", "sC_Cond", 
                   "sC_CondExpr", "setStmt", "stopStmt", "subStmt", "timeStmt", 
                   "typeStmt", "typeStmt_Element", "valueStmt", "variableStmt", 
                   "variableListStmt", "variableSubStmt", "whileWendStmt", 
                   "widthStmt", "withStmt", "writeStmt", "explicitCallStmt", 
                   "eCS_ProcedureCall", "eCS_MemberProcedureCall", "msgBox", 
                   "implicitCallStmt_InBlock", "iCS_B_ProcedureCall", "iCS_B_MemberProcedureCall", 
                   "implicitCallStmt_InStmt", "iCS_S_VariableOrProcedureCall", 
                   "iCS_S_ProcedureOrArrayCall", "helper_rule", "iCS_S_NestedProcedureCall", 
                   "iCS_S_MembersCall", "iCS_S_MemberCall", "argsCall", 
                   "argCall", "argList", "arg", "argDefaultValue", "subscripts", 
                   "subscript", "ambiguousIdentifier", "asTypeClause", "baseType", 
                   "certainIdentifier", "comparisonOperator", "complexType", 
                   "fieldLength", "letterrange", "lineLabel", "literal", 
                   "publicPrivateVisibility", "publicPrivateGlobalVisibility", 
                   "otype", "typeHint", "visibility", "ambiguousKeyword" ]

    EOF = Token.EOF
    ACCESS=1
    ADDNUMERIC=2
    APPEND=3
    ALIAS=4
    AND=5
    AS=6
    BEEP=7
    BEGIN=8
    BINARY=9
    BOOLEAN=10
    BYVAL=11
    BYREF=12
    BYTE=13
    CASE=14
    CHDIR=15
    CHDRIVE=16
    CALL=17
    CLASS=18
    CLOSE=19
    CONST=20
    DATE=21
    DEFBOOL=22
    DEFBYTE=23
    DEFDATE=24
    DEFDBL=25
    DEFDEC=26
    DEFCUR=27
    DEFINT=28
    DEFLNG=29
    DEFOBJ=30
    DEFSNG=31
    DEFSTR=32
    DEFVAR=33
    DIM=34
    DO=35
    DOUBLE=36
    EACH=37
    ELSE=38
    ELSEIF=39
    END_FUNCTION=40
    END_IF=41
    END_PROPERTY=42
    END_SELECT=43
    END_SUB=44
    END_TYPE=45
    END_WITH=46
    END=47
    EQV=48
    ERROR=49
    EXIT_DO=50
    EXIT_FOR=51
    EXIT_FUNCTION=52
    EXIT_SUB=53
    FALSE=54
    FILECOPY=55
    FOR=56
    FUNCTION=57
    GLOBAL=58
    GOTO=59
    IF=60
    IMP=61
    IN=62
    INPUT=63
    INTEGER=64
    LOCK=65
    LONG=66
    LOOP=67
    LEN=68
    LET=69
    LINE_INPUT=70
    LOCK_READ=71
    LOCK_WRITE=72
    LOCK_READ_WRITE=73
    ME=74
    MSGBOX=75
    MID=76
    MKDIR=77
    MOD=78
    NAME=79
    NEXT=80
    NEW=81
    NOT=82
    NOTHING=83
    NULL=84
    OBJECT=85
    ON=86
    ON_ERROR=87
    ON_LOCAL_ERROR=88
    OPEN=89
    OPTIONAL=90
    OPTION_BASE=91
    OPTION_EXPLICIT=92
    OPTION_COMPARE=93
    OPTION_PRIVATE_MODULE=94
    OPTION_COMPATIBLE=95
    OPTION_CLASSMODULE=96
    OR=97
    OUTPUT=98
    PRESERVE=99
    PRINT=100
    PRIVATE=101
    PROPERTY_GET=102
    PROPERTY_LET=103
    PROPERTY_SET=104
    PUBLIC=105
    PUT=106
    RANDOM=107
    RANDOMIZE=108
    READ=109
    READ_WRITE=110
    REDIM=111
    REM=112
    RESET=113
    RESUME=114
    RETURN=115
    RMDIR=116
    SELECT=117
    SHARED=118
    SET=119
    SPC=120
    STATIC=121
    STEP=122
    STOP=123
    STRING=124
    SUB=125
    TAB=126
    TEXT=127
    THEN=128
    TIME=129
    TO=130
    TRUE=131
    TYPE=132
    TYPEOF=133
    UNTIL=134
    VARIANT=135
    VERSION=136
    WEND=137
    WHILE=138
    WIDTH=139
    WITH=140
    WRITE=141
    XOR=142
    AMPERSAND=143
    ASSIGN=144
    AT=145
    COLON=146
    COMMA=147
    DIV=148
    DOLLAR=149
    DOT=150
    EQ=151
    GEQ=152
    GT=153
    HASH=154
    LEQ=155
    LBRACE=156
    LPAREN=157
    LT=158
    MINUS=159
    MINUS_EQ=160
    MULT=161
    NEQ=162
    PERCENT=163
    PLUS=164
    PLUS_EQ=165
    POW=166
    RBRACE=167
    RPAREN=168
    SEMICOLON=169
    L_SQUARE_BRACKET=170
    R_SQUARE_BRACKET=171
    STRINGLITERAL=172
    DATELITERAL=173
    COLORLITERAL=174
    INTEGERLITERAL=175
    DOUBLELITERAL=176
    FILENUMBER=177
    OCTALLITERAL=178
    FRX_OFFSET=179
    GUID=180
    IDENTIFIER=181
    LINE_CONTINUATION=182
    NEWLINE=183
    COMMENT=184
    WS=185

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(OOBasicParser.ModuleContext,0)


        def EOF(self):
            return self.getToken(OOBasicParser.EOF, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)




    def startRule(self):

        localctx = OOBasicParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.module()
            self.state = 233
            self.match(OOBasicParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def moduleHeader(self):
            return self.getTypedRuleContext(OOBasicParser.ModuleHeaderContext,0)


        def moduleReferences(self):
            return self.getTypedRuleContext(OOBasicParser.ModuleReferencesContext,0)


        def moduleConfig(self):
            return self.getTypedRuleContext(OOBasicParser.ModuleConfigContext,0)


        def moduleOptions(self):
            return self.getTypedRuleContext(OOBasicParser.ModuleOptionsContext,0)


        def moduleBody(self):
            return self.getTypedRuleContext(OOBasicParser.ModuleBodyContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = OOBasicParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 235
                self.match(OOBasicParser.WS)


            self.state = 241
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 238
                    self.match(OOBasicParser.NEWLINE) 
                self.state = 243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 244
                self.moduleHeader()
                self.state = 246 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 245
                        self.match(OOBasicParser.NEWLINE)

                    else:
                        raise NoViableAltException(self)
                    self.state = 248 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)



            self.state = 253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 252
                self.moduleReferences()


            self.state = 258
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 255
                    self.match(OOBasicParser.NEWLINE) 
                self.state = 260
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 261
                self.moduleConfig()


            self.state = 267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 264
                    self.match(OOBasicParser.NEWLINE) 
                self.state = 269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 270
                self.moduleOptions()


            self.state = 276
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 273
                    self.match(OOBasicParser.NEWLINE) 
                self.state = 278
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

            self.state = 280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 279
                self.moduleBody()


            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OOBasicParser.NEWLINE:
                self.state = 282
                self.match(OOBasicParser.NEWLINE)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 288
                self.match(OOBasicParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleReferencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ModuleReferenceContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ModuleReferenceContext,i)


        def getRuleIndex(self):
            return OOBasicParser.RULE_moduleReferences

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleReferences" ):
                listener.enterModuleReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleReferences" ):
                listener.exitModuleReferences(self)




    def moduleReferences(self):

        localctx = OOBasicParser.ModuleReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_moduleReferences)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 291
                    self.moduleReference()

                else:
                    raise NoViableAltException(self)
                self.state = 294 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(OOBasicParser.OBJECT, 0)

        def EQ(self):
            return self.getToken(OOBasicParser.EQ, 0)

        def moduleReferenceValue(self):
            return self.getTypedRuleContext(OOBasicParser.ModuleReferenceValueContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def SEMICOLON(self):
            return self.getToken(OOBasicParser.SEMICOLON, 0)

        def moduleReferenceComponent(self):
            return self.getTypedRuleContext(OOBasicParser.ModuleReferenceComponentContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_moduleReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleReference" ):
                listener.enterModuleReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleReference" ):
                listener.exitModuleReference(self)




    def moduleReference(self):

        localctx = OOBasicParser.ModuleReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_moduleReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(OOBasicParser.OBJECT)
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 297
                self.match(OOBasicParser.WS)


            self.state = 300
            self.match(OOBasicParser.EQ)
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 301
                self.match(OOBasicParser.WS)


            self.state = 304
            self.moduleReferenceValue()
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.SEMICOLON:
                self.state = 305
                self.match(OOBasicParser.SEMICOLON)
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 306
                    self.match(OOBasicParser.WS)


                self.state = 309
                self.moduleReferenceComponent()


            self.state = 315
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 312
                    self.match(OOBasicParser.NEWLINE) 
                self.state = 317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleReferenceValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRINGLITERAL(self):
            return self.getToken(OOBasicParser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_moduleReferenceValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleReferenceValue" ):
                listener.enterModuleReferenceValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleReferenceValue" ):
                listener.exitModuleReferenceValue(self)




    def moduleReferenceValue(self):

        localctx = OOBasicParser.ModuleReferenceValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_moduleReferenceValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(OOBasicParser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleReferenceComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRINGLITERAL(self):
            return self.getToken(OOBasicParser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_moduleReferenceComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleReferenceComponent" ):
                listener.enterModuleReferenceComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleReferenceComponent" ):
                listener.exitModuleReferenceComponent(self)




    def moduleReferenceComponent(self):

        localctx = OOBasicParser.ModuleReferenceComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleReferenceComponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(OOBasicParser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(OOBasicParser.VERSION, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def DOUBLELITERAL(self):
            return self.getToken(OOBasicParser.DOUBLELITERAL, 0)

        def CLASS(self):
            return self.getToken(OOBasicParser.CLASS, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_moduleHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleHeader" ):
                listener.enterModuleHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleHeader" ):
                listener.exitModuleHeader(self)




    def moduleHeader(self):

        localctx = OOBasicParser.ModuleHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(OOBasicParser.VERSION)
            self.state = 323
            self.match(OOBasicParser.WS)
            self.state = 324
            self.match(OOBasicParser.DOUBLELITERAL)
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 325
                self.match(OOBasicParser.WS)
                self.state = 326
                self.match(OOBasicParser.CLASS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleConfigContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(OOBasicParser.BEGIN, 0)

        def END(self):
            return self.getToken(OOBasicParser.END, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def moduleConfigElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ModuleConfigElementContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ModuleConfigElementContext,i)


        def getRuleIndex(self):
            return OOBasicParser.RULE_moduleConfig

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConfig" ):
                listener.enterModuleConfig(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConfig" ):
                listener.exitModuleConfig(self)




    def moduleConfig(self):

        localctx = OOBasicParser.ModuleConfigContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleConfig)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.match(OOBasicParser.BEGIN)
            self.state = 331 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 330
                self.match(OOBasicParser.NEWLINE)
                self.state = 333 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 336 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 335
                    self.moduleConfigElement()

                else:
                    raise NoViableAltException(self)
                self.state = 338 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

            self.state = 340
            self.match(OOBasicParser.END)
            self.state = 342 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 341
                    self.match(OOBasicParser.NEWLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 344 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleConfigElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(OOBasicParser.EQ, 0)

        def literal(self):
            return self.getTypedRuleContext(OOBasicParser.LiteralContext,0)


        def NEWLINE(self):
            return self.getToken(OOBasicParser.NEWLINE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_moduleConfigElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConfigElement" ):
                listener.enterModuleConfigElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConfigElement" ):
                listener.exitModuleConfigElement(self)




    def moduleConfigElement(self):

        localctx = OOBasicParser.ModuleConfigElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_moduleConfigElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.ambiguousIdentifier()
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 347
                self.match(OOBasicParser.WS)


            self.state = 350
            self.match(OOBasicParser.EQ)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 351
                self.match(OOBasicParser.WS)


            self.state = 354
            self.literal()
            self.state = 355
            self.match(OOBasicParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ModuleOptionContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ModuleOptionContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_moduleOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleOptions" ):
                listener.enterModuleOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleOptions" ):
                listener.exitModuleOptions(self)




    def moduleOptions(self):

        localctx = OOBasicParser.ModuleOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_moduleOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 357
                    self.moduleOption()
                    self.state = 359 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 358
                            self.match(OOBasicParser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 361 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,25,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 365 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OOBasicParser.RULE_moduleOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OptionExplicitStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_EXPLICIT(self):
            return self.getToken(OOBasicParser.OPTION_EXPLICIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionExplicitStmt" ):
                listener.enterOptionExplicitStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionExplicitStmt" ):
                listener.exitOptionExplicitStmt(self)


    class OptionClassModuleContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_CLASSMODULE(self):
            return self.getToken(OOBasicParser.OPTION_CLASSMODULE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionClassModule" ):
                listener.enterOptionClassModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionClassModule" ):
                listener.exitOptionClassModule(self)


    class OptionCompatibleContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_COMPATIBLE(self):
            return self.getToken(OOBasicParser.OPTION_COMPATIBLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionCompatible" ):
                listener.enterOptionCompatible(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionCompatible" ):
                listener.exitOptionCompatible(self)


    class OptionBaseStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_BASE(self):
            return self.getToken(OOBasicParser.OPTION_BASE, 0)
        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)
        def INTEGERLITERAL(self):
            return self.getToken(OOBasicParser.INTEGERLITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionBaseStmt" ):
                listener.enterOptionBaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionBaseStmt" ):
                listener.exitOptionBaseStmt(self)


    class OptionPrivateModuleStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_PRIVATE_MODULE(self):
            return self.getToken(OOBasicParser.OPTION_PRIVATE_MODULE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionPrivateModuleStmt" ):
                listener.enterOptionPrivateModuleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionPrivateModuleStmt" ):
                listener.exitOptionPrivateModuleStmt(self)


    class OptionCompareStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_COMPARE(self):
            return self.getToken(OOBasicParser.OPTION_COMPARE, 0)
        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)
        def BINARY(self):
            return self.getToken(OOBasicParser.BINARY, 0)
        def TEXT(self):
            return self.getToken(OOBasicParser.TEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionCompareStmt" ):
                listener.enterOptionCompareStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionCompareStmt" ):
                listener.exitOptionCompareStmt(self)



    def moduleOption(self):

        localctx = OOBasicParser.ModuleOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_moduleOption)
        self._la = 0 # Token type
        try:
            self.state = 377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OOBasicParser.OPTION_BASE]:
                localctx = OOBasicParser.OptionBaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 367
                self.match(OOBasicParser.OPTION_BASE)
                self.state = 368
                self.match(OOBasicParser.WS)
                self.state = 369
                self.match(OOBasicParser.INTEGERLITERAL)
                pass
            elif token in [OOBasicParser.OPTION_COMPARE]:
                localctx = OOBasicParser.OptionCompareStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 370
                self.match(OOBasicParser.OPTION_COMPARE)
                self.state = 371
                self.match(OOBasicParser.WS)
                self.state = 372
                _la = self._input.LA(1)
                if not(_la==OOBasicParser.BINARY or _la==OOBasicParser.TEXT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [OOBasicParser.OPTION_EXPLICIT]:
                localctx = OOBasicParser.OptionExplicitStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 373
                self.match(OOBasicParser.OPTION_EXPLICIT)
                pass
            elif token in [OOBasicParser.OPTION_PRIVATE_MODULE]:
                localctx = OOBasicParser.OptionPrivateModuleStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 374
                self.match(OOBasicParser.OPTION_PRIVATE_MODULE)
                pass
            elif token in [OOBasicParser.OPTION_COMPATIBLE]:
                localctx = OOBasicParser.OptionCompatibleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 375
                self.match(OOBasicParser.OPTION_COMPATIBLE)
                pass
            elif token in [OOBasicParser.OPTION_CLASSMODULE]:
                localctx = OOBasicParser.OptionClassModuleContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 376
                self.match(OOBasicParser.OPTION_CLASSMODULE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ModuleBodyElementContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ModuleBodyElementContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_moduleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBody" ):
                listener.enterModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBody" ):
                listener.exitModuleBody(self)




    def moduleBody(self):

        localctx = OOBasicParser.ModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_moduleBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.moduleBodyElement()
            self.state = 388
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 381 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 380
                        self.match(OOBasicParser.NEWLINE)
                        self.state = 383 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==OOBasicParser.NEWLINE):
                            break

                    self.state = 385
                    self.moduleBodyElement() 
                self.state = 390
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleBodyElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleBlock(self):
            return self.getTypedRuleContext(OOBasicParser.ModuleBlockContext,0)


        def moduleOption(self):
            return self.getTypedRuleContext(OOBasicParser.ModuleOptionContext,0)


        def functionStmt(self):
            return self.getTypedRuleContext(OOBasicParser.FunctionStmtContext,0)


        def propertyGetStmt(self):
            return self.getTypedRuleContext(OOBasicParser.PropertyGetStmtContext,0)


        def propertySetStmt(self):
            return self.getTypedRuleContext(OOBasicParser.PropertySetStmtContext,0)


        def propertyLetStmt(self):
            return self.getTypedRuleContext(OOBasicParser.PropertyLetStmtContext,0)


        def subStmt(self):
            return self.getTypedRuleContext(OOBasicParser.SubStmtContext,0)


        def typeStmt(self):
            return self.getTypedRuleContext(OOBasicParser.TypeStmtContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_moduleBodyElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBodyElement" ):
                listener.enterModuleBodyElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBodyElement" ):
                listener.exitModuleBodyElement(self)




    def moduleBodyElement(self):

        localctx = OOBasicParser.ModuleBodyElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_moduleBodyElement)
        try:
            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.moduleBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 392
                self.moduleOption()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 393
                self.functionStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 394
                self.propertyGetStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 395
                self.propertySetStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 396
                self.propertyLetStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 397
                self.subStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 398
                self.typeStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_moduleBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBlock" ):
                listener.enterModuleBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBlock" ):
                listener.exitModuleBlock(self)




    def moduleBlock(self):

        localctx = OOBasicParser.ModuleBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_moduleBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.BlockLineContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.BlockLineContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = OOBasicParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.blockLine()
            self.state = 415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 405 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 404
                        self.match(OOBasicParser.NEWLINE)
                        self.state = 407 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==OOBasicParser.NEWLINE):
                            break

                    self.state = 410
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                    if la_ == 1:
                        self.state = 409
                        self.match(OOBasicParser.WS)


                    self.state = 412
                    self.blockLine() 
                self.state = 417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.BlockStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.BlockStmtContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COLON)
            else:
                return self.getToken(OOBasicParser.COLON, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_blockLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockLine" ):
                listener.enterBlockLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockLine" ):
                listener.exitBlockLine(self)




    def blockLine(self):

        localctx = OOBasicParser.BlockLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_blockLine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.blockStmt()
            self.state = 429
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 419
                        self.match(OOBasicParser.WS)


                    self.state = 422
                    self.match(OOBasicParser.COLON)
                    self.state = 424
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                    if la_ == 1:
                        self.state = 423
                        self.match(OOBasicParser.WS)


                    self.state = 426
                    self.blockStmt() 
                self.state = 431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def msgBox(self):
            return self.getTypedRuleContext(OOBasicParser.MsgBoxContext,0)


        def beepStmt(self):
            return self.getTypedRuleContext(OOBasicParser.BeepStmtContext,0)


        def chDirStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ChDirStmtContext,0)


        def chDriveStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ChDriveStmtContext,0)


        def closeStmt(self):
            return self.getTypedRuleContext(OOBasicParser.CloseStmtContext,0)


        def constStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ConstStmtContext,0)


        def dateStmt(self):
            return self.getTypedRuleContext(OOBasicParser.DateStmtContext,0)


        def deftypeStmt(self):
            return self.getTypedRuleContext(OOBasicParser.DeftypeStmtContext,0)


        def doLoopStmt(self):
            return self.getTypedRuleContext(OOBasicParser.DoLoopStmtContext,0)


        def endStmt(self):
            return self.getTypedRuleContext(OOBasicParser.EndStmtContext,0)


        def explicitCallStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ExplicitCallStmtContext,0)


        def errorStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ErrorStmtContext,0)


        def exitStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ExitStmtContext,0)


        def filecopyStmt(self):
            return self.getTypedRuleContext(OOBasicParser.FilecopyStmtContext,0)


        def forEachStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ForEachStmtContext,0)


        def forNextStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ForNextStmtContext,0)


        def goToStmt(self):
            return self.getTypedRuleContext(OOBasicParser.GoToStmtContext,0)


        def ifThenElseStmt(self):
            return self.getTypedRuleContext(OOBasicParser.IfThenElseStmtContext,0)


        def inputStmt(self):
            return self.getTypedRuleContext(OOBasicParser.InputStmtContext,0)


        def letStmt(self):
            return self.getTypedRuleContext(OOBasicParser.LetStmtContext,0)


        def lineInputStmt(self):
            return self.getTypedRuleContext(OOBasicParser.LineInputStmtContext,0)


        def lineLabel(self):
            return self.getTypedRuleContext(OOBasicParser.LineLabelContext,0)


        def midStmt(self):
            return self.getTypedRuleContext(OOBasicParser.MidStmtContext,0)


        def mkdirStmt(self):
            return self.getTypedRuleContext(OOBasicParser.MkdirStmtContext,0)


        def nameStmt(self):
            return self.getTypedRuleContext(OOBasicParser.NameStmtContext,0)


        def onErrorStmt(self):
            return self.getTypedRuleContext(OOBasicParser.OnErrorStmtContext,0)


        def onGoToStmt(self):
            return self.getTypedRuleContext(OOBasicParser.OnGoToStmtContext,0)


        def openStmt(self):
            return self.getTypedRuleContext(OOBasicParser.OpenStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(OOBasicParser.PrintStmtContext,0)


        def putStmt(self):
            return self.getTypedRuleContext(OOBasicParser.PutStmtContext,0)


        def randomizeStmt(self):
            return self.getTypedRuleContext(OOBasicParser.RandomizeStmtContext,0)


        def redimStmt(self):
            return self.getTypedRuleContext(OOBasicParser.RedimStmtContext,0)


        def resetStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ResetStmtContext,0)


        def resumeStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ResumeStmtContext,0)


        def rmdirStmt(self):
            return self.getTypedRuleContext(OOBasicParser.RmdirStmtContext,0)


        def selectCaseStmt(self):
            return self.getTypedRuleContext(OOBasicParser.SelectCaseStmtContext,0)


        def setStmt(self):
            return self.getTypedRuleContext(OOBasicParser.SetStmtContext,0)


        def stopStmt(self):
            return self.getTypedRuleContext(OOBasicParser.StopStmtContext,0)


        def timeStmt(self):
            return self.getTypedRuleContext(OOBasicParser.TimeStmtContext,0)


        def variableStmt(self):
            return self.getTypedRuleContext(OOBasicParser.VariableStmtContext,0)


        def whileWendStmt(self):
            return self.getTypedRuleContext(OOBasicParser.WhileWendStmtContext,0)


        def widthStmt(self):
            return self.getTypedRuleContext(OOBasicParser.WidthStmtContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(OOBasicParser.WithStmtContext,0)


        def writeStmt(self):
            return self.getTypedRuleContext(OOBasicParser.WriteStmtContext,0)


        def implicitCallStmt_InBlock(self):
            return self.getTypedRuleContext(OOBasicParser.ImplicitCallStmt_InBlockContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = OOBasicParser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_blockStmt)
        try:
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                self.msgBox()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.beepStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 434
                self.chDirStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 435
                self.chDriveStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 436
                self.closeStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 437
                self.constStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 438
                self.dateStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 439
                self.deftypeStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 440
                self.doLoopStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 441
                self.endStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 442
                self.explicitCallStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 443
                self.errorStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 444
                self.exitStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 445
                self.filecopyStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 446
                self.forEachStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 447
                self.forNextStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 448
                self.goToStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 449
                self.ifThenElseStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 450
                self.inputStmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 451
                self.letStmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 452
                self.lineInputStmt()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 453
                self.lineLabel()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 454
                self.midStmt()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 455
                self.mkdirStmt()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 456
                self.nameStmt()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 457
                self.onErrorStmt()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 458
                self.onGoToStmt()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 459
                self.openStmt()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 460
                self.printStmt()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 461
                self.putStmt()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 462
                self.randomizeStmt()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 463
                self.redimStmt()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 464
                self.resetStmt()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 465
                self.resumeStmt()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 466
                self.rmdirStmt()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 467
                self.selectCaseStmt()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 468
                self.setStmt()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 469
                self.stopStmt()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 470
                self.timeStmt()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 471
                self.variableStmt()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 472
                self.whileWendStmt()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 473
                self.widthStmt()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 474
                self.withStmt()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 475
                self.writeStmt()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 476
                self.implicitCallStmt_InBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeepStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEEP(self):
            return self.getToken(OOBasicParser.BEEP, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_beepStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeepStmt" ):
                listener.enterBeepStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeepStmt" ):
                listener.exitBeepStmt(self)




    def beepStmt(self):

        localctx = OOBasicParser.BeepStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_beepStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(OOBasicParser.BEEP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChDirStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHDIR(self):
            return self.getToken(OOBasicParser.CHDIR, 0)

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_chDirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChDirStmt" ):
                listener.enterChDirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChDirStmt" ):
                listener.exitChDirStmt(self)




    def chDirStmt(self):

        localctx = OOBasicParser.ChDirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_chDirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(OOBasicParser.CHDIR)
            self.state = 482
            self.match(OOBasicParser.WS)
            self.state = 483
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChDriveStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHDRIVE(self):
            return self.getToken(OOBasicParser.CHDRIVE, 0)

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_chDriveStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChDriveStmt" ):
                listener.enterChDriveStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChDriveStmt" ):
                listener.exitChDriveStmt(self)




    def chDriveStmt(self):

        localctx = OOBasicParser.ChDriveStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_chDriveStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(OOBasicParser.CHDRIVE)
            self.state = 486
            self.match(OOBasicParser.WS)
            self.state = 487
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(OOBasicParser.CLOSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_closeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseStmt" ):
                listener.enterCloseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseStmt" ):
                listener.exitCloseStmt(self)




    def closeStmt(self):

        localctx = OOBasicParser.CloseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_closeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(OOBasicParser.CLOSE)
            self.state = 505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 490
                self.match(OOBasicParser.WS)
                self.state = 491
                self.valueStmt(0)
                self.state = 502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 493
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 492
                            self.match(OOBasicParser.WS)


                        self.state = 495
                        self.match(OOBasicParser.COMMA)
                        self.state = 497
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                        if la_ == 1:
                            self.state = 496
                            self.match(OOBasicParser.WS)


                        self.state = 499
                        self.valueStmt(0) 
                    self.state = 504
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,40,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(OOBasicParser.CONST, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def constSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ConstSubStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ConstSubStmtContext,i)


        def publicPrivateGlobalVisibility(self):
            return self.getTypedRuleContext(OOBasicParser.PublicPrivateGlobalVisibilityContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_constStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstStmt" ):
                listener.enterConstStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstStmt" ):
                listener.exitConstStmt(self)




    def constStmt(self):

        localctx = OOBasicParser.ConstStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (OOBasicParser.GLOBAL - 58)) | (1 << (OOBasicParser.PRIVATE - 58)) | (1 << (OOBasicParser.PUBLIC - 58)))) != 0):
                self.state = 507
                self.publicPrivateGlobalVisibility()
                self.state = 508
                self.match(OOBasicParser.WS)


            self.state = 512
            self.match(OOBasicParser.CONST)
            self.state = 513
            self.match(OOBasicParser.WS)
            self.state = 514
            self.constSubStmt()
            self.state = 525
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 515
                        self.match(OOBasicParser.WS)


                    self.state = 518
                    self.match(OOBasicParser.COMMA)
                    self.state = 520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 519
                        self.match(OOBasicParser.WS)


                    self.state = 522
                    self.constSubStmt() 
                self.state = 527
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstSubStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(OOBasicParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(OOBasicParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(OOBasicParser.AsTypeClauseContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_constSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstSubStmt" ):
                listener.enterConstSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstSubStmt" ):
                listener.exitConstSubStmt(self)




    def constSubStmt(self):

        localctx = OOBasicParser.ConstSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_constSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.ambiguousIdentifier()
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                self.state = 529
                self.typeHint()


            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 532
                self.match(OOBasicParser.WS)
                self.state = 533
                self.asTypeClause()


            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 536
                self.match(OOBasicParser.WS)


            self.state = 539
            self.match(OOBasicParser.EQ)
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 540
                self.match(OOBasicParser.WS)


            self.state = 543
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(OOBasicParser.DATE, 0)

        def EQ(self):
            return self.getToken(OOBasicParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_dateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateStmt" ):
                listener.enterDateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateStmt" ):
                listener.exitDateStmt(self)




    def dateStmt(self):

        localctx = OOBasicParser.DateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_dateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(OOBasicParser.DATE)
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 546
                self.match(OOBasicParser.WS)


            self.state = 549
            self.match(OOBasicParser.EQ)
            self.state = 551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 550
                self.match(OOBasicParser.WS)


            self.state = 553
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeftypeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def letterrange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.LetterrangeContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.LetterrangeContext,i)


        def DEFBOOL(self):
            return self.getToken(OOBasicParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(OOBasicParser.DEFBYTE, 0)

        def DEFINT(self):
            return self.getToken(OOBasicParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(OOBasicParser.DEFLNG, 0)

        def DEFCUR(self):
            return self.getToken(OOBasicParser.DEFCUR, 0)

        def DEFSNG(self):
            return self.getToken(OOBasicParser.DEFSNG, 0)

        def DEFDBL(self):
            return self.getToken(OOBasicParser.DEFDBL, 0)

        def DEFDEC(self):
            return self.getToken(OOBasicParser.DEFDEC, 0)

        def DEFDATE(self):
            return self.getToken(OOBasicParser.DEFDATE, 0)

        def DEFSTR(self):
            return self.getToken(OOBasicParser.DEFSTR, 0)

        def DEFOBJ(self):
            return self.getToken(OOBasicParser.DEFOBJ, 0)

        def DEFVAR(self):
            return self.getToken(OOBasicParser.DEFVAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_deftypeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeftypeStmt" ):
                listener.enterDeftypeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeftypeStmt" ):
                listener.exitDeftypeStmt(self)




    def deftypeStmt(self):

        localctx = OOBasicParser.DeftypeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_deftypeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 556
            self.match(OOBasicParser.WS)
            self.state = 557
            self.letterrange()
            self.state = 568
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 559
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 558
                        self.match(OOBasicParser.WS)


                    self.state = 561
                    self.match(OOBasicParser.COMMA)
                    self.state = 563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 562
                        self.match(OOBasicParser.WS)


                    self.state = 565
                    self.letterrange() 
                self.state = 570
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoLoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(OOBasicParser.DO, 0)

        def LOOP(self):
            return self.getToken(OOBasicParser.LOOP, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def WHILE(self):
            return self.getToken(OOBasicParser.WHILE, 0)

        def UNTIL(self):
            return self.getToken(OOBasicParser.UNTIL, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_doLoopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoLoopStmt" ):
                listener.enterDoLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoLoopStmt" ):
                listener.exitDoLoopStmt(self)




    def doLoopStmt(self):

        localctx = OOBasicParser.DoLoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_doLoopStmt)
        self._la = 0 # Token type
        try:
            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.match(OOBasicParser.DO)
                self.state = 573 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 572
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 575 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break

                self.state = 583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 577
                    self.block()
                    self.state = 579 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 578
                        self.match(OOBasicParser.NEWLINE)
                        self.state = 581 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==OOBasicParser.NEWLINE):
                            break



                self.state = 585
                self.match(OOBasicParser.LOOP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 586
                self.match(OOBasicParser.DO)
                self.state = 587
                self.match(OOBasicParser.WS)
                self.state = 588
                _la = self._input.LA(1)
                if not(_la==OOBasicParser.UNTIL or _la==OOBasicParser.WHILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 589
                self.match(OOBasicParser.WS)
                self.state = 590
                self.valueStmt(0)
                self.state = 592 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 591
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 594 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break

                self.state = 602
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 596
                    self.block()
                    self.state = 598 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 597
                        self.match(OOBasicParser.NEWLINE)
                        self.state = 600 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==OOBasicParser.NEWLINE):
                            break



                self.state = 604
                self.match(OOBasicParser.LOOP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 606
                self.match(OOBasicParser.DO)
                self.state = 608 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 607
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 610 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break

                self.state = 612
                self.block()
                self.state = 614 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 613
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 616 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break

                self.state = 618
                self.match(OOBasicParser.LOOP)
                self.state = 619
                self.match(OOBasicParser.WS)
                self.state = 620
                _la = self._input.LA(1)
                if not(_la==OOBasicParser.UNTIL or _la==OOBasicParser.WHILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 621
                self.match(OOBasicParser.WS)
                self.state = 622
                self.valueStmt(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(OOBasicParser.END, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_endStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStmt" ):
                listener.enterEndStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStmt" ):
                listener.exitEndStmt(self)




    def endStmt(self):

        localctx = OOBasicParser.EndStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_endStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(OOBasicParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(OOBasicParser.ERROR, 0)

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_errorStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorStmt" ):
                listener.enterErrorStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorStmt" ):
                listener.exitErrorStmt(self)




    def errorStmt(self):

        localctx = OOBasicParser.ErrorStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_errorStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(OOBasicParser.ERROR)
            self.state = 629
            self.match(OOBasicParser.WS)
            self.state = 630
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT_DO(self):
            return self.getToken(OOBasicParser.EXIT_DO, 0)

        def EXIT_FOR(self):
            return self.getToken(OOBasicParser.EXIT_FOR, 0)

        def EXIT_FUNCTION(self):
            return self.getToken(OOBasicParser.EXIT_FUNCTION, 0)

        def EXIT_SUB(self):
            return self.getToken(OOBasicParser.EXIT_SUB, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_exitStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitStmt" ):
                listener.enterExitStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitStmt" ):
                listener.exitExitStmt(self)




    def exitStmt(self):

        localctx = OOBasicParser.ExitStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_exitStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.EXIT_DO) | (1 << OOBasicParser.EXIT_FOR) | (1 << OOBasicParser.EXIT_FUNCTION) | (1 << OOBasicParser.EXIT_SUB))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilecopyStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILECOPY(self):
            return self.getToken(OOBasicParser.FILECOPY, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(OOBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_filecopyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilecopyStmt" ):
                listener.enterFilecopyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilecopyStmt" ):
                listener.exitFilecopyStmt(self)




    def filecopyStmt(self):

        localctx = OOBasicParser.FilecopyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_filecopyStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(OOBasicParser.FILECOPY)
            self.state = 635
            self.match(OOBasicParser.WS)
            self.state = 636
            self.valueStmt(0)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 637
                self.match(OOBasicParser.WS)


            self.state = 640
            self.match(OOBasicParser.COMMA)
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 641
                self.match(OOBasicParser.WS)


            self.state = 644
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(OOBasicParser.FOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def EACH(self):
            return self.getToken(OOBasicParser.EACH, 0)

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,i)


        def IN(self):
            return self.getToken(OOBasicParser.IN, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def NEXT(self):
            return self.getToken(OOBasicParser.NEXT, 0)

        def typeHint(self):
            return self.getTypedRuleContext(OOBasicParser.TypeHintContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_forEachStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStmt" ):
                listener.enterForEachStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStmt" ):
                listener.exitForEachStmt(self)




    def forEachStmt(self):

        localctx = OOBasicParser.ForEachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_forEachStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(OOBasicParser.FOR)
            self.state = 647
            self.match(OOBasicParser.WS)
            self.state = 648
            self.match(OOBasicParser.EACH)
            self.state = 649
            self.match(OOBasicParser.WS)
            self.state = 650
            self.ambiguousIdentifier()
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                self.state = 651
                self.typeHint()


            self.state = 654
            self.match(OOBasicParser.WS)
            self.state = 655
            self.match(OOBasicParser.IN)
            self.state = 656
            self.match(OOBasicParser.WS)
            self.state = 657
            self.valueStmt(0)
            self.state = 659 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 658
                self.match(OOBasicParser.NEWLINE)
                self.state = 661 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 663
                self.block()
                self.state = 665 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 664
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 667 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break



            self.state = 671
            self.match(OOBasicParser.NEXT)
            self.state = 674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 672
                self.match(OOBasicParser.WS)
                self.state = 673
                self.ambiguousIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForNextStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(OOBasicParser.FOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(OOBasicParser.ICS_S_VariableOrProcedureCallContext,0)


        def EQ(self):
            return self.getToken(OOBasicParser.EQ, 0)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)


        def TO(self):
            return self.getToken(OOBasicParser.TO, 0)

        def NEXT(self):
            return self.getToken(OOBasicParser.NEXT, 0)

        def typeHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.TypeHintContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.TypeHintContext,i)


        def asTypeClause(self):
            return self.getTypedRuleContext(OOBasicParser.AsTypeClauseContext,0)


        def STEP(self):
            return self.getToken(OOBasicParser.STEP, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_forNextStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForNextStmt" ):
                listener.enterForNextStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForNextStmt" ):
                listener.exitForNextStmt(self)




    def forNextStmt(self):

        localctx = OOBasicParser.ForNextStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_forNextStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(OOBasicParser.FOR)
            self.state = 677
            self.match(OOBasicParser.WS)
            self.state = 678
            self.iCS_S_VariableOrProcedureCall()
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                self.state = 679
                self.typeHint()


            self.state = 684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 682
                self.match(OOBasicParser.WS)
                self.state = 683
                self.asTypeClause()


            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 686
                self.match(OOBasicParser.WS)


            self.state = 689
            self.match(OOBasicParser.EQ)
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 690
                self.match(OOBasicParser.WS)


            self.state = 693
            self.valueStmt(0)
            self.state = 694
            self.match(OOBasicParser.WS)
            self.state = 695
            self.match(OOBasicParser.TO)
            self.state = 696
            self.match(OOBasicParser.WS)
            self.state = 697
            self.valueStmt(0)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 698
                self.match(OOBasicParser.WS)
                self.state = 699
                self.match(OOBasicParser.STEP)
                self.state = 700
                self.match(OOBasicParser.WS)
                self.state = 701
                self.valueStmt(0)


            self.state = 705 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 704
                self.match(OOBasicParser.NEWLINE)
                self.state = 707 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 709
                self.block()
                self.state = 711 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 710
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 713 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break



            self.state = 717
            self.match(OOBasicParser.NEXT)
            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 718
                self.match(OOBasicParser.WS)
                self.state = 719
                self.ambiguousIdentifier()
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                    self.state = 720
                    self.typeHint()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(OOBasicParser.FUNCTION, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def END_FUNCTION(self):
            return self.getToken(OOBasicParser.END_FUNCTION, 0)

        def visibility(self):
            return self.getTypedRuleContext(OOBasicParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(OOBasicParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(OOBasicParser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(OOBasicParser.AsTypeClauseContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_functionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionStmt" ):
                listener.enterFunctionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionStmt" ):
                listener.exitFunctionStmt(self)




    def functionStmt(self):

        localctx = OOBasicParser.FunctionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (OOBasicParser.GLOBAL - 58)) | (1 << (OOBasicParser.PRIVATE - 58)) | (1 << (OOBasicParser.PUBLIC - 58)))) != 0):
                self.state = 725
                self.visibility()
                self.state = 726
                self.match(OOBasicParser.WS)


            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.STATIC:
                self.state = 730
                self.match(OOBasicParser.STATIC)
                self.state = 731
                self.match(OOBasicParser.WS)


            self.state = 734
            self.match(OOBasicParser.FUNCTION)
            self.state = 735
            self.match(OOBasicParser.WS)
            self.state = 736
            self.ambiguousIdentifier()
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 737
                    self.match(OOBasicParser.WS)


                self.state = 740
                self.argList()


            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 743
                self.match(OOBasicParser.WS)
                self.state = 744
                self.asTypeClause()


            self.state = 748 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 747
                self.match(OOBasicParser.NEWLINE)
                self.state = 750 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.EXIT_DO) | (1 << OOBasicParser.EXIT_FOR) | (1 << OOBasicParser.EXIT_FUNCTION) | (1 << OOBasicParser.EXIT_SUB) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.LINE_INPUT - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.ON_ERROR - 64)) | (1 << (OOBasicParser.ON_LOCAL_ERROR - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                self.state = 752
                self.block()
                self.state = 754 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 753
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 756 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break



            self.state = 760
            self.match(OOBasicParser.END_FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoToStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(OOBasicParser.GOTO, 0)

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_goToStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoToStmt" ):
                listener.enterGoToStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoToStmt" ):
                listener.exitGoToStmt(self)




    def goToStmt(self):

        localctx = OOBasicParser.GoToStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_goToStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(OOBasicParser.GOTO)
            self.state = 763
            self.match(OOBasicParser.WS)
            self.state = 764
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfThenElseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OOBasicParser.RULE_ifThenElseStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BlockIfThenElseContext(IfThenElseStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.IfThenElseStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ifBlockStmt(self):
            return self.getTypedRuleContext(OOBasicParser.IfBlockStmtContext,0)

        def END_IF(self):
            return self.getToken(OOBasicParser.END_IF, 0)
        def ifElseIfBlockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.IfElseIfBlockStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.IfElseIfBlockStmtContext,i)

        def ifElseBlockStmt(self):
            return self.getTypedRuleContext(OOBasicParser.IfElseBlockStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockIfThenElse" ):
                listener.enterBlockIfThenElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockIfThenElse" ):
                listener.exitBlockIfThenElse(self)


    class InlineIfThenElseContext(IfThenElseStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.IfThenElseStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(OOBasicParser.IF, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)
        def ifConditionStmt(self):
            return self.getTypedRuleContext(OOBasicParser.IfConditionStmtContext,0)

        def THEN(self):
            return self.getToken(OOBasicParser.THEN, 0)
        def blockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.BlockStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.BlockStmtContext,i)

        def ELSE(self):
            return self.getToken(OOBasicParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineIfThenElse" ):
                listener.enterInlineIfThenElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineIfThenElse" ):
                listener.exitInlineIfThenElse(self)



    def ifThenElseStmt(self):

        localctx = OOBasicParser.IfThenElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_ifThenElseStmt)
        self._la = 0 # Token type
        try:
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                localctx = OOBasicParser.InlineIfThenElseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 766
                self.match(OOBasicParser.IF)
                self.state = 767
                self.match(OOBasicParser.WS)
                self.state = 768
                self.ifConditionStmt()
                self.state = 769
                self.match(OOBasicParser.WS)
                self.state = 770
                self.match(OOBasicParser.THEN)
                self.state = 771
                self.match(OOBasicParser.WS)
                self.state = 772
                self.blockStmt()
                self.state = 777
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 773
                    self.match(OOBasicParser.WS)
                    self.state = 774
                    self.match(OOBasicParser.ELSE)
                    self.state = 775
                    self.match(OOBasicParser.WS)
                    self.state = 776
                    self.blockStmt()


                pass

            elif la_ == 2:
                localctx = OOBasicParser.BlockIfThenElseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 779
                self.ifBlockStmt()
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==OOBasicParser.ELSEIF:
                    self.state = 780
                    self.ifElseIfBlockStmt()
                    self.state = 785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.ELSE:
                    self.state = 786
                    self.ifElseBlockStmt()


                self.state = 789
                self.match(OOBasicParser.END_IF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfBlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(OOBasicParser.IF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(OOBasicParser.IfConditionStmtContext,0)


        def THEN(self):
            return self.getToken(OOBasicParser.THEN, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_ifBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBlockStmt" ):
                listener.enterIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBlockStmt" ):
                listener.exitIfBlockStmt(self)




    def ifBlockStmt(self):

        localctx = OOBasicParser.IfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_ifBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(OOBasicParser.IF)
            self.state = 794
            self.match(OOBasicParser.WS)
            self.state = 795
            self.ifConditionStmt()
            self.state = 796
            self.match(OOBasicParser.WS)
            self.state = 797
            self.match(OOBasicParser.THEN)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 798
                self.match(OOBasicParser.WS)


            self.state = 802 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 801
                self.match(OOBasicParser.NEWLINE)
                self.state = 804 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 806
                self.block()
                self.state = 808 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 807
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 810 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfConditionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_ifConditionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfConditionStmt" ):
                listener.enterIfConditionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfConditionStmt" ):
                listener.exitIfConditionStmt(self)




    def ifConditionStmt(self):

        localctx = OOBasicParser.IfConditionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_ifConditionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfElseIfBlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(OOBasicParser.ELSEIF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(OOBasicParser.IfConditionStmtContext,0)


        def THEN(self):
            return self.getToken(OOBasicParser.THEN, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_ifElseIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseIfBlockStmt" ):
                listener.enterIfElseIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseIfBlockStmt" ):
                listener.exitIfElseIfBlockStmt(self)




    def ifElseIfBlockStmt(self):

        localctx = OOBasicParser.IfElseIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_ifElseIfBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(OOBasicParser.ELSEIF)
            self.state = 817
            self.match(OOBasicParser.WS)
            self.state = 818
            self.ifConditionStmt()
            self.state = 819
            self.match(OOBasicParser.WS)
            self.state = 820
            self.match(OOBasicParser.THEN)
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 821
                self.match(OOBasicParser.WS)


            self.state = 825 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 824
                self.match(OOBasicParser.NEWLINE)
                self.state = 827 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 829
                self.block()
                self.state = 831 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 830
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 833 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfElseBlockStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(OOBasicParser.ELSE, 0)

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_ifElseBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseBlockStmt" ):
                listener.enterIfElseBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseBlockStmt" ):
                listener.exitIfElseBlockStmt(self)




    def ifElseBlockStmt(self):

        localctx = OOBasicParser.IfElseBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_ifElseBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(OOBasicParser.ELSE)
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 838
                self.match(OOBasicParser.WS)


            self.state = 842 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 841
                self.match(OOBasicParser.NEWLINE)
                self.state = 844 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.EXIT_DO) | (1 << OOBasicParser.EXIT_FOR) | (1 << OOBasicParser.EXIT_FUNCTION) | (1 << OOBasicParser.EXIT_SUB) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.LINE_INPUT - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.ON_ERROR - 64)) | (1 << (OOBasicParser.ON_LOCAL_ERROR - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                self.state = 846
                self.block()
                self.state = 848 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 847
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 850 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(OOBasicParser.INPUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_inputStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputStmt" ):
                listener.enterInputStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputStmt" ):
                listener.exitInputStmt(self)




    def inputStmt(self):

        localctx = OOBasicParser.InputStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_inputStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(OOBasicParser.INPUT)
            self.state = 855
            self.match(OOBasicParser.WS)
            self.state = 856
            self.valueStmt(0)
            self.state = 865 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 858
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 857
                        self.match(OOBasicParser.WS)


                    self.state = 860
                    self.match(OOBasicParser.COMMA)
                    self.state = 862
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        self.state = 861
                        self.match(OOBasicParser.WS)


                    self.state = 864
                    self.valueStmt(0)

                else:
                    raise NoViableAltException(self)
                self.state = 867 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ImplicitCallStmt_InStmtContext,0)


        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def ADDNUMERIC(self):
            return self.getToken(OOBasicParser.ADDNUMERIC, 0)

        def EQ(self):
            return self.getToken(OOBasicParser.EQ, 0)

        def PLUS_EQ(self):
            return self.getToken(OOBasicParser.PLUS_EQ, 0)

        def MINUS_EQ(self):
            return self.getToken(OOBasicParser.MINUS_EQ, 0)

        def LET(self):
            return self.getToken(OOBasicParser.LET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)




    def letStmt(self):

        localctx = OOBasicParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 869
                self.match(OOBasicParser.LET)
                self.state = 870
                self.match(OOBasicParser.WS)


            self.state = 873
            self.implicitCallStmt_InStmt()
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 874
                self.match(OOBasicParser.WS)


            self.state = 877
            _la = self._input.LA(1)
            if not(_la==OOBasicParser.ADDNUMERIC or ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (OOBasicParser.EQ - 151)) | (1 << (OOBasicParser.MINUS_EQ - 151)) | (1 << (OOBasicParser.PLUS_EQ - 151)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 878
                self.match(OOBasicParser.WS)


            self.state = 881
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineInputStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_INPUT(self):
            return self.getToken(OOBasicParser.LINE_INPUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(OOBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_lineInputStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineInputStmt" ):
                listener.enterLineInputStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineInputStmt" ):
                listener.exitLineInputStmt(self)




    def lineInputStmt(self):

        localctx = OOBasicParser.LineInputStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_lineInputStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(OOBasicParser.LINE_INPUT)
            self.state = 884
            self.match(OOBasicParser.WS)
            self.state = 885
            self.valueStmt(0)
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 886
                self.match(OOBasicParser.WS)


            self.state = 889
            self.match(OOBasicParser.COMMA)
            self.state = 891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 890
                self.match(OOBasicParser.WS)


            self.state = 893
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MidStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MID(self):
            return self.getToken(OOBasicParser.MID, 0)

        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(OOBasicParser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_midStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMidStmt" ):
                listener.enterMidStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMidStmt" ):
                listener.exitMidStmt(self)




    def midStmt(self):

        localctx = OOBasicParser.MidStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_midStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(OOBasicParser.MID)
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 896
                self.match(OOBasicParser.WS)


            self.state = 899
            self.match(OOBasicParser.LPAREN)
            self.state = 901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 900
                self.match(OOBasicParser.WS)


            self.state = 903
            self.argsCall()
            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 904
                self.match(OOBasicParser.WS)


            self.state = 907
            self.match(OOBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MkdirStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MKDIR(self):
            return self.getToken(OOBasicParser.MKDIR, 0)

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_mkdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMkdirStmt" ):
                listener.enterMkdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMkdirStmt" ):
                listener.exitMkdirStmt(self)




    def mkdirStmt(self):

        localctx = OOBasicParser.MkdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_mkdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(OOBasicParser.MKDIR)
            self.state = 910
            self.match(OOBasicParser.WS)
            self.state = 911
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(OOBasicParser.NAME, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)


        def AS(self):
            return self.getToken(OOBasicParser.AS, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_nameStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameStmt" ):
                listener.enterNameStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameStmt" ):
                listener.exitNameStmt(self)




    def nameStmt(self):

        localctx = OOBasicParser.NameStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_nameStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(OOBasicParser.NAME)
            self.state = 914
            self.match(OOBasicParser.WS)
            self.state = 915
            self.valueStmt(0)
            self.state = 916
            self.match(OOBasicParser.WS)
            self.state = 917
            self.match(OOBasicParser.AS)
            self.state = 918
            self.match(OOBasicParser.WS)
            self.state = 919
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnErrorStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def ON_ERROR(self):
            return self.getToken(OOBasicParser.ON_ERROR, 0)

        def ON_LOCAL_ERROR(self):
            return self.getToken(OOBasicParser.ON_LOCAL_ERROR, 0)

        def GOTO(self):
            return self.getToken(OOBasicParser.GOTO, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def RESUME(self):
            return self.getToken(OOBasicParser.RESUME, 0)

        def NEXT(self):
            return self.getToken(OOBasicParser.NEXT, 0)

        def COLON(self):
            return self.getToken(OOBasicParser.COLON, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_onErrorStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnErrorStmt" ):
                listener.enterOnErrorStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnErrorStmt" ):
                listener.exitOnErrorStmt(self)




    def onErrorStmt(self):

        localctx = OOBasicParser.OnErrorStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_onErrorStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            _la = self._input.LA(1)
            if not(_la==OOBasicParser.ON_ERROR or _la==OOBasicParser.ON_LOCAL_ERROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 922
            self.match(OOBasicParser.WS)
            self.state = 932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OOBasicParser.GOTO]:
                self.state = 923
                self.match(OOBasicParser.GOTO)
                self.state = 924
                self.match(OOBasicParser.WS)
                self.state = 925
                self.valueStmt(0)
                self.state = 927
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 926
                    self.match(OOBasicParser.COLON)


                pass
            elif token in [OOBasicParser.RESUME]:
                self.state = 929
                self.match(OOBasicParser.RESUME)
                self.state = 930
                self.match(OOBasicParser.WS)
                self.state = 931
                self.match(OOBasicParser.NEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnGoToStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(OOBasicParser.ON, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)


        def GOTO(self):
            return self.getToken(OOBasicParser.GOTO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_onGoToStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGoToStmt" ):
                listener.enterOnGoToStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGoToStmt" ):
                listener.exitOnGoToStmt(self)




    def onGoToStmt(self):

        localctx = OOBasicParser.OnGoToStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_onGoToStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(OOBasicParser.ON)
            self.state = 935
            self.match(OOBasicParser.WS)
            self.state = 936
            self.valueStmt(0)
            self.state = 937
            self.match(OOBasicParser.WS)
            self.state = 938
            self.match(OOBasicParser.GOTO)
            self.state = 939
            self.match(OOBasicParser.WS)
            self.state = 940
            self.valueStmt(0)
            self.state = 951
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 941
                        self.match(OOBasicParser.WS)


                    self.state = 944
                    self.match(OOBasicParser.COMMA)
                    self.state = 946
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                    if la_ == 1:
                        self.state = 945
                        self.match(OOBasicParser.WS)


                    self.state = 948
                    self.valueStmt(0) 
                self.state = 953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(OOBasicParser.OPEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)


        def FOR(self):
            return self.getToken(OOBasicParser.FOR, 0)

        def AS(self):
            return self.getToken(OOBasicParser.AS, 0)

        def APPEND(self):
            return self.getToken(OOBasicParser.APPEND, 0)

        def BINARY(self):
            return self.getToken(OOBasicParser.BINARY, 0)

        def INPUT(self):
            return self.getToken(OOBasicParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(OOBasicParser.OUTPUT, 0)

        def RANDOM(self):
            return self.getToken(OOBasicParser.RANDOM, 0)

        def ACCESS(self):
            return self.getToken(OOBasicParser.ACCESS, 0)

        def LEN(self):
            return self.getToken(OOBasicParser.LEN, 0)

        def EQ(self):
            return self.getToken(OOBasicParser.EQ, 0)

        def READ(self):
            return self.getToken(OOBasicParser.READ, 0)

        def WRITE(self):
            return self.getToken(OOBasicParser.WRITE, 0)

        def READ_WRITE(self):
            return self.getToken(OOBasicParser.READ_WRITE, 0)

        def SHARED(self):
            return self.getToken(OOBasicParser.SHARED, 0)

        def LOCK_READ(self):
            return self.getToken(OOBasicParser.LOCK_READ, 0)

        def LOCK_WRITE(self):
            return self.getToken(OOBasicParser.LOCK_WRITE, 0)

        def LOCK_READ_WRITE(self):
            return self.getToken(OOBasicParser.LOCK_READ_WRITE, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_openStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenStmt" ):
                listener.enterOpenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenStmt" ):
                listener.exitOpenStmt(self)




    def openStmt(self):

        localctx = OOBasicParser.OpenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_openStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.match(OOBasicParser.OPEN)
            self.state = 955
            self.match(OOBasicParser.WS)
            self.state = 956
            self.valueStmt(0)
            self.state = 957
            self.match(OOBasicParser.WS)
            self.state = 958
            self.match(OOBasicParser.FOR)
            self.state = 959
            self.match(OOBasicParser.WS)
            self.state = 960
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.APPEND) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.INPUT))) != 0) or _la==OOBasicParser.OUTPUT or _la==OOBasicParser.RANDOM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 961
                self.match(OOBasicParser.WS)
                self.state = 962
                self.match(OOBasicParser.ACCESS)
                self.state = 963
                self.match(OOBasicParser.WS)
                self.state = 964
                _la = self._input.LA(1)
                if not(((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & ((1 << (OOBasicParser.READ - 109)) | (1 << (OOBasicParser.READ_WRITE - 109)) | (1 << (OOBasicParser.WRITE - 109)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 967
                self.match(OOBasicParser.WS)
                self.state = 968
                _la = self._input.LA(1)
                if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (OOBasicParser.LOCK_READ - 71)) | (1 << (OOBasicParser.LOCK_WRITE - 71)) | (1 << (OOBasicParser.LOCK_READ_WRITE - 71)) | (1 << (OOBasicParser.SHARED - 71)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 971
            self.match(OOBasicParser.WS)
            self.state = 972
            self.match(OOBasicParser.AS)
            self.state = 973
            self.match(OOBasicParser.WS)
            self.state = 974
            self.valueStmt(0)
            self.state = 985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 975
                self.match(OOBasicParser.WS)
                self.state = 976
                self.match(OOBasicParser.LEN)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 977
                    self.match(OOBasicParser.WS)


                self.state = 980
                self.match(OOBasicParser.EQ)
                self.state = 982
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 981
                    self.match(OOBasicParser.WS)


                self.state = 984
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outputList_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.OutputList_ExpressionContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.OutputList_ExpressionContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.SEMICOLON)
            else:
                return self.getToken(OOBasicParser.SEMICOLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_outputList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList" ):
                listener.enterOutputList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList" ):
                listener.exitOutputList(self)




    def outputList(self):

        localctx = OOBasicParser.OutputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_outputList)
        self._la = 0 # Token type
        try:
            self.state = 1020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 987
                self.outputList_Expression()
                self.state = 1000
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 989
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 988
                            self.match(OOBasicParser.WS)


                        self.state = 991
                        _la = self._input.LA(1)
                        if not(_la==OOBasicParser.COMMA or _la==OOBasicParser.SEMICOLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 993
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                        if la_ == 1:
                            self.state = 992
                            self.match(OOBasicParser.WS)


                        self.state = 996
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                        if la_ == 1:
                            self.state = 995
                            self.outputList_Expression()

                 
                    self.state = 1002
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1004
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1003
                    self.outputList_Expression()


                self.state = 1016 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1007
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1006
                            self.match(OOBasicParser.WS)


                        self.state = 1009
                        _la = self._input.LA(1)
                        if not(_la==OOBasicParser.COMMA or _la==OOBasicParser.SEMICOLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1011
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                        if la_ == 1:
                            self.state = 1010
                            self.match(OOBasicParser.WS)


                        self.state = 1014
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                        if la_ == 1:
                            self.state = 1013
                            self.outputList_Expression()



                    else:
                        raise NoViableAltException(self)
                    self.state = 1018 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputList_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPC(self):
            return self.getToken(OOBasicParser.SPC, 0)

        def TAB(self):
            return self.getToken(OOBasicParser.TAB, 0)

        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(OOBasicParser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_outputList_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList_Expression" ):
                listener.enterOutputList_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList_Expression" ):
                listener.exitOutputList_Expression(self)




    def outputList_Expression(self):

        localctx = OOBasicParser.OutputList_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_outputList_Expression)
        self._la = 0 # Token type
        try:
            self.state = 1039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1022
                _la = self._input.LA(1)
                if not(_la==OOBasicParser.SPC or _la==OOBasicParser.TAB):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1036
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1024
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1023
                        self.match(OOBasicParser.WS)


                    self.state = 1026
                    self.match(OOBasicParser.LPAREN)
                    self.state = 1028
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                    if la_ == 1:
                        self.state = 1027
                        self.match(OOBasicParser.WS)


                    self.state = 1030
                    self.argsCall()
                    self.state = 1032
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1031
                        self.match(OOBasicParser.WS)


                    self.state = 1034
                    self.match(OOBasicParser.RPAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1038
                self.valueStmt(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(OOBasicParser.PRINT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def COMMA(self):
            return self.getToken(OOBasicParser.COMMA, 0)

        def outputList(self):
            return self.getTypedRuleContext(OOBasicParser.OutputListContext,0)


        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)




    def printStmt(self):

        localctx = OOBasicParser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.state = 1080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1041
                self.match(OOBasicParser.PRINT)
                self.state = 1042
                self.match(OOBasicParser.WS)
                self.state = 1043
                self.valueStmt(0)
                self.state = 1054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 1045
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1044
                        self.match(OOBasicParser.WS)


                    self.state = 1047
                    self.match(OOBasicParser.COMMA)
                    self.state = 1052
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                    if la_ == 1:
                        self.state = 1049
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                        if la_ == 1:
                            self.state = 1048
                            self.match(OOBasicParser.WS)


                        self.state = 1051
                        self.outputList()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.match(OOBasicParser.PRINT)
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1057
                    self.match(OOBasicParser.WS)


                self.state = 1060
                self.match(OOBasicParser.LPAREN)
                self.state = 1062
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1061
                    self.match(OOBasicParser.WS)


                self.state = 1064
                self.valueStmt(0)
                self.state = 1073
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1066
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1065
                        self.match(OOBasicParser.WS)


                    self.state = 1068
                    self.match(OOBasicParser.COMMA)
                    self.state = 1070
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                    if la_ == 1:
                        self.state = 1069
                        self.match(OOBasicParser.WS)


                    self.state = 1072
                    self.outputList()


                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1075
                    self.match(OOBasicParser.WS)


                self.state = 1078
                self.match(OOBasicParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyGetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_GET(self):
            return self.getToken(OOBasicParser.PROPERTY_GET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def END_PROPERTY(self):
            return self.getToken(OOBasicParser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(OOBasicParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(OOBasicParser.STATIC, 0)

        def typeHint(self):
            return self.getTypedRuleContext(OOBasicParser.TypeHintContext,0)


        def argList(self):
            return self.getTypedRuleContext(OOBasicParser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(OOBasicParser.AsTypeClauseContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_propertyGetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetStmt" ):
                listener.enterPropertyGetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetStmt" ):
                listener.exitPropertyGetStmt(self)




    def propertyGetStmt(self):

        localctx = OOBasicParser.PropertyGetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_propertyGetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (OOBasicParser.GLOBAL - 58)) | (1 << (OOBasicParser.PRIVATE - 58)) | (1 << (OOBasicParser.PUBLIC - 58)))) != 0):
                self.state = 1082
                self.visibility()
                self.state = 1083
                self.match(OOBasicParser.WS)


            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.STATIC:
                self.state = 1087
                self.match(OOBasicParser.STATIC)
                self.state = 1088
                self.match(OOBasicParser.WS)


            self.state = 1091
            self.match(OOBasicParser.PROPERTY_GET)
            self.state = 1092
            self.match(OOBasicParser.WS)
            self.state = 1093
            self.ambiguousIdentifier()
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                self.state = 1094
                self.typeHint()


            self.state = 1101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1097
                    self.match(OOBasicParser.WS)


                self.state = 1100
                self.argList()


            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1103
                self.match(OOBasicParser.WS)
                self.state = 1104
                self.asTypeClause()


            self.state = 1108 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1107
                self.match(OOBasicParser.NEWLINE)
                self.state = 1110 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.EXIT_DO) | (1 << OOBasicParser.EXIT_FOR) | (1 << OOBasicParser.EXIT_FUNCTION) | (1 << OOBasicParser.EXIT_SUB) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.LINE_INPUT - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.ON_ERROR - 64)) | (1 << (OOBasicParser.ON_LOCAL_ERROR - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                self.state = 1112
                self.block()
                self.state = 1114 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1113
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 1116 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break



            self.state = 1120
            self.match(OOBasicParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertySetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_SET(self):
            return self.getToken(OOBasicParser.PROPERTY_SET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def END_PROPERTY(self):
            return self.getToken(OOBasicParser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(OOBasicParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(OOBasicParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(OOBasicParser.ArgListContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_propertySetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySetStmt" ):
                listener.enterPropertySetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySetStmt" ):
                listener.exitPropertySetStmt(self)




    def propertySetStmt(self):

        localctx = OOBasicParser.PropertySetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_propertySetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (OOBasicParser.GLOBAL - 58)) | (1 << (OOBasicParser.PRIVATE - 58)) | (1 << (OOBasicParser.PUBLIC - 58)))) != 0):
                self.state = 1122
                self.visibility()
                self.state = 1123
                self.match(OOBasicParser.WS)


            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.STATIC:
                self.state = 1127
                self.match(OOBasicParser.STATIC)
                self.state = 1128
                self.match(OOBasicParser.WS)


            self.state = 1131
            self.match(OOBasicParser.PROPERTY_SET)
            self.state = 1132
            self.match(OOBasicParser.WS)
            self.state = 1133
            self.ambiguousIdentifier()
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.LPAREN or _la==OOBasicParser.WS:
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1134
                    self.match(OOBasicParser.WS)


                self.state = 1137
                self.argList()


            self.state = 1141 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1140
                self.match(OOBasicParser.NEWLINE)
                self.state = 1143 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.EXIT_DO) | (1 << OOBasicParser.EXIT_FOR) | (1 << OOBasicParser.EXIT_FUNCTION) | (1 << OOBasicParser.EXIT_SUB) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.LINE_INPUT - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.ON_ERROR - 64)) | (1 << (OOBasicParser.ON_LOCAL_ERROR - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                self.state = 1145
                self.block()
                self.state = 1147 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1146
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 1149 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break



            self.state = 1153
            self.match(OOBasicParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyLetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_LET(self):
            return self.getToken(OOBasicParser.PROPERTY_LET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def END_PROPERTY(self):
            return self.getToken(OOBasicParser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(OOBasicParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(OOBasicParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(OOBasicParser.ArgListContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_propertyLetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyLetStmt" ):
                listener.enterPropertyLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyLetStmt" ):
                listener.exitPropertyLetStmt(self)




    def propertyLetStmt(self):

        localctx = OOBasicParser.PropertyLetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_propertyLetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (OOBasicParser.GLOBAL - 58)) | (1 << (OOBasicParser.PRIVATE - 58)) | (1 << (OOBasicParser.PUBLIC - 58)))) != 0):
                self.state = 1155
                self.visibility()
                self.state = 1156
                self.match(OOBasicParser.WS)


            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.STATIC:
                self.state = 1160
                self.match(OOBasicParser.STATIC)
                self.state = 1161
                self.match(OOBasicParser.WS)


            self.state = 1164
            self.match(OOBasicParser.PROPERTY_LET)
            self.state = 1165
            self.match(OOBasicParser.WS)
            self.state = 1166
            self.ambiguousIdentifier()
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.LPAREN or _la==OOBasicParser.WS:
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1167
                    self.match(OOBasicParser.WS)


                self.state = 1170
                self.argList()


            self.state = 1174 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1173
                self.match(OOBasicParser.NEWLINE)
                self.state = 1176 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 1184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.EXIT_DO) | (1 << OOBasicParser.EXIT_FOR) | (1 << OOBasicParser.EXIT_FUNCTION) | (1 << OOBasicParser.EXIT_SUB) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.LINE_INPUT - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.ON_ERROR - 64)) | (1 << (OOBasicParser.ON_LOCAL_ERROR - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                self.state = 1178
                self.block()
                self.state = 1180 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1179
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 1182 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break



            self.state = 1186
            self.match(OOBasicParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PutStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUT(self):
            return self.getToken(OOBasicParser.PUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_putStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutStmt" ):
                listener.enterPutStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutStmt" ):
                listener.exitPutStmt(self)




    def putStmt(self):

        localctx = OOBasicParser.PutStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_putStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.match(OOBasicParser.PUT)
            self.state = 1189
            self.match(OOBasicParser.WS)
            self.state = 1190
            self.valueStmt(0)
            self.state = 1192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1191
                self.match(OOBasicParser.WS)


            self.state = 1194
            self.match(OOBasicParser.COMMA)
            self.state = 1196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1195
                self.match(OOBasicParser.WS)


            self.state = 1199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1198
                self.valueStmt(0)


            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1201
                self.match(OOBasicParser.WS)


            self.state = 1204
            self.match(OOBasicParser.COMMA)
            self.state = 1206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1205
                self.match(OOBasicParser.WS)


            self.state = 1208
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RandomizeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANDOMIZE(self):
            return self.getToken(OOBasicParser.RANDOMIZE, 0)

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_randomizeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRandomizeStmt" ):
                listener.enterRandomizeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRandomizeStmt" ):
                listener.exitRandomizeStmt(self)




    def randomizeStmt(self):

        localctx = OOBasicParser.RandomizeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_randomizeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.match(OOBasicParser.RANDOMIZE)
            self.state = 1213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1211
                self.match(OOBasicParser.WS)
                self.state = 1212
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIM(self):
            return self.getToken(OOBasicParser.REDIM, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def redimSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.RedimSubStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.RedimSubStmtContext,i)


        def PRESERVE(self):
            return self.getToken(OOBasicParser.PRESERVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_redimStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimStmt" ):
                listener.enterRedimStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimStmt" ):
                listener.exitRedimStmt(self)




    def redimStmt(self):

        localctx = OOBasicParser.RedimStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_redimStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.match(OOBasicParser.REDIM)
            self.state = 1216
            self.match(OOBasicParser.WS)
            self.state = 1219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1217
                self.match(OOBasicParser.PRESERVE)
                self.state = 1218
                self.match(OOBasicParser.WS)


            self.state = 1221
            self.redimSubStmt()
            self.state = 1232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1222
                        self.match(OOBasicParser.WS)


                    self.state = 1225
                    self.match(OOBasicParser.COMMA)
                    self.state = 1227
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                    if la_ == 1:
                        self.state = 1226
                        self.match(OOBasicParser.WS)


                    self.state = 1229
                    self.redimSubStmt() 
                self.state = 1234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RedimSubStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ImplicitCallStmt_InStmtContext,0)


        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def subscripts(self):
            return self.getTypedRuleContext(OOBasicParser.SubscriptsContext,0)


        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(OOBasicParser.AsTypeClauseContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_redimSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimSubStmt" ):
                listener.enterRedimSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimSubStmt" ):
                listener.exitRedimSubStmt(self)




    def redimSubStmt(self):

        localctx = OOBasicParser.RedimSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_redimSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.implicitCallStmt_InStmt()
            self.state = 1237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1236
                self.match(OOBasicParser.WS)


            self.state = 1239
            self.match(OOBasicParser.LPAREN)
            self.state = 1241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1240
                self.match(OOBasicParser.WS)


            self.state = 1243
            self.subscripts()
            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1244
                self.match(OOBasicParser.WS)


            self.state = 1247
            self.match(OOBasicParser.RPAREN)
            self.state = 1250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1248
                self.match(OOBasicParser.WS)
                self.state = 1249
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(OOBasicParser.RESET, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_resetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStmt" ):
                listener.enterResetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStmt" ):
                listener.exitResetStmt(self)




    def resetStmt(self):

        localctx = OOBasicParser.ResetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_resetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(OOBasicParser.RESET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResumeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(OOBasicParser.RESUME, 0)

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def NEXT(self):
            return self.getToken(OOBasicParser.NEXT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_resumeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumeStmt" ):
                listener.enterResumeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumeStmt" ):
                listener.exitResumeStmt(self)




    def resumeStmt(self):

        localctx = OOBasicParser.ResumeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_resumeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.match(OOBasicParser.RESUME)
            self.state = 1260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1255
                self.match(OOBasicParser.WS)
                self.state = 1258
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1256
                    self.match(OOBasicParser.NEXT)
                    pass

                elif la_ == 2:
                    self.state = 1257
                    self.ambiguousIdentifier()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RmdirStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RMDIR(self):
            return self.getToken(OOBasicParser.RMDIR, 0)

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_rmdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRmdirStmt" ):
                listener.enterRmdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRmdirStmt" ):
                listener.exitRmdirStmt(self)




    def rmdirStmt(self):

        localctx = OOBasicParser.RmdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_rmdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.match(OOBasicParser.RMDIR)
            self.state = 1263
            self.match(OOBasicParser.WS)
            self.state = 1264
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectCaseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(OOBasicParser.SELECT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def CASE(self):
            return self.getToken(OOBasicParser.CASE, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def END_SELECT(self):
            return self.getToken(OOBasicParser.END_SELECT, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def sC_Case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.SC_CaseContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.SC_CaseContext,i)


        def getRuleIndex(self):
            return OOBasicParser.RULE_selectCaseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectCaseStmt" ):
                listener.enterSelectCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectCaseStmt" ):
                listener.exitSelectCaseStmt(self)




    def selectCaseStmt(self):

        localctx = OOBasicParser.SelectCaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_selectCaseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(OOBasicParser.SELECT)
            self.state = 1267
            self.match(OOBasicParser.WS)
            self.state = 1268
            self.match(OOBasicParser.CASE)
            self.state = 1269
            self.match(OOBasicParser.WS)
            self.state = 1270
            self.valueStmt(0)
            self.state = 1272 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1271
                self.match(OOBasicParser.NEWLINE)
                self.state = 1274 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OOBasicParser.CASE or _la==OOBasicParser.COMMENT:
                self.state = 1276
                self.sC_Case()
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1282
                self.match(OOBasicParser.WS)


            self.state = 1285
            self.match(OOBasicParser.END_SELECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SC_CaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(OOBasicParser.CASE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def sC_Cond(self):
            return self.getTypedRuleContext(OOBasicParser.SC_CondContext,0)


        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def COLON(self):
            return self.getToken(OOBasicParser.COLON, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def COMMENT(self):
            return self.getToken(OOBasicParser.COMMENT, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_sC_Case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSC_Case" ):
                listener.enterSC_Case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSC_Case" ):
                listener.exitSC_Case(self)




    def sC_Case(self):

        localctx = OOBasicParser.SC_CaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_sC_Case)
        self._la = 0 # Token type
        try:
            self.state = 1326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OOBasicParser.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1287
                self.match(OOBasicParser.CASE)
                self.state = 1288
                self.match(OOBasicParser.WS)
                self.state = 1289
                self.sC_Cond()
                self.state = 1291
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1290
                    self.match(OOBasicParser.WS)


                self.state = 1307
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.COLON:
                        self.state = 1293
                        self.match(OOBasicParser.COLON)


                    self.state = 1299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==OOBasicParser.NEWLINE:
                        self.state = 1296
                        self.match(OOBasicParser.NEWLINE)
                        self.state = 1301
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1303 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1302
                        self.match(OOBasicParser.NEWLINE)
                        self.state = 1305 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==OOBasicParser.NEWLINE):
                            break

                    pass


                self.state = 1318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1310
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                    if la_ == 1:
                        self.state = 1309
                        self.match(OOBasicParser.WS)


                    self.state = 1312
                    self.block()
                    self.state = 1314 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1313
                        self.match(OOBasicParser.NEWLINE)
                        self.state = 1316 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==OOBasicParser.NEWLINE):
                            break



                pass
            elif token in [OOBasicParser.COMMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1320
                self.match(OOBasicParser.COMMENT)
                self.state = 1322 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1321
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 1324 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SC_CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OOBasicParser.RULE_sC_Cond

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CaseCondExprContext(SC_CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.SC_CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sC_CondExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.SC_CondExprContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.SC_CondExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondExpr" ):
                listener.enterCaseCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondExpr" ):
                listener.exitCaseCondExpr(self)


    class CaseCondElseContext(SC_CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.SC_CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(OOBasicParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondElse" ):
                listener.enterCaseCondElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondElse" ):
                listener.exitCaseCondElse(self)



    def sC_Cond(self):

        localctx = OOBasicParser.SC_CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_sC_Cond)
        self._la = 0 # Token type
        try:
            self.state = 1343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                localctx = OOBasicParser.CaseCondElseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1328
                self.match(OOBasicParser.ELSE)
                pass

            elif la_ == 2:
                localctx = OOBasicParser.CaseCondExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1329
                self.sC_CondExpr()
                self.state = 1340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1331
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1330
                            self.match(OOBasicParser.WS)


                        self.state = 1333
                        self.match(OOBasicParser.COMMA)
                        self.state = 1335
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                        if la_ == 1:
                            self.state = 1334
                            self.match(OOBasicParser.WS)


                        self.state = 1337
                        self.sC_CondExpr() 
                    self.state = 1342
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SC_CondExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OOBasicParser.RULE_sC_CondExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CaseCondExprValueContext(SC_CondExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.SC_CondExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondExprValue" ):
                listener.enterCaseCondExprValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondExprValue" ):
                listener.exitCaseCondExprValue(self)


    class CaseCondExprToContext(SC_CondExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.SC_CondExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)
        def TO(self):
            return self.getToken(OOBasicParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondExprTo" ):
                listener.enterCaseCondExprTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondExprTo" ):
                listener.exitCaseCondExprTo(self)



    def sC_CondExpr(self):

        localctx = OOBasicParser.SC_CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_sC_CondExpr)
        try:
            self.state = 1352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                localctx = OOBasicParser.CaseCondExprValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1345
                self.valueStmt(0)
                pass

            elif la_ == 2:
                localctx = OOBasicParser.CaseCondExprToContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1346
                self.valueStmt(0)
                self.state = 1347
                self.match(OOBasicParser.WS)
                self.state = 1348
                self.match(OOBasicParser.TO)
                self.state = 1349
                self.match(OOBasicParser.WS)
                self.state = 1350
                self.valueStmt(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(OOBasicParser.SET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(OOBasicParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_setStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStmt" ):
                listener.enterSetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStmt" ):
                listener.exitSetStmt(self)




    def setStmt(self):

        localctx = OOBasicParser.SetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_setStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.match(OOBasicParser.SET)
            self.state = 1355
            self.match(OOBasicParser.WS)
            self.state = 1356
            self.implicitCallStmt_InStmt()
            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1357
                self.match(OOBasicParser.WS)


            self.state = 1360
            self.match(OOBasicParser.EQ)
            self.state = 1362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1361
                self.match(OOBasicParser.WS)


            self.state = 1364
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(OOBasicParser.STOP, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_stopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopStmt" ):
                listener.enterStopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopStmt" ):
                listener.exitStopStmt(self)




    def stopStmt(self):

        localctx = OOBasicParser.StopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_stopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(OOBasicParser.STOP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(OOBasicParser.SUB, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def END_SUB(self):
            return self.getToken(OOBasicParser.END_SUB, 0)

        def visibility(self):
            return self.getTypedRuleContext(OOBasicParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(OOBasicParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(OOBasicParser.ArgListContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_subStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubStmt" ):
                listener.enterSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubStmt" ):
                listener.exitSubStmt(self)




    def subStmt(self):

        localctx = OOBasicParser.SubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_subStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (OOBasicParser.GLOBAL - 58)) | (1 << (OOBasicParser.PRIVATE - 58)) | (1 << (OOBasicParser.PUBLIC - 58)))) != 0):
                self.state = 1368
                self.visibility()
                self.state = 1369
                self.match(OOBasicParser.WS)


            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.STATIC:
                self.state = 1373
                self.match(OOBasicParser.STATIC)
                self.state = 1374
                self.match(OOBasicParser.WS)


            self.state = 1377
            self.match(OOBasicParser.SUB)
            self.state = 1378
            self.match(OOBasicParser.WS)
            self.state = 1379
            self.ambiguousIdentifier()
            self.state = 1384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.LPAREN or _la==OOBasicParser.WS:
                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1380
                    self.match(OOBasicParser.WS)


                self.state = 1383
                self.argList()


            self.state = 1387 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1386
                self.match(OOBasicParser.NEWLINE)
                self.state = 1389 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 1397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.EXIT_DO) | (1 << OOBasicParser.EXIT_FOR) | (1 << OOBasicParser.EXIT_FUNCTION) | (1 << OOBasicParser.EXIT_SUB) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.LINE_INPUT - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.ON_ERROR - 64)) | (1 << (OOBasicParser.ON_LOCAL_ERROR - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                self.state = 1391
                self.block()
                self.state = 1393 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1392
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 1395 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break



            self.state = 1399
            self.match(OOBasicParser.END_SUB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(OOBasicParser.TIME, 0)

        def EQ(self):
            return self.getToken(OOBasicParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_timeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeStmt" ):
                listener.enterTimeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeStmt" ):
                listener.exitTimeStmt(self)




    def timeStmt(self):

        localctx = OOBasicParser.TimeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_timeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(OOBasicParser.TIME)
            self.state = 1403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1402
                self.match(OOBasicParser.WS)


            self.state = 1405
            self.match(OOBasicParser.EQ)
            self.state = 1407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 1406
                self.match(OOBasicParser.WS)


            self.state = 1409
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(OOBasicParser.TYPE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def END_TYPE(self):
            return self.getToken(OOBasicParser.END_TYPE, 0)

        def visibility(self):
            return self.getTypedRuleContext(OOBasicParser.VisibilityContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def typeStmt_Element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.TypeStmt_ElementContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.TypeStmt_ElementContext,i)


        def getRuleIndex(self):
            return OOBasicParser.RULE_typeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStmt" ):
                listener.enterTypeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStmt" ):
                listener.exitTypeStmt(self)




    def typeStmt(self):

        localctx = OOBasicParser.TypeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_typeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (OOBasicParser.GLOBAL - 58)) | (1 << (OOBasicParser.PRIVATE - 58)) | (1 << (OOBasicParser.PUBLIC - 58)))) != 0):
                self.state = 1411
                self.visibility()
                self.state = 1412
                self.match(OOBasicParser.WS)


            self.state = 1416
            self.match(OOBasicParser.TYPE)
            self.state = 1417
            self.match(OOBasicParser.WS)
            self.state = 1418
            self.ambiguousIdentifier()
            self.state = 1420 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1419
                self.match(OOBasicParser.NEWLINE)
                self.state = 1422 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 1427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)))) != 0):
                self.state = 1424
                self.typeStmt_Element()
                self.state = 1429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1430
            self.match(OOBasicParser.END_TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStmt_ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(OOBasicParser.AsTypeClauseContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def subscripts(self):
            return self.getTypedRuleContext(OOBasicParser.SubscriptsContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_typeStmt_Element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStmt_Element" ):
                listener.enterTypeStmt_Element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStmt_Element" ):
                listener.exitTypeStmt_Element(self)




    def typeStmt_Element(self):

        localctx = OOBasicParser.TypeStmt_ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_typeStmt_Element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.ambiguousIdentifier()
            self.state = 1447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1433
                    self.match(OOBasicParser.WS)


                self.state = 1436
                self.match(OOBasicParser.LPAREN)
                self.state = 1441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1438
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                    if la_ == 1:
                        self.state = 1437
                        self.match(OOBasicParser.WS)


                    self.state = 1440
                    self.subscripts()


                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1443
                    self.match(OOBasicParser.WS)


                self.state = 1446
                self.match(OOBasicParser.RPAREN)


            self.state = 1451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1449
                self.match(OOBasicParser.WS)
                self.state = 1450
                self.asTypeClause()


            self.state = 1454 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1453
                self.match(OOBasicParser.NEWLINE)
                self.state = 1456 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OOBasicParser.RULE_valueStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class VsStructContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)
        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsStruct" ):
                listener.enterVsStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsStruct" ):
                listener.exitVsStruct(self)


    class VsMsgBoxContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def msgBox(self):
            return self.getTypedRuleContext(OOBasicParser.MsgBoxContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMsgBox" ):
                listener.enterVsMsgBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMsgBox" ):
                listener.exitVsMsgBox(self)


    class VsAddContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def PLUS(self):
            return self.getToken(OOBasicParser.PLUS, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAdd" ):
                listener.enterVsAdd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAdd" ):
                listener.exitVsAdd(self)


    class VsLtContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def LT(self):
            return self.getToken(OOBasicParser.LT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLt" ):
                listener.enterVsLt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLt" ):
                listener.exitVsLt(self)


    class VsNewContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(OOBasicParser.NEW, 0)
        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNew" ):
                listener.enterVsNew(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNew" ):
                listener.exitVsNew(self)


    class VsMultContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def MULT(self):
            return self.getToken(OOBasicParser.MULT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMult" ):
                listener.enterVsMult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMult" ):
                listener.exitVsMult(self)


    class VsNegationContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(OOBasicParser.MINUS, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNegation" ):
                listener.enterVsNegation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNegation" ):
                listener.exitVsNegation(self)


    class VsAssignContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ImplicitCallStmt_InStmtContext,0)

        def ASSIGN(self):
            return self.getToken(OOBasicParser.ASSIGN, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAssign" ):
                listener.enterVsAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAssign" ):
                listener.exitVsAssign(self)


    class VsDivContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def DIV(self):
            return self.getToken(OOBasicParser.DIV, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsDiv" ):
                listener.enterVsDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsDiv" ):
                listener.exitVsDiv(self)


    class VsPlusContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PLUS(self):
            return self.getToken(OOBasicParser.PLUS, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsPlus" ):
                listener.enterVsPlus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsPlus" ):
                listener.exitVsPlus(self)


    class VsNotContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(OOBasicParser.NOT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)
        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)

        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNot" ):
                listener.enterVsNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNot" ):
                listener.exitVsNot(self)


    class VsGeqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def GEQ(self):
            return self.getToken(OOBasicParser.GEQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsGeq" ):
                listener.enterVsGeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsGeq" ):
                listener.exitVsGeq(self)


    class VsICSContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ImplicitCallStmt_InStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsICS" ):
                listener.enterVsICS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsICS" ):
                listener.exitVsICS(self)


    class VsNeqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def NEQ(self):
            return self.getToken(OOBasicParser.NEQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNeq" ):
                listener.enterVsNeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNeq" ):
                listener.exitVsNeq(self)


    class VsXorContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def XOR(self):
            return self.getToken(OOBasicParser.XOR, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsXor" ):
                listener.enterVsXor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsXor" ):
                listener.exitVsXor(self)


    class VsAndContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def AND(self):
            return self.getToken(OOBasicParser.AND, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAnd" ):
                listener.enterVsAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAnd" ):
                listener.exitVsAnd(self)


    class VsPowContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def POW(self):
            return self.getToken(OOBasicParser.POW, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsPow" ):
                listener.enterVsPow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsPow" ):
                listener.exitVsPow(self)


    class VsLeqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def LEQ(self):
            return self.getToken(OOBasicParser.LEQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLeq" ):
                listener.enterVsLeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLeq" ):
                listener.exitVsLeq(self)


    class VsModContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def MOD(self):
            return self.getToken(OOBasicParser.MOD, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMod" ):
                listener.enterVsMod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMod" ):
                listener.exitVsMod(self)


    class VsAmpContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def AMPERSAND(self):
            return self.getToken(OOBasicParser.AMPERSAND, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAmp" ):
                listener.enterVsAmp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAmp" ):
                listener.exitVsAmp(self)


    class VsOrContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def OR(self):
            return self.getToken(OOBasicParser.OR, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsOr" ):
                listener.enterVsOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsOr" ):
                listener.exitVsOr(self)


    class VsMinusContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def MINUS(self):
            return self.getToken(OOBasicParser.MINUS, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMinus" ):
                listener.enterVsMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMinus" ):
                listener.exitVsMinus(self)


    class VsLiteralContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(OOBasicParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLiteral" ):
                listener.enterVsLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLiteral" ):
                listener.exitVsLiteral(self)


    class VsEqvContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def EQV(self):
            return self.getToken(OOBasicParser.EQV, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsEqv" ):
                listener.enterVsEqv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsEqv" ):
                listener.exitVsEqv(self)


    class VsImpContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def IMP(self):
            return self.getToken(OOBasicParser.IMP, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsImp" ):
                listener.enterVsImp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsImp" ):
                listener.exitVsImp(self)


    class VsGtContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def GT(self):
            return self.getToken(OOBasicParser.GT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsGt" ):
                listener.enterVsGt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsGt" ):
                listener.exitVsGt(self)


    class VsEqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)

        def EQ(self):
            return self.getToken(OOBasicParser.EQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsEq" ):
                listener.enterVsEq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsEq" ):
                listener.exitVsEq(self)


    class VsMidContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def midStmt(self):
            return self.getTypedRuleContext(OOBasicParser.MidStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMid" ):
                listener.enterVsMid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMid" ):
                listener.exitVsMid(self)



    def valueStmt(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OOBasicParser.ValueStmtContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 142
        self.enterRecursionRule(localctx, 142, self.RULE_valueStmt, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                localctx = OOBasicParser.VsLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1459
                self.literal()
                pass

            elif la_ == 2:
                localctx = OOBasicParser.VsStructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1460
                self.match(OOBasicParser.LPAREN)
                self.state = 1462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                if la_ == 1:
                    self.state = 1461
                    self.match(OOBasicParser.WS)


                self.state = 1464
                self.valueStmt(0)
                self.state = 1475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1466
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1465
                            self.match(OOBasicParser.WS)


                        self.state = 1468
                        self.match(OOBasicParser.COMMA)
                        self.state = 1470
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                        if la_ == 1:
                            self.state = 1469
                            self.match(OOBasicParser.WS)


                        self.state = 1472
                        self.valueStmt(0) 
                    self.state = 1477
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1478
                    self.match(OOBasicParser.WS)


                self.state = 1481
                self.match(OOBasicParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = OOBasicParser.VsNewContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1483
                self.match(OOBasicParser.NEW)
                self.state = 1484
                self.match(OOBasicParser.WS)
                self.state = 1485
                self.valueStmt(26)
                pass

            elif la_ == 4:
                localctx = OOBasicParser.VsAssignContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1486
                self.implicitCallStmt_InStmt()
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1487
                    self.match(OOBasicParser.WS)


                self.state = 1490
                self.match(OOBasicParser.ASSIGN)
                self.state = 1492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 1491
                    self.match(OOBasicParser.WS)


                self.state = 1494
                self.valueStmt(25)
                pass

            elif la_ == 5:
                localctx = OOBasicParser.VsNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1496
                self.match(OOBasicParser.MINUS)
                self.state = 1498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 1497
                    self.match(OOBasicParser.WS)


                self.state = 1500
                self.valueStmt(23)
                pass

            elif la_ == 6:
                localctx = OOBasicParser.VsPlusContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1501
                self.match(OOBasicParser.PLUS)
                self.state = 1503
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1502
                    self.match(OOBasicParser.WS)


                self.state = 1505
                self.valueStmt(22)
                pass

            elif la_ == 7:
                localctx = OOBasicParser.VsNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1506
                self.match(OOBasicParser.NOT)
                self.state = 1519
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [OOBasicParser.WS]:
                    self.state = 1507
                    self.match(OOBasicParser.WS)
                    self.state = 1508
                    self.valueStmt(0)
                    pass
                elif token in [OOBasicParser.LPAREN]:
                    self.state = 1509
                    self.match(OOBasicParser.LPAREN)
                    self.state = 1511
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                    if la_ == 1:
                        self.state = 1510
                        self.match(OOBasicParser.WS)


                    self.state = 1513
                    self.valueStmt(0)
                    self.state = 1515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1514
                        self.match(OOBasicParser.WS)


                    self.state = 1517
                    self.match(OOBasicParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                localctx = OOBasicParser.VsICSContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1521
                self.implicitCallStmt_InStmt()
                pass

            elif la_ == 9:
                localctx = OOBasicParser.VsMidContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1522
                self.midStmt()
                pass

            elif la_ == 10:
                localctx = OOBasicParser.VsMsgBoxContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1523
                self.msgBox()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1690
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1688
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                    if la_ == 1:
                        localctx = OOBasicParser.VsPowContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1526
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1528
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1527
                            self.match(OOBasicParser.WS)


                        self.state = 1530
                        self.match(OOBasicParser.POW)
                        self.state = 1532
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                        if la_ == 1:
                            self.state = 1531
                            self.match(OOBasicParser.WS)


                        self.state = 1534
                        self.valueStmt(25)
                        pass

                    elif la_ == 2:
                        localctx = OOBasicParser.VsDivContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1535
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1537
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1536
                            self.match(OOBasicParser.WS)


                        self.state = 1539
                        self.match(OOBasicParser.DIV)
                        self.state = 1541
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                        if la_ == 1:
                            self.state = 1540
                            self.match(OOBasicParser.WS)


                        self.state = 1543
                        self.valueStmt(22)
                        pass

                    elif la_ == 3:
                        localctx = OOBasicParser.VsMultContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1544
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1546
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1545
                            self.match(OOBasicParser.WS)


                        self.state = 1548
                        self.match(OOBasicParser.MULT)
                        self.state = 1550
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                        if la_ == 1:
                            self.state = 1549
                            self.match(OOBasicParser.WS)


                        self.state = 1552
                        self.valueStmt(21)
                        pass

                    elif la_ == 4:
                        localctx = OOBasicParser.VsModContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1553
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1555
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1554
                            self.match(OOBasicParser.WS)


                        self.state = 1557
                        self.match(OOBasicParser.MOD)
                        self.state = 1559
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                        if la_ == 1:
                            self.state = 1558
                            self.match(OOBasicParser.WS)


                        self.state = 1561
                        self.valueStmt(20)
                        pass

                    elif la_ == 5:
                        localctx = OOBasicParser.VsAddContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1562
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1564
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1563
                            self.match(OOBasicParser.WS)


                        self.state = 1566
                        self.match(OOBasicParser.PLUS)
                        self.state = 1568
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                        if la_ == 1:
                            self.state = 1567
                            self.match(OOBasicParser.WS)


                        self.state = 1570
                        self.valueStmt(19)
                        pass

                    elif la_ == 6:
                        localctx = OOBasicParser.VsMinusContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1571
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1573
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1572
                            self.match(OOBasicParser.WS)


                        self.state = 1575
                        self.match(OOBasicParser.MINUS)
                        self.state = 1577
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
                        if la_ == 1:
                            self.state = 1576
                            self.match(OOBasicParser.WS)


                        self.state = 1579
                        self.valueStmt(18)
                        pass

                    elif la_ == 7:
                        localctx = OOBasicParser.VsAmpContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1580
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1582
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1581
                            self.match(OOBasicParser.WS)


                        self.state = 1584
                        self.match(OOBasicParser.AMPERSAND)
                        self.state = 1586
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                        if la_ == 1:
                            self.state = 1585
                            self.match(OOBasicParser.WS)


                        self.state = 1588
                        self.valueStmt(17)
                        pass

                    elif la_ == 8:
                        localctx = OOBasicParser.VsEqContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1589
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1590
                            self.match(OOBasicParser.WS)


                        self.state = 1593
                        self.match(OOBasicParser.EQ)
                        self.state = 1595
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                        if la_ == 1:
                            self.state = 1594
                            self.match(OOBasicParser.WS)


                        self.state = 1597
                        self.valueStmt(16)
                        pass

                    elif la_ == 9:
                        localctx = OOBasicParser.VsNeqContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1598
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1600
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1599
                            self.match(OOBasicParser.WS)


                        self.state = 1602
                        self.match(OOBasicParser.NEQ)
                        self.state = 1604
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                        if la_ == 1:
                            self.state = 1603
                            self.match(OOBasicParser.WS)


                        self.state = 1606
                        self.valueStmt(15)
                        pass

                    elif la_ == 10:
                        localctx = OOBasicParser.VsLtContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1607
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1609
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1608
                            self.match(OOBasicParser.WS)


                        self.state = 1611
                        self.match(OOBasicParser.LT)
                        self.state = 1613
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                        if la_ == 1:
                            self.state = 1612
                            self.match(OOBasicParser.WS)


                        self.state = 1615
                        self.valueStmt(14)
                        pass

                    elif la_ == 11:
                        localctx = OOBasicParser.VsGtContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1616
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1618
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1617
                            self.match(OOBasicParser.WS)


                        self.state = 1620
                        self.match(OOBasicParser.GT)
                        self.state = 1622
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                        if la_ == 1:
                            self.state = 1621
                            self.match(OOBasicParser.WS)


                        self.state = 1624
                        self.valueStmt(13)
                        pass

                    elif la_ == 12:
                        localctx = OOBasicParser.VsLeqContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1625
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1627
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1626
                            self.match(OOBasicParser.WS)


                        self.state = 1629
                        self.match(OOBasicParser.LEQ)
                        self.state = 1631
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                        if la_ == 1:
                            self.state = 1630
                            self.match(OOBasicParser.WS)


                        self.state = 1633
                        self.valueStmt(12)
                        pass

                    elif la_ == 13:
                        localctx = OOBasicParser.VsGeqContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1634
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1636
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1635
                            self.match(OOBasicParser.WS)


                        self.state = 1638
                        self.match(OOBasicParser.GEQ)
                        self.state = 1640
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                        if la_ == 1:
                            self.state = 1639
                            self.match(OOBasicParser.WS)


                        self.state = 1642
                        self.valueStmt(11)
                        pass

                    elif la_ == 14:
                        localctx = OOBasicParser.VsAndContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1643
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1645
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1644
                            self.match(OOBasicParser.WS)


                        self.state = 1647
                        self.match(OOBasicParser.AND)
                        self.state = 1649
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                        if la_ == 1:
                            self.state = 1648
                            self.match(OOBasicParser.WS)


                        self.state = 1651
                        self.valueStmt(9)
                        pass

                    elif la_ == 15:
                        localctx = OOBasicParser.VsOrContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1652
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1654
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1653
                            self.match(OOBasicParser.WS)


                        self.state = 1656
                        self.match(OOBasicParser.OR)
                        self.state = 1658
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                        if la_ == 1:
                            self.state = 1657
                            self.match(OOBasicParser.WS)


                        self.state = 1660
                        self.valueStmt(8)
                        pass

                    elif la_ == 16:
                        localctx = OOBasicParser.VsXorContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1661
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1663
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1662
                            self.match(OOBasicParser.WS)


                        self.state = 1665
                        self.match(OOBasicParser.XOR)
                        self.state = 1667
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                        if la_ == 1:
                            self.state = 1666
                            self.match(OOBasicParser.WS)


                        self.state = 1669
                        self.valueStmt(7)
                        pass

                    elif la_ == 17:
                        localctx = OOBasicParser.VsEqvContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1670
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1672
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1671
                            self.match(OOBasicParser.WS)


                        self.state = 1674
                        self.match(OOBasicParser.EQV)
                        self.state = 1676
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
                        if la_ == 1:
                            self.state = 1675
                            self.match(OOBasicParser.WS)


                        self.state = 1678
                        self.valueStmt(6)
                        pass

                    elif la_ == 18:
                        localctx = OOBasicParser.VsImpContext(self, OOBasicParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1679
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1681
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1680
                            self.match(OOBasicParser.WS)


                        self.state = 1683
                        self.match(OOBasicParser.IMP)
                        self.state = 1685
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
                        if la_ == 1:
                            self.state = 1684
                            self.match(OOBasicParser.WS)


                        self.state = 1687
                        self.valueStmt(5)
                        pass

             
                self.state = 1692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VariableStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def variableListStmt(self):
            return self.getTypedRuleContext(OOBasicParser.VariableListStmtContext,0)


        def DIM(self):
            return self.getToken(OOBasicParser.DIM, 0)

        def STATIC(self):
            return self.getToken(OOBasicParser.STATIC, 0)

        def visibility(self):
            return self.getTypedRuleContext(OOBasicParser.VisibilityContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_variableStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableStmt" ):
                listener.enterVariableStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableStmt" ):
                listener.exitVariableStmt(self)




    def variableStmt(self):

        localctx = OOBasicParser.VariableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_variableStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OOBasicParser.DIM]:
                self.state = 1693
                self.match(OOBasicParser.DIM)
                pass
            elif token in [OOBasicParser.STATIC]:
                self.state = 1694
                self.match(OOBasicParser.STATIC)
                pass
            elif token in [OOBasicParser.GLOBAL, OOBasicParser.PRIVATE, OOBasicParser.PUBLIC]:
                self.state = 1695
                self.visibility()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1698
            self.match(OOBasicParser.WS)
            self.state = 1699
            self.variableListStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableListStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.VariableSubStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.VariableSubStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_variableListStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableListStmt" ):
                listener.enterVariableListStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableListStmt" ):
                listener.exitVariableListStmt(self)




    def variableListStmt(self):

        localctx = OOBasicParser.VariableListStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_variableListStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701
            self.variableSubStmt()
            self.state = 1712
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,284,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1702
                        self.match(OOBasicParser.WS)


                    self.state = 1705
                    self.match(OOBasicParser.COMMA)
                    self.state = 1707
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1706
                        self.match(OOBasicParser.WS)


                    self.state = 1709
                    self.variableSubStmt() 
                self.state = 1714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,284,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableSubStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(OOBasicParser.TypeHintContext,0)


        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(OOBasicParser.AsTypeClauseContext,0)


        def subscripts(self):
            return self.getTypedRuleContext(OOBasicParser.SubscriptsContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_variableSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSubStmt" ):
                listener.enterVariableSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSubStmt" ):
                listener.exitVariableSubStmt(self)




    def variableSubStmt(self):

        localctx = OOBasicParser.VariableSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_variableSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            self.ambiguousIdentifier()
            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                self.state = 1716
                self.typeHint()


            self.state = 1736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1719
                    self.match(OOBasicParser.WS)


                self.state = 1722
                self.match(OOBasicParser.LPAREN)
                self.state = 1724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                if la_ == 1:
                    self.state = 1723
                    self.match(OOBasicParser.WS)


                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.LPAREN - 128)) | (1 << (OOBasicParser.MINUS - 128)) | (1 << (OOBasicParser.PLUS - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.STRINGLITERAL - 128)) | (1 << (OOBasicParser.DATELITERAL - 128)) | (1 << (OOBasicParser.COLORLITERAL - 128)) | (1 << (OOBasicParser.INTEGERLITERAL - 128)) | (1 << (OOBasicParser.DOUBLELITERAL - 128)) | (1 << (OOBasicParser.FILENUMBER - 128)) | (1 << (OOBasicParser.OCTALLITERAL - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                    self.state = 1726
                    self.subscripts()
                    self.state = 1728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1727
                        self.match(OOBasicParser.WS)




                self.state = 1732
                self.match(OOBasicParser.RPAREN)
                self.state = 1734
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 1733
                    self.match(OOBasicParser.WS)




            self.state = 1740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 1738
                self.match(OOBasicParser.WS)
                self.state = 1739
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileWendStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(OOBasicParser.WHILE, 0)

        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def WEND(self):
            return self.getToken(OOBasicParser.WEND, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.BlockContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.BlockContext,i)


        def getRuleIndex(self):
            return OOBasicParser.RULE_whileWendStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileWendStmt" ):
                listener.enterWhileWendStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileWendStmt" ):
                listener.exitWhileWendStmt(self)




    def whileWendStmt(self):

        localctx = OOBasicParser.WhileWendStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_whileWendStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1742
            self.match(OOBasicParser.WHILE)
            self.state = 1743
            self.match(OOBasicParser.WS)
            self.state = 1744
            self.valueStmt(0)
            self.state = 1746 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1745
                    self.match(OOBasicParser.NEWLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 1748 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,293,self._ctx)

            self.state = 1753
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1750
                    self.block() 
                self.state = 1755
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

            self.state = 1759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==OOBasicParser.NEWLINE:
                self.state = 1756
                self.match(OOBasicParser.NEWLINE)
                self.state = 1761
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1762
            self.match(OOBasicParser.WEND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WidthStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WIDTH(self):
            return self.getToken(OOBasicParser.WIDTH, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(OOBasicParser.COMMA, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_widthStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidthStmt" ):
                listener.enterWidthStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidthStmt" ):
                listener.exitWidthStmt(self)




    def widthStmt(self):

        localctx = OOBasicParser.WidthStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_widthStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1764
            self.match(OOBasicParser.WIDTH)
            self.state = 1765
            self.match(OOBasicParser.WS)
            self.state = 1766
            self.valueStmt(0)
            self.state = 1768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1767
                self.match(OOBasicParser.WS)


            self.state = 1770
            self.match(OOBasicParser.COMMA)
            self.state = 1772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.state = 1771
                self.match(OOBasicParser.WS)


            self.state = 1774
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(OOBasicParser.WITH, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ImplicitCallStmt_InStmtContext,0)


        def END_WITH(self):
            return self.getToken(OOBasicParser.END_WITH, 0)

        def NEW(self):
            return self.getToken(OOBasicParser.NEW, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.NEWLINE)
            else:
                return self.getToken(OOBasicParser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(OOBasicParser.BlockContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_withStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStmt" ):
                listener.enterWithStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStmt" ):
                listener.exitWithStmt(self)




    def withStmt(self):

        localctx = OOBasicParser.WithStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_withStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1776
            self.match(OOBasicParser.WITH)
            self.state = 1777
            self.match(OOBasicParser.WS)
            self.state = 1780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 1778
                self.match(OOBasicParser.NEW)
                self.state = 1779
                self.match(OOBasicParser.WS)


            self.state = 1782
            self.implicitCallStmt_InStmt()
            self.state = 1784 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1783
                self.match(OOBasicParser.NEWLINE)
                self.state = 1786 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==OOBasicParser.NEWLINE):
                    break

            self.state = 1794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.EXIT_DO) | (1 << OOBasicParser.EXIT_FOR) | (1 << OOBasicParser.EXIT_FUNCTION) | (1 << OOBasicParser.EXIT_SUB) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.LINE_INPUT - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.ON_ERROR - 64)) | (1 << (OOBasicParser.ON_LOCAL_ERROR - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                self.state = 1788
                self.block()
                self.state = 1790 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1789
                    self.match(OOBasicParser.NEWLINE)
                    self.state = 1792 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==OOBasicParser.NEWLINE):
                        break



            self.state = 1796
            self.match(OOBasicParser.END_WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(OOBasicParser.WRITE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def COMMA(self):
            return self.getToken(OOBasicParser.COMMA, 0)

        def outputList(self):
            return self.getTypedRuleContext(OOBasicParser.OutputListContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_writeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStmt" ):
                listener.enterWriteStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStmt" ):
                listener.exitWriteStmt(self)




    def writeStmt(self):

        localctx = OOBasicParser.WriteStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_writeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1798
            self.match(OOBasicParser.WRITE)
            self.state = 1799
            self.match(OOBasicParser.WS)
            self.state = 1800
            self.valueStmt(0)
            self.state = 1802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1801
                self.match(OOBasicParser.WS)


            self.state = 1804
            self.match(OOBasicParser.COMMA)
            self.state = 1809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 1806
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 1805
                    self.match(OOBasicParser.WS)


                self.state = 1808
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitCallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eCS_ProcedureCall(self):
            return self.getTypedRuleContext(OOBasicParser.ECS_ProcedureCallContext,0)


        def eCS_MemberProcedureCall(self):
            return self.getTypedRuleContext(OOBasicParser.ECS_MemberProcedureCallContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_explicitCallStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitCallStmt" ):
                listener.enterExplicitCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitCallStmt" ):
                listener.exitExplicitCallStmt(self)




    def explicitCallStmt(self):

        localctx = OOBasicParser.ExplicitCallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_explicitCallStmt)
        try:
            self.state = 1813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1811
                self.eCS_ProcedureCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1812
                self.eCS_MemberProcedureCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ECS_ProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(OOBasicParser.CALL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(OOBasicParser.TypeHintContext,0)


        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(OOBasicParser.ArgsCallContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_eCS_ProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterECS_ProcedureCall" ):
                listener.enterECS_ProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitECS_ProcedureCall" ):
                listener.exitECS_ProcedureCall(self)




    def eCS_ProcedureCall(self):

        localctx = OOBasicParser.ECS_ProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_eCS_ProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1815
            self.match(OOBasicParser.CALL)
            self.state = 1816
            self.match(OOBasicParser.WS)
            self.state = 1817
            self.ambiguousIdentifier()
            self.state = 1819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                self.state = 1818
                self.typeHint()


            self.state = 1835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1821
                    self.match(OOBasicParser.WS)


                self.state = 1824
                self.match(OOBasicParser.LPAREN)
                self.state = 1826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                if la_ == 1:
                    self.state = 1825
                    self.match(OOBasicParser.WS)


                self.state = 1832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.COMMA - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.LPAREN - 128)) | (1 << (OOBasicParser.MINUS - 128)) | (1 << (OOBasicParser.PLUS - 128)) | (1 << (OOBasicParser.SEMICOLON - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.STRINGLITERAL - 128)) | (1 << (OOBasicParser.DATELITERAL - 128)) | (1 << (OOBasicParser.COLORLITERAL - 128)) | (1 << (OOBasicParser.INTEGERLITERAL - 128)) | (1 << (OOBasicParser.DOUBLELITERAL - 128)) | (1 << (OOBasicParser.FILENUMBER - 128)) | (1 << (OOBasicParser.OCTALLITERAL - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                    self.state = 1828
                    self.argsCall()
                    self.state = 1830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1829
                        self.match(OOBasicParser.WS)




                self.state = 1834
                self.match(OOBasicParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ECS_MemberProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(OOBasicParser.CALL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def DOT(self):
            return self.getToken(OOBasicParser.DOT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ImplicitCallStmt_InStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(OOBasicParser.TypeHintContext,0)


        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(OOBasicParser.ArgsCallContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_eCS_MemberProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterECS_MemberProcedureCall" ):
                listener.enterECS_MemberProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitECS_MemberProcedureCall" ):
                listener.exitECS_MemberProcedureCall(self)




    def eCS_MemberProcedureCall(self):

        localctx = OOBasicParser.ECS_MemberProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_eCS_MemberProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            self.match(OOBasicParser.CALL)
            self.state = 1838
            self.match(OOBasicParser.WS)
            self.state = 1840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.state = 1839
                self.implicitCallStmt_InStmt()


            self.state = 1842
            self.match(OOBasicParser.DOT)
            self.state = 1844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1843
                self.match(OOBasicParser.WS)


            self.state = 1846
            self.ambiguousIdentifier()
            self.state = 1848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                self.state = 1847
                self.typeHint()


            self.state = 1864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.state = 1851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1850
                    self.match(OOBasicParser.WS)


                self.state = 1853
                self.match(OOBasicParser.LPAREN)
                self.state = 1855
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
                if la_ == 1:
                    self.state = 1854
                    self.match(OOBasicParser.WS)


                self.state = 1861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.COMMA - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.LPAREN - 128)) | (1 << (OOBasicParser.MINUS - 128)) | (1 << (OOBasicParser.PLUS - 128)) | (1 << (OOBasicParser.SEMICOLON - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.STRINGLITERAL - 128)) | (1 << (OOBasicParser.DATELITERAL - 128)) | (1 << (OOBasicParser.COLORLITERAL - 128)) | (1 << (OOBasicParser.INTEGERLITERAL - 128)) | (1 << (OOBasicParser.DOUBLELITERAL - 128)) | (1 << (OOBasicParser.FILENUMBER - 128)) | (1 << (OOBasicParser.OCTALLITERAL - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                    self.state = 1857
                    self.argsCall()
                    self.state = 1859
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1858
                        self.match(OOBasicParser.WS)




                self.state = 1863
                self.match(OOBasicParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MsgBoxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MSGBOX(self):
            return self.getToken(OOBasicParser.MSGBOX, 0)

        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(OOBasicParser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_msgBox

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMsgBox" ):
                listener.enterMsgBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMsgBox" ):
                listener.exitMsgBox(self)




    def msgBox(self):

        localctx = OOBasicParser.MsgBoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_msgBox)
        self._la = 0 # Token type
        try:
            self.state = 1883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1866
                self.match(OOBasicParser.MSGBOX)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1867
                    self.match(OOBasicParser.WS)


                self.state = 1870
                self.match(OOBasicParser.LPAREN)
                self.state = 1872
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
                if la_ == 1:
                    self.state = 1871
                    self.match(OOBasicParser.WS)


                self.state = 1874
                self.argsCall()
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 1875
                    self.match(OOBasicParser.WS)


                self.state = 1878
                self.match(OOBasicParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1880
                self.match(OOBasicParser.MSGBOX)
                self.state = 1881
                self.match(OOBasicParser.WS)
                self.state = 1882
                self.argsCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitCallStmt_InBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_B_ProcedureCall(self):
            return self.getTypedRuleContext(OOBasicParser.ICS_B_ProcedureCallContext,0)


        def iCS_B_MemberProcedureCall(self):
            return self.getTypedRuleContext(OOBasicParser.ICS_B_MemberProcedureCallContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_implicitCallStmt_InBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitCallStmt_InBlock" ):
                listener.enterImplicitCallStmt_InBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitCallStmt_InBlock" ):
                listener.exitImplicitCallStmt_InBlock(self)




    def implicitCallStmt_InBlock(self):

        localctx = OOBasicParser.ImplicitCallStmt_InBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_implicitCallStmt_InBlock)
        try:
            self.state = 1887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1885
                self.iCS_B_ProcedureCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1886
                self.iCS_B_MemberProcedureCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_B_ProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def certainIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.CertainIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(OOBasicParser.ArgsCallContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_iCS_B_ProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_B_ProcedureCall" ):
                listener.enterICS_B_ProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_B_ProcedureCall" ):
                listener.exitICS_B_ProcedureCall(self)




    def iCS_B_ProcedureCall(self):

        localctx = OOBasicParser.ICS_B_ProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_iCS_B_ProcedureCall)
        self._la = 0 # Token type
        try:
            self.state = 1916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1889
                self.certainIdentifier()
                self.state = 1904
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                if la_ == 1:
                    self.state = 1891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1890
                        self.match(OOBasicParser.WS)


                    self.state = 1893
                    self.match(OOBasicParser.LPAREN)
                    self.state = 1895
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
                    if la_ == 1:
                        self.state = 1894
                        self.match(OOBasicParser.WS)


                    self.state = 1901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.COMMA - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.LPAREN - 128)) | (1 << (OOBasicParser.MINUS - 128)) | (1 << (OOBasicParser.PLUS - 128)) | (1 << (OOBasicParser.SEMICOLON - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.STRINGLITERAL - 128)) | (1 << (OOBasicParser.DATELITERAL - 128)) | (1 << (OOBasicParser.COLORLITERAL - 128)) | (1 << (OOBasicParser.INTEGERLITERAL - 128)) | (1 << (OOBasicParser.DOUBLELITERAL - 128)) | (1 << (OOBasicParser.FILENUMBER - 128)) | (1 << (OOBasicParser.OCTALLITERAL - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                        self.state = 1897
                        self.argsCall()
                        self.state = 1899
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1898
                            self.match(OOBasicParser.WS)




                    self.state = 1903
                    self.match(OOBasicParser.RPAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1906
                self.certainIdentifier()
                self.state = 1908
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                if la_ == 1:
                    self.state = 1907
                    self.match(OOBasicParser.WS)


                self.state = 1914
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                if la_ == 1:
                    self.state = 1910
                    self.argsCall()
                    self.state = 1912
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                    if la_ == 1:
                        self.state = 1911
                        self.match(OOBasicParser.WS)




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_B_MemberProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(OOBasicParser.DOT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ImplicitCallStmt_InStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(OOBasicParser.TypeHintContext,0)


        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(OOBasicParser.ArgsCallContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_iCS_B_MemberProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_B_MemberProcedureCall" ):
                listener.enterICS_B_MemberProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_B_MemberProcedureCall" ):
                listener.exitICS_B_MemberProcedureCall(self)




    def iCS_B_MemberProcedureCall(self):

        localctx = OOBasicParser.ICS_B_MemberProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_iCS_B_MemberProcedureCall)
        self._la = 0 # Token type
        try:
            self.state = 1959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
                if la_ == 1:
                    self.state = 1918
                    self.implicitCallStmt_InStmt()


                self.state = 1921
                self.match(OOBasicParser.DOT)
                self.state = 1922
                self.ambiguousIdentifier()
                self.state = 1924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                    self.state = 1923
                    self.typeHint()


                self.state = 1940
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
                if la_ == 1:
                    self.state = 1927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 1926
                        self.match(OOBasicParser.WS)


                    self.state = 1929
                    self.match(OOBasicParser.LPAREN)
                    self.state = 1931
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
                    if la_ == 1:
                        self.state = 1930
                        self.match(OOBasicParser.WS)


                    self.state = 1937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.COMMA - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.LPAREN - 128)) | (1 << (OOBasicParser.MINUS - 128)) | (1 << (OOBasicParser.PLUS - 128)) | (1 << (OOBasicParser.SEMICOLON - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.STRINGLITERAL - 128)) | (1 << (OOBasicParser.DATELITERAL - 128)) | (1 << (OOBasicParser.COLORLITERAL - 128)) | (1 << (OOBasicParser.INTEGERLITERAL - 128)) | (1 << (OOBasicParser.DOUBLELITERAL - 128)) | (1 << (OOBasicParser.FILENUMBER - 128)) | (1 << (OOBasicParser.OCTALLITERAL - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                        self.state = 1933
                        self.argsCall()
                        self.state = 1935
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1934
                            self.match(OOBasicParser.WS)




                    self.state = 1939
                    self.match(OOBasicParser.RPAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                if la_ == 1:
                    self.state = 1942
                    self.implicitCallStmt_InStmt()


                self.state = 1945
                self.match(OOBasicParser.DOT)
                self.state = 1946
                self.ambiguousIdentifier()
                self.state = 1948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                    self.state = 1947
                    self.typeHint()


                self.state = 1951
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
                if la_ == 1:
                    self.state = 1950
                    self.match(OOBasicParser.WS)


                self.state = 1957
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
                if la_ == 1:
                    self.state = 1953
                    self.argsCall()
                    self.state = 1955
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                    if la_ == 1:
                        self.state = 1954
                        self.match(OOBasicParser.WS)




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplicitCallStmt_InStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_MembersCall(self):
            return self.getTypedRuleContext(OOBasicParser.ICS_S_MembersCallContext,0)


        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(OOBasicParser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(OOBasicParser.ICS_S_ProcedureOrArrayCallContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_implicitCallStmt_InStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitCallStmt_InStmt" ):
                listener.enterImplicitCallStmt_InStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitCallStmt_InStmt" ):
                listener.exitImplicitCallStmt_InStmt(self)




    def implicitCallStmt_InStmt(self):

        localctx = OOBasicParser.ImplicitCallStmt_InStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_implicitCallStmt_InStmt)
        try:
            self.state = 1964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1961
                self.iCS_S_MembersCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1962
                self.iCS_S_VariableOrProcedureCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1963
                self.iCS_S_ProcedureOrArrayCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_VariableOrProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(OOBasicParser.TypeHintContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_iCS_S_VariableOrProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_VariableOrProcedureCall" ):
                listener.enterICS_S_VariableOrProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_VariableOrProcedureCall" ):
                listener.exitICS_S_VariableOrProcedureCall(self)




    def iCS_S_VariableOrProcedureCall(self):

        localctx = OOBasicParser.ICS_S_VariableOrProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_iCS_S_VariableOrProcedureCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1966
            self.ambiguousIdentifier()
            self.state = 1968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.state = 1967
                self.typeHint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_ProcedureOrArrayCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OOBasicParser.RULE_iCS_S_ProcedureOrArrayCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IcsBaseTypeContext(ICS_S_ProcedureOrArrayCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ICS_S_ProcedureOrArrayCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def baseType(self):
            return self.getTypedRuleContext(OOBasicParser.BaseTypeContext,0)

        def helper_rule(self):
            return self.getTypedRuleContext(OOBasicParser.Helper_ruleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIcsBaseType" ):
                listener.enterIcsBaseType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIcsBaseType" ):
                listener.exitIcsBaseType(self)


    class IcsAmbiguousIdentifierContext(ICS_S_ProcedureOrArrayCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ICS_S_ProcedureOrArrayCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)

        def helper_rule(self):
            return self.getTypedRuleContext(OOBasicParser.Helper_ruleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIcsAmbiguousIdentifier" ):
                listener.enterIcsAmbiguousIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIcsAmbiguousIdentifier" ):
                listener.exitIcsAmbiguousIdentifier(self)


    class IcsNestedProcedureCallContext(ICS_S_ProcedureOrArrayCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OOBasicParser.ICS_S_ProcedureOrArrayCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def iCS_S_NestedProcedureCall(self):
            return self.getTypedRuleContext(OOBasicParser.ICS_S_NestedProcedureCallContext,0)

        def helper_rule(self):
            return self.getTypedRuleContext(OOBasicParser.Helper_ruleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIcsNestedProcedureCall" ):
                listener.enterIcsNestedProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIcsNestedProcedureCall" ):
                listener.exitIcsNestedProcedureCall(self)



    def iCS_S_ProcedureOrArrayCall(self):

        localctx = OOBasicParser.ICS_S_ProcedureOrArrayCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_iCS_S_ProcedureOrArrayCall)
        try:
            self.state = 1979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                localctx = OOBasicParser.IcsAmbiguousIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1970
                self.ambiguousIdentifier()
                self.state = 1971
                self.helper_rule()
                pass

            elif la_ == 2:
                localctx = OOBasicParser.IcsBaseTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1973
                self.baseType()
                self.state = 1974
                self.helper_rule()
                pass

            elif la_ == 3:
                localctx = OOBasicParser.IcsNestedProcedureCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1976
                self.iCS_S_NestedProcedureCall()
                self.state = 1977
                self.helper_rule()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Helper_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeHint(self):
            return self.getTypedRuleContext(OOBasicParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.LPAREN)
            else:
                return self.getToken(OOBasicParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.RPAREN)
            else:
                return self.getToken(OOBasicParser.RPAREN, i)

        def argsCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ArgsCallContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ArgsCallContext,i)


        def getRuleIndex(self):
            return OOBasicParser.RULE_helper_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelper_rule" ):
                listener.enterHelper_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelper_rule" ):
                listener.exitHelper_rule(self)




    def helper_rule(self):

        localctx = OOBasicParser.Helper_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_helper_rule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                self.state = 1981
                self.typeHint()


            self.state = 1985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 1984
                self.match(OOBasicParser.WS)


            self.state = 1998 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1987
                    self.match(OOBasicParser.LPAREN)
                    self.state = 1989
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                    if la_ == 1:
                        self.state = 1988
                        self.match(OOBasicParser.WS)


                    self.state = 1995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.COMMA - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.LPAREN - 128)) | (1 << (OOBasicParser.MINUS - 128)) | (1 << (OOBasicParser.PLUS - 128)) | (1 << (OOBasicParser.SEMICOLON - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.STRINGLITERAL - 128)) | (1 << (OOBasicParser.DATELITERAL - 128)) | (1 << (OOBasicParser.COLORLITERAL - 128)) | (1 << (OOBasicParser.INTEGERLITERAL - 128)) | (1 << (OOBasicParser.DOUBLELITERAL - 128)) | (1 << (OOBasicParser.FILENUMBER - 128)) | (1 << (OOBasicParser.OCTALLITERAL - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                        self.state = 1991
                        self.argsCall()
                        self.state = 1993
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 1992
                            self.match(OOBasicParser.WS)




                    self.state = 1997
                    self.match(OOBasicParser.RPAREN)

                else:
                    raise NoViableAltException(self)
                self.state = 2000 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,355,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_NestedProcedureCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def typeHint(self):
            return self.getTypedRuleContext(OOBasicParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(OOBasicParser.ArgsCallContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_iCS_S_NestedProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_NestedProcedureCall" ):
                listener.enterICS_S_NestedProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_NestedProcedureCall" ):
                listener.exitICS_S_NestedProcedureCall(self)




    def iCS_S_NestedProcedureCall(self):

        localctx = OOBasicParser.ICS_S_NestedProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_iCS_S_NestedProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self.ambiguousIdentifier()
            self.state = 2004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                self.state = 2003
                self.typeHint()


            self.state = 2007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 2006
                self.match(OOBasicParser.WS)


            self.state = 2009
            self.match(OOBasicParser.LPAREN)
            self.state = 2011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
            if la_ == 1:
                self.state = 2010
                self.match(OOBasicParser.WS)


            self.state = 2017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MSGBOX - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.COMMA - 128)) | (1 << (OOBasicParser.DOT - 128)) | (1 << (OOBasicParser.LPAREN - 128)) | (1 << (OOBasicParser.MINUS - 128)) | (1 << (OOBasicParser.PLUS - 128)) | (1 << (OOBasicParser.SEMICOLON - 128)) | (1 << (OOBasicParser.L_SQUARE_BRACKET - 128)) | (1 << (OOBasicParser.STRINGLITERAL - 128)) | (1 << (OOBasicParser.DATELITERAL - 128)) | (1 << (OOBasicParser.COLORLITERAL - 128)) | (1 << (OOBasicParser.INTEGERLITERAL - 128)) | (1 << (OOBasicParser.DOUBLELITERAL - 128)) | (1 << (OOBasicParser.FILENUMBER - 128)) | (1 << (OOBasicParser.OCTALLITERAL - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)) | (1 << (OOBasicParser.WS - 128)))) != 0):
                self.state = 2013
                self.argsCall()
                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 2014
                    self.match(OOBasicParser.WS)




            self.state = 2019
            self.match(OOBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_MembersCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(OOBasicParser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(OOBasicParser.ICS_S_ProcedureOrArrayCallContext,0)


        def iCS_S_MemberCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ICS_S_MemberCallContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ICS_S_MemberCallContext,i)


        def getRuleIndex(self):
            return OOBasicParser.RULE_iCS_S_MembersCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_MembersCall" ):
                listener.enterICS_S_MembersCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_MembersCall" ):
                listener.exitICS_S_MembersCall(self)




    def iCS_S_MembersCall(self):

        localctx = OOBasicParser.ICS_S_MembersCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_iCS_S_MembersCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 2021
                self.iCS_S_VariableOrProcedureCall()

            elif la_ == 2:
                self.state = 2022
                self.iCS_S_ProcedureOrArrayCall()


            self.state = 2026 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2025
                    self.iCS_S_MemberCall()

                else:
                    raise NoViableAltException(self)
                self.state = 2028 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,362,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICS_S_MemberCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(OOBasicParser.DOT, 0)

        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(OOBasicParser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(OOBasicParser.ICS_S_ProcedureOrArrayCallContext,0)


        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_iCS_S_MemberCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_MemberCall" ):
                listener.enterICS_S_MemberCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_MemberCall" ):
                listener.exitICS_S_MemberCall(self)




    def iCS_S_MemberCall(self):

        localctx = OOBasicParser.ICS_S_MemberCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_iCS_S_MemberCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 2030
                self.match(OOBasicParser.WS)


            self.state = 2033
            self.match(OOBasicParser.DOT)
            self.state = 2036
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.state = 2034
                self.iCS_S_VariableOrProcedureCall()
                pass

            elif la_ == 2:
                self.state = 2035
                self.iCS_S_ProcedureOrArrayCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ArgCallContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ArgCallContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.SEMICOLON)
            else:
                return self.getToken(OOBasicParser.SEMICOLON, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_argsCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgsCall" ):
                listener.enterArgsCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgsCall" ):
                listener.exitArgsCall(self)




    def argsCall(self):

        localctx = OOBasicParser.ArgsCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_argsCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2050
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,368,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2039
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                    if la_ == 1:
                        self.state = 2038
                        self.argCall()


                    self.state = 2042
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 2041
                        self.match(OOBasicParser.WS)


                    self.state = 2044
                    _la = self._input.LA(1)
                    if not(_la==OOBasicParser.COMMA or _la==OOBasicParser.SEMICOLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2046
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
                    if la_ == 1:
                        self.state = 2045
                        self.match(OOBasicParser.WS)

             
                self.state = 2052
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,368,self._ctx)

            self.state = 2053
            self.argCall()
            self.state = 2066
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,372,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2055
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 2054
                        self.match(OOBasicParser.WS)


                    self.state = 2057
                    _la = self._input.LA(1)
                    if not(_la==OOBasicParser.COMMA or _la==OOBasicParser.SEMICOLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2059
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
                    if la_ == 1:
                        self.state = 2058
                        self.match(OOBasicParser.WS)


                    self.state = 2062
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
                    if la_ == 1:
                        self.state = 2061
                        self.argCall()

             
                self.state = 2068
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,372,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def BYVAL(self):
            return self.getToken(OOBasicParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(OOBasicParser.BYREF, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_argCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgCall" ):
                listener.enterArgCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgCall" ):
                listener.exitArgCall(self)




    def argCall(self):

        localctx = OOBasicParser.ArgCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_argCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                self.state = 2069
                _la = self._input.LA(1)
                if not(_la==OOBasicParser.BYVAL or _la==OOBasicParser.BYREF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2070
                self.match(OOBasicParser.WS)


            self.state = 2073
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ArgContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ArgContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_argList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgList" ):
                listener.enterArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgList" ):
                listener.exitArgList(self)




    def argList(self):

        localctx = OOBasicParser.ArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_argList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            self.match(OOBasicParser.LPAREN)
            self.state = 2096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
            if la_ == 1:
                self.state = 2077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 2076
                    self.match(OOBasicParser.WS)


                self.state = 2079
                self.arg()
                self.state = 2093
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2081
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 2080
                            self.match(OOBasicParser.WS)


                        self.state = 2083
                        self.match(OOBasicParser.COMMA)
                        self.state = 2085
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==OOBasicParser.WS:
                            self.state = 2084
                            self.match(OOBasicParser.WS)


                        self.state = 2087
                        self.arg()
                        self.state = 2089
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
                        if la_ == 1:
                            self.state = 2088
                            self.match(OOBasicParser.WS)

                 
                    self.state = 2095
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,378,self._ctx)



            self.state = 2099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 2098
                self.match(OOBasicParser.WS)


            self.state = 2101
            self.match(OOBasicParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def OPTIONAL(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.OPTIONAL)
            else:
                return self.getToken(OOBasicParser.OPTIONAL, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def typeHint(self):
            return self.getTypedRuleContext(OOBasicParser.TypeHintContext,0)


        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def asTypeClause(self):
            return self.getTypedRuleContext(OOBasicParser.AsTypeClauseContext,0)


        def argDefaultValue(self):
            return self.getTypedRuleContext(OOBasicParser.ArgDefaultValueContext,0)


        def BYVAL(self):
            return self.getToken(OOBasicParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(OOBasicParser.BYREF, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg" ):
                listener.enterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg" ):
                listener.exitArg(self)




    def arg(self):

        localctx = OOBasicParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.state = 2103
                self.match(OOBasicParser.OPTIONAL)
                self.state = 2104
                self.match(OOBasicParser.WS)


            self.state = 2109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 2107
                _la = self._input.LA(1)
                if not(_la==OOBasicParser.BYVAL or _la==OOBasicParser.BYREF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2108
                self.match(OOBasicParser.WS)


            self.state = 2113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.state = 2111
                self.match(OOBasicParser.OPTIONAL)
                self.state = 2112
                self.match(OOBasicParser.WS)


            self.state = 2115
            self.ambiguousIdentifier()
            self.state = 2117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0):
                self.state = 2116
                self.typeHint()


            self.state = 2127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 2120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 2119
                    self.match(OOBasicParser.WS)


                self.state = 2122
                self.match(OOBasicParser.LPAREN)
                self.state = 2124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 2123
                    self.match(OOBasicParser.WS)


                self.state = 2126
                self.match(OOBasicParser.RPAREN)


            self.state = 2131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
            if la_ == 1:
                self.state = 2129
                self.match(OOBasicParser.WS)
                self.state = 2130
                self.asTypeClause()


            self.state = 2137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
            if la_ == 1:
                self.state = 2134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 2133
                    self.match(OOBasicParser.WS)


                self.state = 2136
                self.argDefaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgDefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(OOBasicParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,0)


        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_argDefaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgDefaultValue" ):
                listener.enterArgDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgDefaultValue" ):
                listener.exitArgDefaultValue(self)




    def argDefaultValue(self):

        localctx = OOBasicParser.ArgDefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_argDefaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2139
            self.match(OOBasicParser.EQ)
            self.state = 2141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
            if la_ == 1:
                self.state = 2140
                self.match(OOBasicParser.WS)


            self.state = 2143
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.COMMA)
            else:
                return self.getToken(OOBasicParser.COMMA, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_subscripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscripts" ):
                listener.enterSubscripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscripts" ):
                listener.exitSubscripts(self)




    def subscripts(self):

        localctx = OOBasicParser.SubscriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_subscripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2145
            self.subscript()
            self.state = 2156
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,394,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==OOBasicParser.WS:
                        self.state = 2146
                        self.match(OOBasicParser.WS)


                    self.state = 2149
                    self.match(OOBasicParser.COMMA)
                    self.state = 2151
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
                    if la_ == 1:
                        self.state = 2150
                        self.match(OOBasicParser.WS)


                    self.state = 2153
                    self.subscript() 
                self.state = 2158
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,394,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.ValueStmtContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def TO(self):
            return self.getToken(OOBasicParser.TO, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)




    def subscript(self):

        localctx = OOBasicParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_subscript)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 2159
                self.valueStmt(0)
                self.state = 2160
                self.match(OOBasicParser.WS)
                self.state = 2161
                self.match(OOBasicParser.TO)
                self.state = 2162
                self.match(OOBasicParser.WS)


            self.state = 2166
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.IDENTIFIER)
            else:
                return self.getToken(OOBasicParser.IDENTIFIER, i)

        def ambiguousKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.AmbiguousKeywordContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.AmbiguousKeywordContext,i)


        def L_SQUARE_BRACKET(self):
            return self.getToken(OOBasicParser.L_SQUARE_BRACKET, 0)

        def R_SQUARE_BRACKET(self):
            return self.getToken(OOBasicParser.R_SQUARE_BRACKET, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_ambiguousIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousIdentifier" ):
                listener.enterAmbiguousIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousIdentifier" ):
                listener.exitAmbiguousIdentifier(self)




    def ambiguousIdentifier(self):

        localctx = OOBasicParser.AmbiguousIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_ambiguousIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 2182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OOBasicParser.ACCESS, OOBasicParser.APPEND, OOBasicParser.ALIAS, OOBasicParser.AND, OOBasicParser.AS, OOBasicParser.BEEP, OOBasicParser.BEGIN, OOBasicParser.BINARY, OOBasicParser.BOOLEAN, OOBasicParser.BYVAL, OOBasicParser.BYREF, OOBasicParser.BYTE, OOBasicParser.CASE, OOBasicParser.CHDIR, OOBasicParser.CHDRIVE, OOBasicParser.CALL, OOBasicParser.CLASS, OOBasicParser.CLOSE, OOBasicParser.CONST, OOBasicParser.DATE, OOBasicParser.DEFBOOL, OOBasicParser.DEFBYTE, OOBasicParser.DEFDATE, OOBasicParser.DEFDBL, OOBasicParser.DEFDEC, OOBasicParser.DEFCUR, OOBasicParser.DEFINT, OOBasicParser.DEFLNG, OOBasicParser.DEFOBJ, OOBasicParser.DEFSNG, OOBasicParser.DEFSTR, OOBasicParser.DEFVAR, OOBasicParser.DIM, OOBasicParser.DO, OOBasicParser.DOUBLE, OOBasicParser.EACH, OOBasicParser.ELSE, OOBasicParser.ELSEIF, OOBasicParser.END, OOBasicParser.EQV, OOBasicParser.ERROR, OOBasicParser.FALSE, OOBasicParser.FILECOPY, OOBasicParser.FOR, OOBasicParser.FUNCTION, OOBasicParser.GLOBAL, OOBasicParser.GOTO, OOBasicParser.IF, OOBasicParser.IMP, OOBasicParser.IN, OOBasicParser.INPUT, OOBasicParser.INTEGER, OOBasicParser.LONG, OOBasicParser.LOOP, OOBasicParser.LEN, OOBasicParser.LET, OOBasicParser.ME, OOBasicParser.MID, OOBasicParser.MKDIR, OOBasicParser.MOD, OOBasicParser.NAME, OOBasicParser.NEXT, OOBasicParser.NEW, OOBasicParser.NOT, OOBasicParser.NOTHING, OOBasicParser.NULL, OOBasicParser.OBJECT, OOBasicParser.ON, OOBasicParser.OPEN, OOBasicParser.OPTIONAL, OOBasicParser.OR, OOBasicParser.OUTPUT, OOBasicParser.PRESERVE, OOBasicParser.PRINT, OOBasicParser.PRIVATE, OOBasicParser.PUBLIC, OOBasicParser.PUT, OOBasicParser.RANDOM, OOBasicParser.RANDOMIZE, OOBasicParser.READ, OOBasicParser.REDIM, OOBasicParser.REM, OOBasicParser.RESET, OOBasicParser.RESUME, OOBasicParser.RMDIR, OOBasicParser.SELECT, OOBasicParser.SET, OOBasicParser.STATIC, OOBasicParser.STEP, OOBasicParser.STOP, OOBasicParser.STRING, OOBasicParser.SUB, OOBasicParser.TAB, OOBasicParser.TEXT, OOBasicParser.THEN, OOBasicParser.TIME, OOBasicParser.TO, OOBasicParser.TRUE, OOBasicParser.TYPE, OOBasicParser.TYPEOF, OOBasicParser.UNTIL, OOBasicParser.VARIANT, OOBasicParser.VERSION, OOBasicParser.WEND, OOBasicParser.WHILE, OOBasicParser.WIDTH, OOBasicParser.WITH, OOBasicParser.WRITE, OOBasicParser.XOR, OOBasicParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2170 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2170
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [OOBasicParser.IDENTIFIER]:
                            self.state = 2168
                            self.match(OOBasicParser.IDENTIFIER)
                            pass
                        elif token in [OOBasicParser.ACCESS, OOBasicParser.APPEND, OOBasicParser.ALIAS, OOBasicParser.AND, OOBasicParser.AS, OOBasicParser.BEEP, OOBasicParser.BEGIN, OOBasicParser.BINARY, OOBasicParser.BOOLEAN, OOBasicParser.BYVAL, OOBasicParser.BYREF, OOBasicParser.BYTE, OOBasicParser.CASE, OOBasicParser.CHDIR, OOBasicParser.CHDRIVE, OOBasicParser.CALL, OOBasicParser.CLASS, OOBasicParser.CLOSE, OOBasicParser.CONST, OOBasicParser.DATE, OOBasicParser.DEFBOOL, OOBasicParser.DEFBYTE, OOBasicParser.DEFDATE, OOBasicParser.DEFDBL, OOBasicParser.DEFDEC, OOBasicParser.DEFCUR, OOBasicParser.DEFINT, OOBasicParser.DEFLNG, OOBasicParser.DEFOBJ, OOBasicParser.DEFSNG, OOBasicParser.DEFSTR, OOBasicParser.DEFVAR, OOBasicParser.DIM, OOBasicParser.DO, OOBasicParser.DOUBLE, OOBasicParser.EACH, OOBasicParser.ELSE, OOBasicParser.ELSEIF, OOBasicParser.END, OOBasicParser.EQV, OOBasicParser.ERROR, OOBasicParser.FALSE, OOBasicParser.FILECOPY, OOBasicParser.FOR, OOBasicParser.FUNCTION, OOBasicParser.GLOBAL, OOBasicParser.GOTO, OOBasicParser.IF, OOBasicParser.IMP, OOBasicParser.IN, OOBasicParser.INPUT, OOBasicParser.INTEGER, OOBasicParser.LONG, OOBasicParser.LOOP, OOBasicParser.LEN, OOBasicParser.LET, OOBasicParser.ME, OOBasicParser.MID, OOBasicParser.MKDIR, OOBasicParser.MOD, OOBasicParser.NAME, OOBasicParser.NEXT, OOBasicParser.NEW, OOBasicParser.NOT, OOBasicParser.NOTHING, OOBasicParser.NULL, OOBasicParser.OBJECT, OOBasicParser.ON, OOBasicParser.OPEN, OOBasicParser.OPTIONAL, OOBasicParser.OR, OOBasicParser.OUTPUT, OOBasicParser.PRESERVE, OOBasicParser.PRINT, OOBasicParser.PRIVATE, OOBasicParser.PUBLIC, OOBasicParser.PUT, OOBasicParser.RANDOM, OOBasicParser.RANDOMIZE, OOBasicParser.READ, OOBasicParser.REDIM, OOBasicParser.REM, OOBasicParser.RESET, OOBasicParser.RESUME, OOBasicParser.RMDIR, OOBasicParser.SELECT, OOBasicParser.SET, OOBasicParser.STATIC, OOBasicParser.STEP, OOBasicParser.STOP, OOBasicParser.STRING, OOBasicParser.SUB, OOBasicParser.TAB, OOBasicParser.TEXT, OOBasicParser.THEN, OOBasicParser.TIME, OOBasicParser.TO, OOBasicParser.TRUE, OOBasicParser.TYPE, OOBasicParser.TYPEOF, OOBasicParser.UNTIL, OOBasicParser.VARIANT, OOBasicParser.VERSION, OOBasicParser.WEND, OOBasicParser.WHILE, OOBasicParser.WIDTH, OOBasicParser.WITH, OOBasicParser.WRITE, OOBasicParser.XOR]:
                            self.state = 2169
                            self.ambiguousKeyword()
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 2172 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,397,self._ctx)

                pass
            elif token in [OOBasicParser.L_SQUARE_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2174
                self.match(OOBasicParser.L_SQUARE_BRACKET)
                self.state = 2177 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2177
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [OOBasicParser.IDENTIFIER]:
                        self.state = 2175
                        self.match(OOBasicParser.IDENTIFIER)
                        pass
                    elif token in [OOBasicParser.ACCESS, OOBasicParser.APPEND, OOBasicParser.ALIAS, OOBasicParser.AND, OOBasicParser.AS, OOBasicParser.BEEP, OOBasicParser.BEGIN, OOBasicParser.BINARY, OOBasicParser.BOOLEAN, OOBasicParser.BYVAL, OOBasicParser.BYREF, OOBasicParser.BYTE, OOBasicParser.CASE, OOBasicParser.CHDIR, OOBasicParser.CHDRIVE, OOBasicParser.CALL, OOBasicParser.CLASS, OOBasicParser.CLOSE, OOBasicParser.CONST, OOBasicParser.DATE, OOBasicParser.DEFBOOL, OOBasicParser.DEFBYTE, OOBasicParser.DEFDATE, OOBasicParser.DEFDBL, OOBasicParser.DEFDEC, OOBasicParser.DEFCUR, OOBasicParser.DEFINT, OOBasicParser.DEFLNG, OOBasicParser.DEFOBJ, OOBasicParser.DEFSNG, OOBasicParser.DEFSTR, OOBasicParser.DEFVAR, OOBasicParser.DIM, OOBasicParser.DO, OOBasicParser.DOUBLE, OOBasicParser.EACH, OOBasicParser.ELSE, OOBasicParser.ELSEIF, OOBasicParser.END, OOBasicParser.EQV, OOBasicParser.ERROR, OOBasicParser.FALSE, OOBasicParser.FILECOPY, OOBasicParser.FOR, OOBasicParser.FUNCTION, OOBasicParser.GLOBAL, OOBasicParser.GOTO, OOBasicParser.IF, OOBasicParser.IMP, OOBasicParser.IN, OOBasicParser.INPUT, OOBasicParser.INTEGER, OOBasicParser.LONG, OOBasicParser.LOOP, OOBasicParser.LEN, OOBasicParser.LET, OOBasicParser.ME, OOBasicParser.MID, OOBasicParser.MKDIR, OOBasicParser.MOD, OOBasicParser.NAME, OOBasicParser.NEXT, OOBasicParser.NEW, OOBasicParser.NOT, OOBasicParser.NOTHING, OOBasicParser.NULL, OOBasicParser.OBJECT, OOBasicParser.ON, OOBasicParser.OPEN, OOBasicParser.OPTIONAL, OOBasicParser.OR, OOBasicParser.OUTPUT, OOBasicParser.PRESERVE, OOBasicParser.PRINT, OOBasicParser.PRIVATE, OOBasicParser.PUBLIC, OOBasicParser.PUT, OOBasicParser.RANDOM, OOBasicParser.RANDOMIZE, OOBasicParser.READ, OOBasicParser.REDIM, OOBasicParser.REM, OOBasicParser.RESET, OOBasicParser.RESUME, OOBasicParser.RMDIR, OOBasicParser.SELECT, OOBasicParser.SET, OOBasicParser.STATIC, OOBasicParser.STEP, OOBasicParser.STOP, OOBasicParser.STRING, OOBasicParser.SUB, OOBasicParser.TAB, OOBasicParser.TEXT, OOBasicParser.THEN, OOBasicParser.TIME, OOBasicParser.TO, OOBasicParser.TRUE, OOBasicParser.TYPE, OOBasicParser.TYPEOF, OOBasicParser.UNTIL, OOBasicParser.VARIANT, OOBasicParser.VERSION, OOBasicParser.WEND, OOBasicParser.WHILE, OOBasicParser.WIDTH, OOBasicParser.WITH, OOBasicParser.WRITE, OOBasicParser.XOR]:
                        self.state = 2176
                        self.ambiguousKeyword()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2179 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)) | (1 << (OOBasicParser.IDENTIFIER - 128)))) != 0)):
                        break

                self.state = 2181
                self.match(OOBasicParser.R_SQUARE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsTypeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(OOBasicParser.AS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def otype(self):
            return self.getTypedRuleContext(OOBasicParser.OtypeContext,0)


        def NEW(self):
            return self.getToken(OOBasicParser.NEW, 0)

        def fieldLength(self):
            return self.getTypedRuleContext(OOBasicParser.FieldLengthContext,0)


        def getRuleIndex(self):
            return OOBasicParser.RULE_asTypeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsTypeClause" ):
                listener.enterAsTypeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsTypeClause" ):
                listener.exitAsTypeClause(self)




    def asTypeClause(self):

        localctx = OOBasicParser.AsTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_asTypeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2184
            self.match(OOBasicParser.AS)
            self.state = 2185
            self.match(OOBasicParser.WS)
            self.state = 2188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
            if la_ == 1:
                self.state = 2186
                self.match(OOBasicParser.NEW)
                self.state = 2187
                self.match(OOBasicParser.WS)


            self.state = 2190
            self.otype()
            self.state = 2193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                self.state = 2191
                self.match(OOBasicParser.WS)
                self.state = 2192
                self.fieldLength()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(OOBasicParser.BOOLEAN, 0)

        def BYTE(self):
            return self.getToken(OOBasicParser.BYTE, 0)

        def DATE(self):
            return self.getToken(OOBasicParser.DATE, 0)

        def DOUBLE(self):
            return self.getToken(OOBasicParser.DOUBLE, 0)

        def INTEGER(self):
            return self.getToken(OOBasicParser.INTEGER, 0)

        def LONG(self):
            return self.getToken(OOBasicParser.LONG, 0)

        def OBJECT(self):
            return self.getToken(OOBasicParser.OBJECT, 0)

        def STRING(self):
            return self.getToken(OOBasicParser.STRING, 0)

        def VARIANT(self):
            return self.getToken(OOBasicParser.VARIANT, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_baseType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseType" ):
                listener.enterBaseType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseType" ):
                listener.exitBaseType(self)




    def baseType(self):

        localctx = OOBasicParser.BaseTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_baseType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2195
            _la = self._input.LA(1)
            if not(((((_la - 10)) & ~0x3f) == 0 and ((1 << (_la - 10)) & ((1 << (OOBasicParser.BOOLEAN - 10)) | (1 << (OOBasicParser.BYTE - 10)) | (1 << (OOBasicParser.DATE - 10)) | (1 << (OOBasicParser.DOUBLE - 10)) | (1 << (OOBasicParser.INTEGER - 10)) | (1 << (OOBasicParser.LONG - 10)))) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (OOBasicParser.OBJECT - 85)) | (1 << (OOBasicParser.STRING - 85)) | (1 << (OOBasicParser.VARIANT - 85)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CertainIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.IDENTIFIER)
            else:
                return self.getToken(OOBasicParser.IDENTIFIER, i)

        def ambiguousKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.AmbiguousKeywordContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.AmbiguousKeywordContext,i)


        def getRuleIndex(self):
            return OOBasicParser.RULE_certainIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCertainIdentifier" ):
                listener.enterCertainIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCertainIdentifier" ):
                listener.exitCertainIdentifier(self)




    def certainIdentifier(self):

        localctx = OOBasicParser.CertainIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_certainIdentifier)
        try:
            self.state = 2212
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OOBasicParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2197
                self.match(OOBasicParser.IDENTIFIER)
                self.state = 2202
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,404,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2200
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [OOBasicParser.ACCESS, OOBasicParser.APPEND, OOBasicParser.ALIAS, OOBasicParser.AND, OOBasicParser.AS, OOBasicParser.BEEP, OOBasicParser.BEGIN, OOBasicParser.BINARY, OOBasicParser.BOOLEAN, OOBasicParser.BYVAL, OOBasicParser.BYREF, OOBasicParser.BYTE, OOBasicParser.CASE, OOBasicParser.CHDIR, OOBasicParser.CHDRIVE, OOBasicParser.CALL, OOBasicParser.CLASS, OOBasicParser.CLOSE, OOBasicParser.CONST, OOBasicParser.DATE, OOBasicParser.DEFBOOL, OOBasicParser.DEFBYTE, OOBasicParser.DEFDATE, OOBasicParser.DEFDBL, OOBasicParser.DEFDEC, OOBasicParser.DEFCUR, OOBasicParser.DEFINT, OOBasicParser.DEFLNG, OOBasicParser.DEFOBJ, OOBasicParser.DEFSNG, OOBasicParser.DEFSTR, OOBasicParser.DEFVAR, OOBasicParser.DIM, OOBasicParser.DO, OOBasicParser.DOUBLE, OOBasicParser.EACH, OOBasicParser.ELSE, OOBasicParser.ELSEIF, OOBasicParser.END, OOBasicParser.EQV, OOBasicParser.ERROR, OOBasicParser.FALSE, OOBasicParser.FILECOPY, OOBasicParser.FOR, OOBasicParser.FUNCTION, OOBasicParser.GLOBAL, OOBasicParser.GOTO, OOBasicParser.IF, OOBasicParser.IMP, OOBasicParser.IN, OOBasicParser.INPUT, OOBasicParser.INTEGER, OOBasicParser.LONG, OOBasicParser.LOOP, OOBasicParser.LEN, OOBasicParser.LET, OOBasicParser.ME, OOBasicParser.MID, OOBasicParser.MKDIR, OOBasicParser.MOD, OOBasicParser.NAME, OOBasicParser.NEXT, OOBasicParser.NEW, OOBasicParser.NOT, OOBasicParser.NOTHING, OOBasicParser.NULL, OOBasicParser.OBJECT, OOBasicParser.ON, OOBasicParser.OPEN, OOBasicParser.OPTIONAL, OOBasicParser.OR, OOBasicParser.OUTPUT, OOBasicParser.PRESERVE, OOBasicParser.PRINT, OOBasicParser.PRIVATE, OOBasicParser.PUBLIC, OOBasicParser.PUT, OOBasicParser.RANDOM, OOBasicParser.RANDOMIZE, OOBasicParser.READ, OOBasicParser.REDIM, OOBasicParser.REM, OOBasicParser.RESET, OOBasicParser.RESUME, OOBasicParser.RMDIR, OOBasicParser.SELECT, OOBasicParser.SET, OOBasicParser.STATIC, OOBasicParser.STEP, OOBasicParser.STOP, OOBasicParser.STRING, OOBasicParser.SUB, OOBasicParser.TAB, OOBasicParser.TEXT, OOBasicParser.THEN, OOBasicParser.TIME, OOBasicParser.TO, OOBasicParser.TRUE, OOBasicParser.TYPE, OOBasicParser.TYPEOF, OOBasicParser.UNTIL, OOBasicParser.VARIANT, OOBasicParser.VERSION, OOBasicParser.WEND, OOBasicParser.WHILE, OOBasicParser.WIDTH, OOBasicParser.WITH, OOBasicParser.WRITE, OOBasicParser.XOR]:
                            self.state = 2198
                            self.ambiguousKeyword()
                            pass
                        elif token in [OOBasicParser.IDENTIFIER]:
                            self.state = 2199
                            self.match(OOBasicParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 2204
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,404,self._ctx)

                pass
            elif token in [OOBasicParser.ACCESS, OOBasicParser.APPEND, OOBasicParser.ALIAS, OOBasicParser.AND, OOBasicParser.AS, OOBasicParser.BEEP, OOBasicParser.BEGIN, OOBasicParser.BINARY, OOBasicParser.BOOLEAN, OOBasicParser.BYVAL, OOBasicParser.BYREF, OOBasicParser.BYTE, OOBasicParser.CASE, OOBasicParser.CHDIR, OOBasicParser.CHDRIVE, OOBasicParser.CALL, OOBasicParser.CLASS, OOBasicParser.CLOSE, OOBasicParser.CONST, OOBasicParser.DATE, OOBasicParser.DEFBOOL, OOBasicParser.DEFBYTE, OOBasicParser.DEFDATE, OOBasicParser.DEFDBL, OOBasicParser.DEFDEC, OOBasicParser.DEFCUR, OOBasicParser.DEFINT, OOBasicParser.DEFLNG, OOBasicParser.DEFOBJ, OOBasicParser.DEFSNG, OOBasicParser.DEFSTR, OOBasicParser.DEFVAR, OOBasicParser.DIM, OOBasicParser.DO, OOBasicParser.DOUBLE, OOBasicParser.EACH, OOBasicParser.ELSE, OOBasicParser.ELSEIF, OOBasicParser.END, OOBasicParser.EQV, OOBasicParser.ERROR, OOBasicParser.FALSE, OOBasicParser.FILECOPY, OOBasicParser.FOR, OOBasicParser.FUNCTION, OOBasicParser.GLOBAL, OOBasicParser.GOTO, OOBasicParser.IF, OOBasicParser.IMP, OOBasicParser.IN, OOBasicParser.INPUT, OOBasicParser.INTEGER, OOBasicParser.LONG, OOBasicParser.LOOP, OOBasicParser.LEN, OOBasicParser.LET, OOBasicParser.ME, OOBasicParser.MID, OOBasicParser.MKDIR, OOBasicParser.MOD, OOBasicParser.NAME, OOBasicParser.NEXT, OOBasicParser.NEW, OOBasicParser.NOT, OOBasicParser.NOTHING, OOBasicParser.NULL, OOBasicParser.OBJECT, OOBasicParser.ON, OOBasicParser.OPEN, OOBasicParser.OPTIONAL, OOBasicParser.OR, OOBasicParser.OUTPUT, OOBasicParser.PRESERVE, OOBasicParser.PRINT, OOBasicParser.PRIVATE, OOBasicParser.PUBLIC, OOBasicParser.PUT, OOBasicParser.RANDOM, OOBasicParser.RANDOMIZE, OOBasicParser.READ, OOBasicParser.REDIM, OOBasicParser.REM, OOBasicParser.RESET, OOBasicParser.RESUME, OOBasicParser.RMDIR, OOBasicParser.SELECT, OOBasicParser.SET, OOBasicParser.STATIC, OOBasicParser.STEP, OOBasicParser.STOP, OOBasicParser.STRING, OOBasicParser.SUB, OOBasicParser.TAB, OOBasicParser.TEXT, OOBasicParser.THEN, OOBasicParser.TIME, OOBasicParser.TO, OOBasicParser.TRUE, OOBasicParser.TYPE, OOBasicParser.TYPEOF, OOBasicParser.UNTIL, OOBasicParser.VARIANT, OOBasicParser.VERSION, OOBasicParser.WEND, OOBasicParser.WHILE, OOBasicParser.WIDTH, OOBasicParser.WITH, OOBasicParser.WRITE, OOBasicParser.XOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2205
                self.ambiguousKeyword()
                self.state = 2208 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2208
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [OOBasicParser.ACCESS, OOBasicParser.APPEND, OOBasicParser.ALIAS, OOBasicParser.AND, OOBasicParser.AS, OOBasicParser.BEEP, OOBasicParser.BEGIN, OOBasicParser.BINARY, OOBasicParser.BOOLEAN, OOBasicParser.BYVAL, OOBasicParser.BYREF, OOBasicParser.BYTE, OOBasicParser.CASE, OOBasicParser.CHDIR, OOBasicParser.CHDRIVE, OOBasicParser.CALL, OOBasicParser.CLASS, OOBasicParser.CLOSE, OOBasicParser.CONST, OOBasicParser.DATE, OOBasicParser.DEFBOOL, OOBasicParser.DEFBYTE, OOBasicParser.DEFDATE, OOBasicParser.DEFDBL, OOBasicParser.DEFDEC, OOBasicParser.DEFCUR, OOBasicParser.DEFINT, OOBasicParser.DEFLNG, OOBasicParser.DEFOBJ, OOBasicParser.DEFSNG, OOBasicParser.DEFSTR, OOBasicParser.DEFVAR, OOBasicParser.DIM, OOBasicParser.DO, OOBasicParser.DOUBLE, OOBasicParser.EACH, OOBasicParser.ELSE, OOBasicParser.ELSEIF, OOBasicParser.END, OOBasicParser.EQV, OOBasicParser.ERROR, OOBasicParser.FALSE, OOBasicParser.FILECOPY, OOBasicParser.FOR, OOBasicParser.FUNCTION, OOBasicParser.GLOBAL, OOBasicParser.GOTO, OOBasicParser.IF, OOBasicParser.IMP, OOBasicParser.IN, OOBasicParser.INPUT, OOBasicParser.INTEGER, OOBasicParser.LONG, OOBasicParser.LOOP, OOBasicParser.LEN, OOBasicParser.LET, OOBasicParser.ME, OOBasicParser.MID, OOBasicParser.MKDIR, OOBasicParser.MOD, OOBasicParser.NAME, OOBasicParser.NEXT, OOBasicParser.NEW, OOBasicParser.NOT, OOBasicParser.NOTHING, OOBasicParser.NULL, OOBasicParser.OBJECT, OOBasicParser.ON, OOBasicParser.OPEN, OOBasicParser.OPTIONAL, OOBasicParser.OR, OOBasicParser.OUTPUT, OOBasicParser.PRESERVE, OOBasicParser.PRINT, OOBasicParser.PRIVATE, OOBasicParser.PUBLIC, OOBasicParser.PUT, OOBasicParser.RANDOM, OOBasicParser.RANDOMIZE, OOBasicParser.READ, OOBasicParser.REDIM, OOBasicParser.REM, OOBasicParser.RESET, OOBasicParser.RESUME, OOBasicParser.RMDIR, OOBasicParser.SELECT, OOBasicParser.SET, OOBasicParser.STATIC, OOBasicParser.STEP, OOBasicParser.STOP, OOBasicParser.STRING, OOBasicParser.SUB, OOBasicParser.TAB, OOBasicParser.TEXT, OOBasicParser.THEN, OOBasicParser.TIME, OOBasicParser.TO, OOBasicParser.TRUE, OOBasicParser.TYPE, OOBasicParser.TYPEOF, OOBasicParser.UNTIL, OOBasicParser.VARIANT, OOBasicParser.VERSION, OOBasicParser.WEND, OOBasicParser.WHILE, OOBasicParser.WIDTH, OOBasicParser.WITH, OOBasicParser.WRITE, OOBasicParser.XOR]:
                            self.state = 2206
                            self.ambiguousKeyword()
                            pass
                        elif token in [OOBasicParser.IDENTIFIER]:
                            self.state = 2207
                            self.match(OOBasicParser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 2210 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,406,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(OOBasicParser.LT, 0)

        def LEQ(self):
            return self.getToken(OOBasicParser.LEQ, 0)

        def GT(self):
            return self.getToken(OOBasicParser.GT, 0)

        def GEQ(self):
            return self.getToken(OOBasicParser.GEQ, 0)

        def EQ(self):
            return self.getToken(OOBasicParser.EQ, 0)

        def NEQ(self):
            return self.getToken(OOBasicParser.NEQ, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = OOBasicParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2214
            _la = self._input.LA(1)
            if not(((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (OOBasicParser.EQ - 151)) | (1 << (OOBasicParser.GEQ - 151)) | (1 << (OOBasicParser.GT - 151)) | (1 << (OOBasicParser.LEQ - 151)) | (1 << (OOBasicParser.LT - 151)) | (1 << (OOBasicParser.NEQ - 151)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.DOT)
            else:
                return self.getToken(OOBasicParser.DOT, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_complexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexType" ):
                listener.enterComplexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexType" ):
                listener.exitComplexType(self)




    def complexType(self):

        localctx = OOBasicParser.ComplexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_complexType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2216
            self.ambiguousIdentifier()
            self.state = 2221
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,408,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2217
                    self.match(OOBasicParser.DOT)
                    self.state = 2218
                    self.ambiguousIdentifier() 
                self.state = 2223
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,408,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT(self):
            return self.getToken(OOBasicParser.MULT, 0)

        def INTEGERLITERAL(self):
            return self.getToken(OOBasicParser.INTEGERLITERAL, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def WS(self):
            return self.getToken(OOBasicParser.WS, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_fieldLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldLength" ):
                listener.enterFieldLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldLength" ):
                listener.exitFieldLength(self)




    def fieldLength(self):

        localctx = OOBasicParser.FieldLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_fieldLength)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2224
            self.match(OOBasicParser.MULT)
            self.state = 2226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==OOBasicParser.WS:
                self.state = 2225
                self.match(OOBasicParser.WS)


            self.state = 2230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OOBasicParser.INTEGERLITERAL]:
                self.state = 2228
                self.match(OOBasicParser.INTEGERLITERAL)
                pass
            elif token in [OOBasicParser.ACCESS, OOBasicParser.APPEND, OOBasicParser.ALIAS, OOBasicParser.AND, OOBasicParser.AS, OOBasicParser.BEEP, OOBasicParser.BEGIN, OOBasicParser.BINARY, OOBasicParser.BOOLEAN, OOBasicParser.BYVAL, OOBasicParser.BYREF, OOBasicParser.BYTE, OOBasicParser.CASE, OOBasicParser.CHDIR, OOBasicParser.CHDRIVE, OOBasicParser.CALL, OOBasicParser.CLASS, OOBasicParser.CLOSE, OOBasicParser.CONST, OOBasicParser.DATE, OOBasicParser.DEFBOOL, OOBasicParser.DEFBYTE, OOBasicParser.DEFDATE, OOBasicParser.DEFDBL, OOBasicParser.DEFDEC, OOBasicParser.DEFCUR, OOBasicParser.DEFINT, OOBasicParser.DEFLNG, OOBasicParser.DEFOBJ, OOBasicParser.DEFSNG, OOBasicParser.DEFSTR, OOBasicParser.DEFVAR, OOBasicParser.DIM, OOBasicParser.DO, OOBasicParser.DOUBLE, OOBasicParser.EACH, OOBasicParser.ELSE, OOBasicParser.ELSEIF, OOBasicParser.END, OOBasicParser.EQV, OOBasicParser.ERROR, OOBasicParser.FALSE, OOBasicParser.FILECOPY, OOBasicParser.FOR, OOBasicParser.FUNCTION, OOBasicParser.GLOBAL, OOBasicParser.GOTO, OOBasicParser.IF, OOBasicParser.IMP, OOBasicParser.IN, OOBasicParser.INPUT, OOBasicParser.INTEGER, OOBasicParser.LONG, OOBasicParser.LOOP, OOBasicParser.LEN, OOBasicParser.LET, OOBasicParser.ME, OOBasicParser.MID, OOBasicParser.MKDIR, OOBasicParser.MOD, OOBasicParser.NAME, OOBasicParser.NEXT, OOBasicParser.NEW, OOBasicParser.NOT, OOBasicParser.NOTHING, OOBasicParser.NULL, OOBasicParser.OBJECT, OOBasicParser.ON, OOBasicParser.OPEN, OOBasicParser.OPTIONAL, OOBasicParser.OR, OOBasicParser.OUTPUT, OOBasicParser.PRESERVE, OOBasicParser.PRINT, OOBasicParser.PRIVATE, OOBasicParser.PUBLIC, OOBasicParser.PUT, OOBasicParser.RANDOM, OOBasicParser.RANDOMIZE, OOBasicParser.READ, OOBasicParser.REDIM, OOBasicParser.REM, OOBasicParser.RESET, OOBasicParser.RESUME, OOBasicParser.RMDIR, OOBasicParser.SELECT, OOBasicParser.SET, OOBasicParser.STATIC, OOBasicParser.STEP, OOBasicParser.STOP, OOBasicParser.STRING, OOBasicParser.SUB, OOBasicParser.TAB, OOBasicParser.TEXT, OOBasicParser.THEN, OOBasicParser.TIME, OOBasicParser.TO, OOBasicParser.TRUE, OOBasicParser.TYPE, OOBasicParser.TYPEOF, OOBasicParser.UNTIL, OOBasicParser.VARIANT, OOBasicParser.VERSION, OOBasicParser.WEND, OOBasicParser.WHILE, OOBasicParser.WIDTH, OOBasicParser.WITH, OOBasicParser.WRITE, OOBasicParser.XOR, OOBasicParser.L_SQUARE_BRACKET, OOBasicParser.IDENTIFIER]:
                self.state = 2229
                self.ambiguousIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetterrangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def certainIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OOBasicParser.CertainIdentifierContext)
            else:
                return self.getTypedRuleContext(OOBasicParser.CertainIdentifierContext,i)


        def MINUS(self):
            return self.getToken(OOBasicParser.MINUS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_letterrange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetterrange" ):
                listener.enterLetterrange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetterrange" ):
                listener.exitLetterrange(self)




    def letterrange(self):

        localctx = OOBasicParser.LetterrangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_letterrange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2232
            self.certainIdentifier()
            self.state = 2241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
            if la_ == 1:
                self.state = 2234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 2233
                    self.match(OOBasicParser.WS)


                self.state = 2236
                self.match(OOBasicParser.MINUS)
                self.state = 2238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 2237
                    self.match(OOBasicParser.WS)


                self.state = 2240
                self.certainIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(OOBasicParser.AmbiguousIdentifierContext,0)


        def COLON(self):
            return self.getToken(OOBasicParser.COLON, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_lineLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineLabel" ):
                listener.enterLineLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineLabel" ):
                listener.exitLineLabel(self)




    def lineLabel(self):

        localctx = OOBasicParser.LineLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_lineLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2243
            self.ambiguousIdentifier()
            self.state = 2244
            self.match(OOBasicParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLORLITERAL(self):
            return self.getToken(OOBasicParser.COLORLITERAL, 0)

        def DATELITERAL(self):
            return self.getToken(OOBasicParser.DATELITERAL, 0)

        def DOUBLELITERAL(self):
            return self.getToken(OOBasicParser.DOUBLELITERAL, 0)

        def PLUS(self):
            return self.getToken(OOBasicParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(OOBasicParser.MINUS, 0)

        def FILENUMBER(self):
            return self.getToken(OOBasicParser.FILENUMBER, 0)

        def INTEGERLITERAL(self):
            return self.getToken(OOBasicParser.INTEGERLITERAL, 0)

        def OCTALLITERAL(self):
            return self.getToken(OOBasicParser.OCTALLITERAL, 0)

        def STRINGLITERAL(self):
            return self.getToken(OOBasicParser.STRINGLITERAL, 0)

        def TRUE(self):
            return self.getToken(OOBasicParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(OOBasicParser.FALSE, 0)

        def NOTHING(self):
            return self.getToken(OOBasicParser.NOTHING, 0)

        def NULL(self):
            return self.getToken(OOBasicParser.NULL, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = OOBasicParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.state = 2266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2246
                self.match(OOBasicParser.COLORLITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2247
                self.match(OOBasicParser.DATELITERAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.MINUS or _la==OOBasicParser.PLUS:
                    self.state = 2248
                    _la = self._input.LA(1)
                    if not(_la==OOBasicParser.MINUS or _la==OOBasicParser.PLUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2251
                self.match(OOBasicParser.DOUBLELITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2252
                self.match(OOBasicParser.FILENUMBER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.MINUS or _la==OOBasicParser.PLUS:
                    self.state = 2253
                    _la = self._input.LA(1)
                    if not(_la==OOBasicParser.MINUS or _la==OOBasicParser.PLUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2256
                self.match(OOBasicParser.INTEGERLITERAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.MINUS or _la==OOBasicParser.PLUS:
                    self.state = 2257
                    _la = self._input.LA(1)
                    if not(_la==OOBasicParser.MINUS or _la==OOBasicParser.PLUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2260
                self.match(OOBasicParser.OCTALLITERAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2261
                self.match(OOBasicParser.STRINGLITERAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2262
                self.match(OOBasicParser.TRUE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2263
                self.match(OOBasicParser.FALSE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2264
                self.match(OOBasicParser.NOTHING)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2265
                self.match(OOBasicParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicPrivateVisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(OOBasicParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(OOBasicParser.PUBLIC, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_publicPrivateVisibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicPrivateVisibility" ):
                listener.enterPublicPrivateVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicPrivateVisibility" ):
                listener.exitPublicPrivateVisibility(self)




    def publicPrivateVisibility(self):

        localctx = OOBasicParser.PublicPrivateVisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_publicPrivateVisibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2268
            _la = self._input.LA(1)
            if not(_la==OOBasicParser.PRIVATE or _la==OOBasicParser.PUBLIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicPrivateGlobalVisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(OOBasicParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(OOBasicParser.PUBLIC, 0)

        def GLOBAL(self):
            return self.getToken(OOBasicParser.GLOBAL, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_publicPrivateGlobalVisibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicPrivateGlobalVisibility" ):
                listener.enterPublicPrivateGlobalVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicPrivateGlobalVisibility" ):
                listener.exitPublicPrivateGlobalVisibility(self)




    def publicPrivateGlobalVisibility(self):

        localctx = OOBasicParser.PublicPrivateGlobalVisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_publicPrivateGlobalVisibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2270
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (OOBasicParser.GLOBAL - 58)) | (1 << (OOBasicParser.PRIVATE - 58)) | (1 << (OOBasicParser.PUBLIC - 58)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseType(self):
            return self.getTypedRuleContext(OOBasicParser.BaseTypeContext,0)


        def complexType(self):
            return self.getTypedRuleContext(OOBasicParser.ComplexTypeContext,0)


        def LPAREN(self):
            return self.getToken(OOBasicParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OOBasicParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(OOBasicParser.WS)
            else:
                return self.getToken(OOBasicParser.WS, i)

        def getRuleIndex(self):
            return OOBasicParser.RULE_otype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOtype" ):
                listener.enterOtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOtype" ):
                listener.exitOtype(self)




    def otype(self):

        localctx = OOBasicParser.OtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_otype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.state = 2272
                self.baseType()
                pass

            elif la_ == 2:
                self.state = 2273
                self.complexType()
                pass


            self.state = 2284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.state = 2277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 2276
                    self.match(OOBasicParser.WS)


                self.state = 2279
                self.match(OOBasicParser.LPAREN)
                self.state = 2281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==OOBasicParser.WS:
                    self.state = 2280
                    self.match(OOBasicParser.WS)


                self.state = 2283
                self.match(OOBasicParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeHintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(OOBasicParser.AMPERSAND, 0)

        def AT(self):
            return self.getToken(OOBasicParser.AT, 0)

        def DOLLAR(self):
            return self.getToken(OOBasicParser.DOLLAR, 0)

        def HASH(self):
            return self.getToken(OOBasicParser.HASH, 0)

        def PERCENT(self):
            return self.getToken(OOBasicParser.PERCENT, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_typeHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeHint" ):
                listener.enterTypeHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeHint" ):
                listener.exitTypeHint(self)




    def typeHint(self):

        localctx = OOBasicParser.TypeHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_typeHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2286
            _la = self._input.LA(1)
            if not(((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (OOBasicParser.AMPERSAND - 143)) | (1 << (OOBasicParser.AT - 143)) | (1 << (OOBasicParser.DOLLAR - 143)) | (1 << (OOBasicParser.HASH - 143)) | (1 << (OOBasicParser.PERCENT - 143)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(OOBasicParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(OOBasicParser.PUBLIC, 0)

        def GLOBAL(self):
            return self.getToken(OOBasicParser.GLOBAL, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = OOBasicParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2288
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (OOBasicParser.GLOBAL - 58)) | (1 << (OOBasicParser.PRIVATE - 58)) | (1 << (OOBasicParser.PUBLIC - 58)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(OOBasicParser.ACCESS, 0)

        def ALIAS(self):
            return self.getToken(OOBasicParser.ALIAS, 0)

        def AND(self):
            return self.getToken(OOBasicParser.AND, 0)

        def APPEND(self):
            return self.getToken(OOBasicParser.APPEND, 0)

        def AS(self):
            return self.getToken(OOBasicParser.AS, 0)

        def BEEP(self):
            return self.getToken(OOBasicParser.BEEP, 0)

        def BEGIN(self):
            return self.getToken(OOBasicParser.BEGIN, 0)

        def BINARY(self):
            return self.getToken(OOBasicParser.BINARY, 0)

        def BOOLEAN(self):
            return self.getToken(OOBasicParser.BOOLEAN, 0)

        def BYVAL(self):
            return self.getToken(OOBasicParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(OOBasicParser.BYREF, 0)

        def BYTE(self):
            return self.getToken(OOBasicParser.BYTE, 0)

        def CALL(self):
            return self.getToken(OOBasicParser.CALL, 0)

        def CASE(self):
            return self.getToken(OOBasicParser.CASE, 0)

        def CLASS(self):
            return self.getToken(OOBasicParser.CLASS, 0)

        def CLOSE(self):
            return self.getToken(OOBasicParser.CLOSE, 0)

        def CHDIR(self):
            return self.getToken(OOBasicParser.CHDIR, 0)

        def CHDRIVE(self):
            return self.getToken(OOBasicParser.CHDRIVE, 0)

        def CONST(self):
            return self.getToken(OOBasicParser.CONST, 0)

        def DATE(self):
            return self.getToken(OOBasicParser.DATE, 0)

        def DEFBOOL(self):
            return self.getToken(OOBasicParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(OOBasicParser.DEFBYTE, 0)

        def DEFCUR(self):
            return self.getToken(OOBasicParser.DEFCUR, 0)

        def DEFDBL(self):
            return self.getToken(OOBasicParser.DEFDBL, 0)

        def DEFDATE(self):
            return self.getToken(OOBasicParser.DEFDATE, 0)

        def DEFDEC(self):
            return self.getToken(OOBasicParser.DEFDEC, 0)

        def DEFINT(self):
            return self.getToken(OOBasicParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(OOBasicParser.DEFLNG, 0)

        def DEFOBJ(self):
            return self.getToken(OOBasicParser.DEFOBJ, 0)

        def DEFSNG(self):
            return self.getToken(OOBasicParser.DEFSNG, 0)

        def DEFSTR(self):
            return self.getToken(OOBasicParser.DEFSTR, 0)

        def DEFVAR(self):
            return self.getToken(OOBasicParser.DEFVAR, 0)

        def DIM(self):
            return self.getToken(OOBasicParser.DIM, 0)

        def DO(self):
            return self.getToken(OOBasicParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(OOBasicParser.DOUBLE, 0)

        def EACH(self):
            return self.getToken(OOBasicParser.EACH, 0)

        def ELSE(self):
            return self.getToken(OOBasicParser.ELSE, 0)

        def ELSEIF(self):
            return self.getToken(OOBasicParser.ELSEIF, 0)

        def END(self):
            return self.getToken(OOBasicParser.END, 0)

        def EQV(self):
            return self.getToken(OOBasicParser.EQV, 0)

        def ERROR(self):
            return self.getToken(OOBasicParser.ERROR, 0)

        def FALSE(self):
            return self.getToken(OOBasicParser.FALSE, 0)

        def FILECOPY(self):
            return self.getToken(OOBasicParser.FILECOPY, 0)

        def FOR(self):
            return self.getToken(OOBasicParser.FOR, 0)

        def FUNCTION(self):
            return self.getToken(OOBasicParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(OOBasicParser.GLOBAL, 0)

        def GOTO(self):
            return self.getToken(OOBasicParser.GOTO, 0)

        def IF(self):
            return self.getToken(OOBasicParser.IF, 0)

        def IMP(self):
            return self.getToken(OOBasicParser.IMP, 0)

        def IN(self):
            return self.getToken(OOBasicParser.IN, 0)

        def INPUT(self):
            return self.getToken(OOBasicParser.INPUT, 0)

        def INTEGER(self):
            return self.getToken(OOBasicParser.INTEGER, 0)

        def LONG(self):
            return self.getToken(OOBasicParser.LONG, 0)

        def LOOP(self):
            return self.getToken(OOBasicParser.LOOP, 0)

        def LEN(self):
            return self.getToken(OOBasicParser.LEN, 0)

        def LET(self):
            return self.getToken(OOBasicParser.LET, 0)

        def ME(self):
            return self.getToken(OOBasicParser.ME, 0)

        def MID(self):
            return self.getToken(OOBasicParser.MID, 0)

        def MKDIR(self):
            return self.getToken(OOBasicParser.MKDIR, 0)

        def MOD(self):
            return self.getToken(OOBasicParser.MOD, 0)

        def NAME(self):
            return self.getToken(OOBasicParser.NAME, 0)

        def NEXT(self):
            return self.getToken(OOBasicParser.NEXT, 0)

        def NEW(self):
            return self.getToken(OOBasicParser.NEW, 0)

        def NOT(self):
            return self.getToken(OOBasicParser.NOT, 0)

        def NOTHING(self):
            return self.getToken(OOBasicParser.NOTHING, 0)

        def NULL(self):
            return self.getToken(OOBasicParser.NULL, 0)

        def OBJECT(self):
            return self.getToken(OOBasicParser.OBJECT, 0)

        def ON(self):
            return self.getToken(OOBasicParser.ON, 0)

        def OPEN(self):
            return self.getToken(OOBasicParser.OPEN, 0)

        def OPTIONAL(self):
            return self.getToken(OOBasicParser.OPTIONAL, 0)

        def OR(self):
            return self.getToken(OOBasicParser.OR, 0)

        def OUTPUT(self):
            return self.getToken(OOBasicParser.OUTPUT, 0)

        def PRESERVE(self):
            return self.getToken(OOBasicParser.PRESERVE, 0)

        def PRINT(self):
            return self.getToken(OOBasicParser.PRINT, 0)

        def PRIVATE(self):
            return self.getToken(OOBasicParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(OOBasicParser.PUBLIC, 0)

        def PUT(self):
            return self.getToken(OOBasicParser.PUT, 0)

        def RANDOM(self):
            return self.getToken(OOBasicParser.RANDOM, 0)

        def RANDOMIZE(self):
            return self.getToken(OOBasicParser.RANDOMIZE, 0)

        def READ(self):
            return self.getToken(OOBasicParser.READ, 0)

        def REDIM(self):
            return self.getToken(OOBasicParser.REDIM, 0)

        def REM(self):
            return self.getToken(OOBasicParser.REM, 0)

        def RESET(self):
            return self.getToken(OOBasicParser.RESET, 0)

        def RESUME(self):
            return self.getToken(OOBasicParser.RESUME, 0)

        def RMDIR(self):
            return self.getToken(OOBasicParser.RMDIR, 0)

        def SELECT(self):
            return self.getToken(OOBasicParser.SELECT, 0)

        def SET(self):
            return self.getToken(OOBasicParser.SET, 0)

        def STATIC(self):
            return self.getToken(OOBasicParser.STATIC, 0)

        def STEP(self):
            return self.getToken(OOBasicParser.STEP, 0)

        def STOP(self):
            return self.getToken(OOBasicParser.STOP, 0)

        def STRING(self):
            return self.getToken(OOBasicParser.STRING, 0)

        def SUB(self):
            return self.getToken(OOBasicParser.SUB, 0)

        def TAB(self):
            return self.getToken(OOBasicParser.TAB, 0)

        def TEXT(self):
            return self.getToken(OOBasicParser.TEXT, 0)

        def THEN(self):
            return self.getToken(OOBasicParser.THEN, 0)

        def TIME(self):
            return self.getToken(OOBasicParser.TIME, 0)

        def TO(self):
            return self.getToken(OOBasicParser.TO, 0)

        def TRUE(self):
            return self.getToken(OOBasicParser.TRUE, 0)

        def TYPE(self):
            return self.getToken(OOBasicParser.TYPE, 0)

        def TYPEOF(self):
            return self.getToken(OOBasicParser.TYPEOF, 0)

        def UNTIL(self):
            return self.getToken(OOBasicParser.UNTIL, 0)

        def VARIANT(self):
            return self.getToken(OOBasicParser.VARIANT, 0)

        def VERSION(self):
            return self.getToken(OOBasicParser.VERSION, 0)

        def WEND(self):
            return self.getToken(OOBasicParser.WEND, 0)

        def WHILE(self):
            return self.getToken(OOBasicParser.WHILE, 0)

        def WIDTH(self):
            return self.getToken(OOBasicParser.WIDTH, 0)

        def WITH(self):
            return self.getToken(OOBasicParser.WITH, 0)

        def WRITE(self):
            return self.getToken(OOBasicParser.WRITE, 0)

        def XOR(self):
            return self.getToken(OOBasicParser.XOR, 0)

        def getRuleIndex(self):
            return OOBasicParser.RULE_ambiguousKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousKeyword" ):
                listener.enterAmbiguousKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousKeyword" ):
                listener.exitAmbiguousKeyword(self)




    def ambiguousKeyword(self):

        localctx = OOBasicParser.AmbiguousKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_ambiguousKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2290
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OOBasicParser.ACCESS) | (1 << OOBasicParser.APPEND) | (1 << OOBasicParser.ALIAS) | (1 << OOBasicParser.AND) | (1 << OOBasicParser.AS) | (1 << OOBasicParser.BEEP) | (1 << OOBasicParser.BEGIN) | (1 << OOBasicParser.BINARY) | (1 << OOBasicParser.BOOLEAN) | (1 << OOBasicParser.BYVAL) | (1 << OOBasicParser.BYREF) | (1 << OOBasicParser.BYTE) | (1 << OOBasicParser.CASE) | (1 << OOBasicParser.CHDIR) | (1 << OOBasicParser.CHDRIVE) | (1 << OOBasicParser.CALL) | (1 << OOBasicParser.CLASS) | (1 << OOBasicParser.CLOSE) | (1 << OOBasicParser.CONST) | (1 << OOBasicParser.DATE) | (1 << OOBasicParser.DEFBOOL) | (1 << OOBasicParser.DEFBYTE) | (1 << OOBasicParser.DEFDATE) | (1 << OOBasicParser.DEFDBL) | (1 << OOBasicParser.DEFDEC) | (1 << OOBasicParser.DEFCUR) | (1 << OOBasicParser.DEFINT) | (1 << OOBasicParser.DEFLNG) | (1 << OOBasicParser.DEFOBJ) | (1 << OOBasicParser.DEFSNG) | (1 << OOBasicParser.DEFSTR) | (1 << OOBasicParser.DEFVAR) | (1 << OOBasicParser.DIM) | (1 << OOBasicParser.DO) | (1 << OOBasicParser.DOUBLE) | (1 << OOBasicParser.EACH) | (1 << OOBasicParser.ELSE) | (1 << OOBasicParser.ELSEIF) | (1 << OOBasicParser.END) | (1 << OOBasicParser.EQV) | (1 << OOBasicParser.ERROR) | (1 << OOBasicParser.FALSE) | (1 << OOBasicParser.FILECOPY) | (1 << OOBasicParser.FOR) | (1 << OOBasicParser.FUNCTION) | (1 << OOBasicParser.GLOBAL) | (1 << OOBasicParser.GOTO) | (1 << OOBasicParser.IF) | (1 << OOBasicParser.IMP) | (1 << OOBasicParser.IN) | (1 << OOBasicParser.INPUT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (OOBasicParser.INTEGER - 64)) | (1 << (OOBasicParser.LONG - 64)) | (1 << (OOBasicParser.LOOP - 64)) | (1 << (OOBasicParser.LEN - 64)) | (1 << (OOBasicParser.LET - 64)) | (1 << (OOBasicParser.ME - 64)) | (1 << (OOBasicParser.MID - 64)) | (1 << (OOBasicParser.MKDIR - 64)) | (1 << (OOBasicParser.MOD - 64)) | (1 << (OOBasicParser.NAME - 64)) | (1 << (OOBasicParser.NEXT - 64)) | (1 << (OOBasicParser.NEW - 64)) | (1 << (OOBasicParser.NOT - 64)) | (1 << (OOBasicParser.NOTHING - 64)) | (1 << (OOBasicParser.NULL - 64)) | (1 << (OOBasicParser.OBJECT - 64)) | (1 << (OOBasicParser.ON - 64)) | (1 << (OOBasicParser.OPEN - 64)) | (1 << (OOBasicParser.OPTIONAL - 64)) | (1 << (OOBasicParser.OR - 64)) | (1 << (OOBasicParser.OUTPUT - 64)) | (1 << (OOBasicParser.PRESERVE - 64)) | (1 << (OOBasicParser.PRINT - 64)) | (1 << (OOBasicParser.PRIVATE - 64)) | (1 << (OOBasicParser.PUBLIC - 64)) | (1 << (OOBasicParser.PUT - 64)) | (1 << (OOBasicParser.RANDOM - 64)) | (1 << (OOBasicParser.RANDOMIZE - 64)) | (1 << (OOBasicParser.READ - 64)) | (1 << (OOBasicParser.REDIM - 64)) | (1 << (OOBasicParser.REM - 64)) | (1 << (OOBasicParser.RESET - 64)) | (1 << (OOBasicParser.RESUME - 64)) | (1 << (OOBasicParser.RMDIR - 64)) | (1 << (OOBasicParser.SELECT - 64)) | (1 << (OOBasicParser.SET - 64)) | (1 << (OOBasicParser.STATIC - 64)) | (1 << (OOBasicParser.STEP - 64)) | (1 << (OOBasicParser.STOP - 64)) | (1 << (OOBasicParser.STRING - 64)) | (1 << (OOBasicParser.SUB - 64)) | (1 << (OOBasicParser.TAB - 64)) | (1 << (OOBasicParser.TEXT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (OOBasicParser.THEN - 128)) | (1 << (OOBasicParser.TIME - 128)) | (1 << (OOBasicParser.TO - 128)) | (1 << (OOBasicParser.TRUE - 128)) | (1 << (OOBasicParser.TYPE - 128)) | (1 << (OOBasicParser.TYPEOF - 128)) | (1 << (OOBasicParser.UNTIL - 128)) | (1 << (OOBasicParser.VARIANT - 128)) | (1 << (OOBasicParser.VERSION - 128)) | (1 << (OOBasicParser.WEND - 128)) | (1 << (OOBasicParser.WHILE - 128)) | (1 << (OOBasicParser.WIDTH - 128)) | (1 << (OOBasicParser.WITH - 128)) | (1 << (OOBasicParser.WRITE - 128)) | (1 << (OOBasicParser.XOR - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[71] = self.valueStmt_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def valueStmt_sempred(self, localctx:ValueStmtContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 4)
         




