# Generated from SQLiteParser.g4 by ANTLR 4.9.2
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *

if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00d2")
        buf.write("\u083d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\3\2\3\2\7\2\u00e7\n\2\f\2\16\2\u00ea\13\2\3")
        buf.write("\2\3\2\3\3\3\3\3\3\3\4\7\4\u00f2\n\4\f\4\16\4\u00f5\13")
        buf.write("\4\3\4\3\4\6\4\u00f9\n\4\r\4\16\4\u00fa\3\4\7\4\u00fe")
        buf.write("\n\4\f\4\16\4\u0101\13\4\3\4\7\4\u0104\n\4\f\4\16\4\u0107")
        buf.write("\13\4\3\5\3\5\3\5\5\5\u010c\n\5\5\5\u010e\n\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0128\n\5\3\6\3")
        buf.write("\6\3\6\3\6\3\6\5\6\u012f\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u0136")
        buf.write("\n\6\3\6\3\6\3\6\3\6\5\6\u013c\n\6\3\6\3\6\5\6\u0140\n")
        buf.write("\6\3\6\5\6\u0143\n\6\3\7\3\7\3\7\3\7\3\7\5\7\u014a\n\7")
        buf.write("\3\7\5\7\u014d\n\7\3\b\3\b\5\b\u0151\n\b\3\b\3\b\3\b\3")
        buf.write("\b\3\t\3\t\5\t\u0159\n\t\3\t\3\t\5\t\u015d\n\t\5\t\u015f")
        buf.write("\n\t\3\n\3\n\5\n\u0163\n\n\3\13\3\13\5\13\u0167\n\13\3")
        buf.write("\13\3\13\5\13\u016b\n\13\3\13\5\13\u016e\n\13\3\f\3\f")
        buf.write("\3\f\3\r\3\r\5\r\u0175\n\r\3\r\3\r\3\16\3\16\5\16\u017b")
        buf.write("\n\16\3\16\3\16\3\16\3\16\5\16\u0181\n\16\3\16\3\16\3")
        buf.write("\16\5\16\u0186\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\7\16\u018f\n\16\f\16\16\16\u0192\13\16\3\16\3\16\3\16")
        buf.write("\5\16\u0197\n\16\3\17\3\17\5\17\u019b\n\17\3\17\3\17\5")
        buf.write("\17\u019f\n\17\3\17\5\17\u01a2\n\17\3\20\3\20\5\20\u01a6")
        buf.write("\n\20\3\20\3\20\3\20\3\20\5\20\u01ac\n\20\3\20\3\20\3")
        buf.write("\20\5\20\u01b1\n\20\3\20\3\20\3\20\3\20\3\20\7\20\u01b8")
        buf.write("\n\20\f\20\16\20\u01bb\13\20\3\20\3\20\7\20\u01bf\n\20")
        buf.write("\f\20\16\20\u01c2\13\20\3\20\3\20\3\20\5\20\u01c7\n\20")
        buf.write("\3\20\3\20\5\20\u01cb\n\20\3\21\3\21\5\21\u01cf\n\21\3")
        buf.write("\21\7\21\u01d2\n\21\f\21\16\21\u01d5\13\21\3\22\6\22\u01d8")
        buf.write("\n\22\r\22\16\22\u01d9\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\5\22\u01e6\n\22\3\23\3\23\5\23\u01ea")
        buf.write("\n\23\3\23\3\23\3\23\5\23\u01ef\n\23\3\23\5\23\u01f2\n")
        buf.write("\23\3\23\5\23\u01f5\n\23\3\23\3\23\3\23\5\23\u01fa\n\23")
        buf.write("\3\23\5\23\u01fd\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\5\23\u020b\n\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\5\23\u0212\n\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\5\23\u0219\n\23\5\23\u021b\n\23\3\24\5\24\u021e\n")
        buf.write("\24\3\24\3\24\3\25\3\25\5\25\u0224\n\25\3\25\3\25\3\25")
        buf.write("\5\25\u0229\n\25\3\25\3\25\3\25\3\25\7\25\u022f\n\25\f")
        buf.write("\25\16\25\u0232\13\25\3\25\3\25\5\25\u0236\n\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25")
        buf.write("\u0243\n\25\f\25\16\25\u0246\13\25\3\25\3\25\3\25\5\25")
        buf.write("\u024b\n\25\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u0253\n")
        buf.write("\26\f\26\16\26\u0256\13\26\3\26\3\26\5\26\u025a\n\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0264\n\26")
        buf.write("\3\26\3\26\7\26\u0268\n\26\f\26\16\26\u026b\13\26\3\26")
        buf.write("\5\26\u026e\n\26\3\26\3\26\3\26\5\26\u0273\n\26\5\26\u0275")
        buf.write("\n\26\3\27\3\27\3\27\3\27\3\30\3\30\5\30\u027d\n\30\3")
        buf.write("\30\3\30\3\30\3\30\5\30\u0283\n\30\3\30\3\30\3\30\5\30")
        buf.write("\u0288\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u028f\n\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u0298\n\30\f\30")
        buf.write("\16\30\u029b\13\30\5\30\u029d\n\30\5\30\u029f\n\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u02a6\n\30\3\30\3\30\5\30\u02aa")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u02b1\n\30\3\30\3")
        buf.write("\30\6\30\u02b5\n\30\r\30\16\30\u02b6\3\30\3\30\3\31\3")
        buf.write("\31\5\31\u02bd\n\31\3\31\3\31\3\31\3\31\5\31\u02c3\n\31")
        buf.write("\3\31\3\31\3\31\5\31\u02c8\n\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\7\31\u02cf\n\31\f\31\16\31\u02d2\13\31\3\31\3\31\5")
        buf.write("\31\u02d6\n\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\5\32\u02e1\n\32\3\32\3\32\3\32\5\32\u02e6\n\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u02ef\n\32\f\32")
        buf.write("\16\32\u02f2\13\32\3\32\3\32\5\32\u02f6\n\32\3\33\3\33")
        buf.write("\5\33\u02fa\n\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\7\33\u0308\n\33\f\33\16\33\u030b")
        buf.write("\13\33\3\34\3\34\3\34\3\34\3\34\7\34\u0312\n\34\f\34\16")
        buf.write("\34\u0315\13\34\3\34\3\34\5\34\u0319\n\34\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\5\35\u0321\n\35\3\35\3\35\3\35\3\36")
        buf.write("\3\36\3\36\3\36\3\36\7\36\u032b\n\36\f\36\16\36\u032e")
        buf.write("\13\36\3\36\3\36\5\36\u0332\n\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\3\37\5\37\u033a\n\37\3\37\3\37\3\37\3\37\3\37\5\37")
        buf.write("\u0341\n\37\3 \5 \u0344\n \3 \3 \3 \3 \3 \5 \u034b\n ")
        buf.write("\3 \5 \u034e\n \3 \5 \u0351\n \3!\3!\5!\u0355\n!\3!\3")
        buf.write("!\3\"\3\"\3\"\3\"\5\"\u035d\n\"\3\"\3\"\3\"\5\"\u0362")
        buf.write("\n\"\3\"\3\"\3#\3#\3#\3#\3#\3#\5#\u036c\n#\3#\3#\3#\5")
        buf.write("#\u0371\n#\3#\3#\3#\3#\3#\3#\3#\5#\u037a\n#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\7#\u0393\n#\f#\16#\u0396\13#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\5#\u03a1\n#\3#\3#\3#\3#\3#\5#\u03a8\n#\3#\3#\3")
        buf.write("#\7#\u03ad\n#\f#\16#\u03b0\13#\3#\5#\u03b3\n#\3#\3#\5")
        buf.write("#\u03b7\n#\3#\5#\u03ba\n#\3#\3#\3#\3#\7#\u03c0\n#\f#\16")
        buf.write("#\u03c3\13#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u03cf\n#")
        buf.write("\3#\5#\u03d2\n#\3#\3#\3#\3#\3#\3#\5#\u03da\n#\3#\3#\3")
        buf.write("#\3#\3#\6#\u03e1\n#\r#\16#\u03e2\3#\3#\5#\u03e7\n#\3#")
        buf.write("\3#\3#\5#\u03ec\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u040a")
        buf.write("\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0416\n#\3#\3#\3")
        buf.write("#\5#\u041b\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0427\n")
        buf.write("#\3#\3#\3#\3#\5#\u042d\n#\3#\3#\3#\3#\3#\5#\u0434\n#\3")
        buf.write("#\3#\5#\u0438\n#\3#\3#\3#\3#\3#\3#\7#\u0440\n#\f#\16#")
        buf.write("\u0443\13#\5#\u0445\n#\3#\3#\3#\3#\5#\u044b\n#\3#\3#\3")
        buf.write("#\3#\5#\u0451\n#\3#\3#\3#\3#\3#\7#\u0458\n#\f#\16#\u045b")
        buf.write("\13#\5#\u045d\n#\3#\3#\5#\u0461\n#\7#\u0463\n#\f#\16#")
        buf.write("\u0466\13#\3$\3$\3$\3$\3$\3$\5$\u046e\n$\3$\3$\3%\3%\3")
        buf.write("&\5&\u0475\n&\3&\3&\3&\3&\3&\5&\u047c\n&\3&\3&\3&\3&\5")
        buf.write("&\u0482\n&\3&\3&\3&\5&\u0487\n&\3&\3&\3&\3&\7&\u048d\n")
        buf.write("&\f&\16&\u0490\13&\3&\3&\5&\u0494\n&\3&\3&\3&\3&\3&\7")
        buf.write("&\u049b\n&\f&\16&\u049e\13&\3&\3&\3&\3&\3&\3&\7&\u04a6")
        buf.write("\n&\f&\16&\u04a9\13&\3&\3&\7&\u04ad\n&\f&\16&\u04b0\13")
        buf.write("&\3&\5&\u04b3\n&\3&\5&\u04b6\n&\3&\3&\5&\u04ba\n&\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\7\'\u04c2\n\'\f\'\16\'\u04c5\13\'")
        buf.write("\3\'\3\'\3\'\5\'\u04ca\n\'\5\'\u04cc\n\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\5\'\u04d4\n\'\3\'\3\'\3\'\3\'\3\'\5\'\u04db")
        buf.write("\n\'\3\'\3\'\3\'\7\'\u04e0\n\'\f\'\16\'\u04e3\13\'\3\'")
        buf.write("\3\'\5\'\u04e7\n\'\5\'\u04e9\n\'\3(\3(\3(\3(\5(\u04ef")
        buf.write("\n(\3(\3(\3(\3(\3(\3(\3(\5(\u04f8\n(\3)\3)\3)\5)\u04fd")
        buf.write("\n)\3*\3*\3*\3*\3*\5*\u0504\n*\3*\3*\5*\u0508\n*\5*\u050a")
        buf.write("\n*\3+\5+\u050d\n+\3+\3+\3+\3+\7+\u0513\n+\f+\16+\u0516")
        buf.write("\13+\3+\5+\u0519\n+\3+\5+\u051c\n+\3,\3,\3,\3,\5,\u0522")
        buf.write("\n,\7,\u0524\n,\f,\16,\u0527\13,\3-\3-\3-\3-\3-\3-\5-")
        buf.write("\u052f\n-\3.\3.\5.\u0533\n.\3.\3.\3.\7.\u0538\n.\f.\16")
        buf.write(".\u053b\13.\3.\3.\3.\3.\7.\u0541\n.\f.\16.\u0544\13.\3")
        buf.write(".\5.\u0547\n.\5.\u0549\n.\3.\3.\5.\u054d\n.\3.\3.\3.\3")
        buf.write(".\3.\7.\u0554\n.\f.\16.\u0557\13.\3.\3.\5.\u055b\n.\5")
        buf.write(".\u055d\n.\3.\3.\3.\3.\3.\3.\3.\3.\3.\7.\u0568\n.\f.\16")
        buf.write(".\u056b\13.\5.\u056d\n.\3.\3.\3.\3.\3.\7.\u0574\n.\f.")
        buf.write("\16.\u0577\13.\3.\3.\3.\3.\3.\3.\7.\u057f\n.\f.\16.\u0582")
        buf.write("\13.\3.\3.\7.\u0586\n.\f.\16.\u0589\13.\5.\u058b\n.\3")
        buf.write("/\3/\3\60\5\60\u0590\n\60\3\60\3\60\5\60\u0594\n\60\3")
        buf.write("\60\5\60\u0597\n\60\3\61\5\61\u059a\n\61\3\61\3\61\3\61")
        buf.write("\5\61\u059f\n\61\3\61\3\61\5\61\u05a3\n\61\3\61\6\61\u05a6")
        buf.write("\n\61\r\61\16\61\u05a7\3\61\5\61\u05ab\n\61\3\61\5\61")
        buf.write("\u05ae\n\61\3\62\3\62\3\62\5\62\u05b3\n\62\3\62\3\62\5")
        buf.write("\62\u05b7\n\62\3\62\5\62\u05ba\n\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\5\62\u05c1\n\62\3\62\3\62\3\62\5\62\u05c6\n\62\3")
        buf.write("\62\3\62\3\62\3\62\3\62\7\62\u05cd\n\62\f\62\16\62\u05d0")
        buf.write("\13\62\3\62\3\62\5\62\u05d4\n\62\3\62\5\62\u05d7\n\62")
        buf.write("\3\62\3\62\3\62\3\62\7\62\u05dd\n\62\f\62\16\62\u05e0")
        buf.write("\13\62\3\62\5\62\u05e3\n\62\3\62\3\62\3\62\3\62\3\62\3")
        buf.write("\62\5\62\u05eb\n\62\3\62\5\62\u05ee\n\62\5\62\u05f0\n")
        buf.write("\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u05f9\n\63")
        buf.write("\3\63\5\63\u05fc\n\63\5\63\u05fe\n\63\3\64\3\64\5\64\u0602")
        buf.write("\n\64\3\64\3\64\5\64\u0606\n\64\3\64\3\64\5\64\u060a\n")
        buf.write("\64\3\64\3\64\5\64\u060e\n\64\3\64\5\64\u0611\n\64\3\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u061a\n\65\f\65\16")
        buf.write("\65\u061d\13\65\3\65\3\65\5\65\u0621\n\65\3\66\3\66\5")
        buf.write("\66\u0625\n\66\3\66\3\66\5\66\u0629\n\66\3\67\5\67\u062c")
        buf.write("\n\67\3\67\3\67\3\67\5\67\u0631\n\67\3\67\3\67\3\67\3")
        buf.write("\67\5\67\u0637\n\67\3\67\3\67\3\67\3\67\3\67\5\67\u063e")
        buf.write("\n\67\3\67\3\67\3\67\7\67\u0643\n\67\f\67\16\67\u0646")
        buf.write("\13\67\3\67\3\67\5\67\u064a\n\67\38\38\38\38\78\u0650")
        buf.write("\n8\f8\168\u0653\138\38\38\39\59\u0658\n9\39\39\39\59")
        buf.write("\u065d\n9\39\39\39\39\59\u0663\n9\39\39\39\39\39\59\u066a")
        buf.write("\n9\39\39\39\79\u066f\n9\f9\169\u0672\139\39\39\59\u0676")
        buf.write("\n9\39\59\u0679\n9\39\59\u067c\n9\3:\3:\3:\5:\u0681\n")
        buf.write(":\3:\3:\3:\5:\u0686\n:\3:\3:\3:\3:\3:\5:\u068d\n:\3;\3")
        buf.write(";\5;\u0691\n;\3;\3;\5;\u0695\n;\3<\3<\3<\3<\3<\3<\3=\3")
        buf.write("=\5=\u069f\n=\3=\3=\3=\3=\3=\7=\u06a6\n=\f=\16=\u06a9")
        buf.write("\13=\5=\u06ab\n=\3=\3=\3=\3=\3=\7=\u06b2\n=\f=\16=\u06b5")
        buf.write("\13=\3=\5=\u06b8\n=\3=\3=\3>\3>\3>\3>\5>\u06c0\n>\3>\3")
        buf.write(">\3>\3>\3>\7>\u06c7\n>\f>\16>\u06ca\13>\5>\u06cc\n>\3")
        buf.write(">\3>\3>\3>\3>\7>\u06d3\n>\f>\16>\u06d6\13>\5>\u06d8\n")
        buf.write(">\3>\5>\u06db\n>\3>\5>\u06de\n>\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\5?\u06e8\n?\3@\3@\3@\3@\3@\3@\3@\5@\u06f1\n@\3A\3A\3")
        buf.write("A\3A\3A\7A\u06f8\nA\fA\16A\u06fb\13A\3A\5A\u06fe\nA\3")
        buf.write("A\3A\3B\3B\3B\5B\u0705\nB\3B\3B\3B\7B\u070a\nB\fB\16B")
        buf.write("\u070d\13B\3B\5B\u0710\nB\3B\3B\5B\u0714\nB\3C\3C\3C\3")
        buf.write("C\3C\7C\u071b\nC\fC\16C\u071e\13C\3C\5C\u0721\nC\3C\3")
        buf.write("C\5C\u0725\nC\3C\3C\3C\5C\u072a\nC\3D\3D\5D\u072e\nD\3")
        buf.write("D\3D\3D\7D\u0733\nD\fD\16D\u0736\13D\3E\3E\3E\3E\3E\7")
        buf.write("E\u073d\nE\fE\16E\u0740\13E\3F\3F\3F\3F\5F\u0746\nF\3")
        buf.write("G\3G\3G\5G\u074b\nG\3G\5G\u074e\nG\3G\3G\5G\u0752\nG\3")
        buf.write("H\3H\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u0760\nI\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\3J\5J\u076c\nJ\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\5K\u0775\nK\3L\3L\3L\3L\3L\3L\3L\5L\u077e\nL\3L\3L\5")
        buf.write("L\u0782\nL\3L\3L\3L\3L\3L\3L\3L\3L\5L\u078c\nL\3L\5L\u078f")
        buf.write("\nL\3L\3L\3L\3L\3L\3L\3L\5L\u0798\nL\3L\3L\3L\3L\3L\3")
        buf.write("L\3L\5L\u07a1\nL\3L\5L\u07a4\nL\3L\3L\3L\3L\5L\u07aa\n")
        buf.write("L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u07b8\nL\3L\3")
        buf.write("L\5L\u07bc\nL\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u07c7\nL\3")
        buf.write("L\3L\3L\5L\u07cc\nL\3M\3M\3M\3N\3N\3N\3O\3O\3O\6O\u07d7")
        buf.write("\nO\rO\16O\u07d8\3P\3P\3P\6P\u07de\nP\rP\16P\u07df\3Q")
        buf.write("\3Q\3Q\3Q\3R\3R\5R\u07e8\nR\3R\3R\3R\5R\u07ed\nR\7R\u07ef")
        buf.write("\nR\fR\16R\u07f2\13R\3S\3S\3T\3T\3U\3U\3V\3V\3W\3W\5W")
        buf.write("\u07fe\nW\3X\3X\3Y\3Y\3Z\3Z\3[\3[\3\\\3\\\3]\3]\3^\3^")
        buf.write("\3_\3_\3`\3`\3a\3a\3b\3b\3c\3c\3d\3d\3e\3e\3f\3f\3g\3")
        buf.write("g\3h\3h\3i\3i\3j\3j\3k\3k\3l\3l\3m\3m\3n\3n\3o\3o\3p\3")
        buf.write("p\3q\3q\3r\3r\3r\3r\3r\3r\3r\5r\u083b\nr\3r\2\3Ds\2\4")
        buf.write("\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\2!\5\2>>IIVV\4\2\63\63FF\3\2\u0088\u0089")
        buf.write("\4\2\u0095\u0095\u00ae\u00ae\3\2\n\13\4\2??\u0090\u0090")
        buf.write("\4\2<<ll\4\2>>VV\7\2\35\35LLUU~~\u0081\u0081\6\2XX\u0087")
        buf.write("\u0087\u008d\u008d\u0094\u0094\3\2\u00bd\u00bf\3\2\u00c1")
        buf.write("\u00c6\4\2\u00c1\u00c6\u00c8\u00c8\4\2\t\t\16\17\3\2\20")
        buf.write("\23\3\2\24\27\6\2QQeeggzz\5\2\35\35LL\u0081\u0081\7\2")
        buf.write("8:ll\u00af\u00b0\u00cb\u00cb\u00cd\u00ce\4\2!!BB\5\2\u0083")
        buf.write("\u0083\u009d\u009d\u00b6\u00b6\4\2\7\7nn\3\2\u00b3\u00b4")
        buf.write("\4\2&&@@\4\2\u009a\u009a\u00a5\u00a5\4\2\u00a2\u00a2\u00a9")
        buf.write("\u00a9\4\2\u00a3\u00a3\u00aa\u00ab\4\2\u00a4\u00a4\u00a6")
        buf.write("\u00a6\4\2\n\fjj\4\2\u00ca\u00ca\u00cd\u00cd\3\2\35\u00b7")
        buf.write("\2\u095b\2\u00e8\3\2\2\2\4\u00ed\3\2\2\2\6\u00f3\3\2\2")
        buf.write("\2\b\u010d\3\2\2\2\n\u0129\3\2\2\2\f\u0144\3\2\2\2\16")
        buf.write("\u014e\3\2\2\2\20\u0156\3\2\2\2\22\u0160\3\2\2\2\24\u0164")
        buf.write("\3\2\2\2\26\u016f\3\2\2\2\30\u0172\3\2\2\2\32\u0178\3")
        buf.write("\2\2\2\34\u019a\3\2\2\2\36\u01a3\3\2\2\2 \u01cc\3\2\2")
        buf.write("\2\"\u01d7\3\2\2\2$\u01e9\3\2\2\2&\u021d\3\2\2\2(\u0223")
        buf.write("\3\2\2\2*\u024c\3\2\2\2,\u0276\3\2\2\2.\u027a\3\2\2\2")
        buf.write("\60\u02ba\3\2\2\2\62\u02da\3\2\2\2\64\u02f7\3\2\2\2\66")
        buf.write("\u030c\3\2\2\28\u031a\3\2\2\2:\u0325\3\2\2\2<\u0339\3")
        buf.write("\2\2\2>\u0343\3\2\2\2@\u0352\3\2\2\2B\u0358\3\2\2\2D\u03eb")
        buf.write("\3\2\2\2F\u0467\3\2\2\2H\u0471\3\2\2\2J\u04b9\3\2\2\2")
        buf.write("L\u04bb\3\2\2\2N\u04ea\3\2\2\2P\u04fc\3\2\2\2R\u04fe\3")
        buf.write("\2\2\2T\u050c\3\2\2\2V\u051d\3\2\2\2X\u052e\3\2\2\2Z\u058a")
        buf.write("\3\2\2\2\\\u058c\3\2\2\2^\u058f\3\2\2\2`\u0599\3\2\2\2")
        buf.write("b\u05ef\3\2\2\2d\u05fd\3\2\2\2f\u0610\3\2\2\2h\u0620\3")
        buf.write("\2\2\2j\u0628\3\2\2\2l\u062b\3\2\2\2n\u064b\3\2\2\2p\u0657")
        buf.write("\3\2\2\2r\u0680\3\2\2\2t\u068e\3\2\2\2v\u0696\3\2\2\2")
        buf.write("x\u069c\3\2\2\2z\u06bb\3\2\2\2|\u06df\3\2\2\2~\u06e9\3")
        buf.write("\2\2\2\u0080\u06f2\3\2\2\2\u0082\u0701\3\2\2\2\u0084\u0715")
        buf.write("\3\2\2\2\u0086\u072b\3\2\2\2\u0088\u0737\3\2\2\2\u008a")
        buf.write("\u0741\3\2\2\2\u008c\u0747\3\2\2\2\u008e\u0753\3\2\2\2")
        buf.write("\u0090\u075f\3\2\2\2\u0092\u076b\3\2\2\2\u0094\u0774\3")
        buf.write("\2\2\2\u0096\u07cb\3\2\2\2\u0098\u07cd\3\2\2\2\u009a\u07d0")
        buf.write("\3\2\2\2\u009c\u07d3\3\2\2\2\u009e\u07da\3\2\2\2\u00a0")
        buf.write("\u07e1\3\2\2\2\u00a2\u07e5\3\2\2\2\u00a4\u07f3\3\2\2\2")
        buf.write("\u00a6\u07f5\3\2\2\2\u00a8\u07f7\3\2\2\2\u00aa\u07f9\3")
        buf.write("\2\2\2\u00ac\u07fd\3\2\2\2\u00ae\u07ff\3\2\2\2\u00b0\u0801")
        buf.write("\3\2\2\2\u00b2\u0803\3\2\2\2\u00b4\u0805\3\2\2\2\u00b6")
        buf.write("\u0807\3\2\2\2\u00b8\u0809\3\2\2\2\u00ba\u080b\3\2\2\2")
        buf.write("\u00bc\u080d\3\2\2\2\u00be\u080f\3\2\2\2\u00c0\u0811\3")
        buf.write("\2\2\2\u00c2\u0813\3\2\2\2\u00c4\u0815\3\2\2\2\u00c6\u0817")
        buf.write("\3\2\2\2\u00c8\u0819\3\2\2\2\u00ca\u081b\3\2\2\2\u00cc")
        buf.write("\u081d\3\2\2\2\u00ce\u081f\3\2\2\2\u00d0\u0821\3\2\2\2")
        buf.write("\u00d2\u0823\3\2\2\2\u00d4\u0825\3\2\2\2\u00d6\u0827\3")
        buf.write("\2\2\2\u00d8\u0829\3\2\2\2\u00da\u082b\3\2\2\2\u00dc\u082d")
        buf.write("\3\2\2\2\u00de\u082f\3\2\2\2\u00e0\u0831\3\2\2\2\u00e2")
        buf.write("\u083a\3\2\2\2\u00e4\u00e7\5\6\4\2\u00e5\u00e7\5\4\3\2")
        buf.write("\u00e6\u00e4\3\2\2\2\u00e6\u00e5\3\2\2\2\u00e7\u00ea\3")
        buf.write("\2\2\2\u00e8\u00e6\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9\u00eb")
        buf.write("\3\2\2\2\u00ea\u00e8\3\2\2\2\u00eb\u00ec\7\2\2\3\u00ec")
        buf.write("\3\3\2\2\2\u00ed\u00ee\7\u00d2\2\2\u00ee\u00ef\b\3\1\2")
        buf.write("\u00ef\5\3\2\2\2\u00f0\u00f2\7\3\2\2\u00f1\u00f0\3\2\2")
        buf.write("\2\u00f2\u00f5\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f3\u00f4")
        buf.write("\3\2\2\2\u00f4\u00f6\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f6")
        buf.write("\u00ff\5\b\5\2\u00f7\u00f9\7\3\2\2\u00f8\u00f7\3\2\2\2")
        buf.write("\u00f9\u00fa\3\2\2\2\u00fa\u00f8\3\2\2\2\u00fa\u00fb\3")
        buf.write("\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fe\5\b\5\2\u00fd\u00f8")
        buf.write("\3\2\2\2\u00fe\u0101\3\2\2\2\u00ff\u00fd\3\2\2\2\u00ff")
        buf.write("\u0100\3\2\2\2\u0100\u0105\3\2\2\2\u0101\u00ff\3\2\2\2")
        buf.write("\u0102\u0104\7\3\2\2\u0103\u0102\3\2\2\2\u0104\u0107\3")
        buf.write("\2\2\2\u0105\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106\7")
        buf.write("\3\2\2\2\u0107\u0105\3\2\2\2\u0108\u010b\7K\2\2\u0109")
        buf.write("\u010a\7v\2\2\u010a\u010c\7s\2\2\u010b\u0109\3\2\2\2\u010b")
        buf.write("\u010c\3\2\2\2\u010c\u010e\3\2\2\2\u010d\u0108\3\2\2\2")
        buf.write("\u010d\u010e\3\2\2\2\u010e\u0127\3\2\2\2\u010f\u0128\5")
        buf.write("\n\6\2\u0110\u0128\5\f\7\2\u0111\u0128\5\16\b\2\u0112")
        buf.write("\u0128\5\20\t\2\u0113\u0128\5\22\n\2\u0114\u0128\5\32")
        buf.write("\16\2\u0115\u0128\5\36\20\2\u0116\u0128\5.\30\2\u0117")
        buf.write("\u0128\5\60\31\2\u0118\u0128\5\62\32\2\u0119\u0128\5<")
        buf.write("\37\2\u011a\u0128\5> \2\u011b\u0128\5@!\2\u011c\u0128")
        buf.write("\5B\"\2\u011d\u0128\5J&\2\u011e\u0128\5N(\2\u011f\u0128")
        buf.write("\5R*\2\u0120\u0128\5\30\r\2\u0121\u0128\5\24\13\2\u0122")
        buf.write("\u0128\5\26\f\2\u0123\u0128\5T+\2\u0124\u0128\5l\67\2")
        buf.write("\u0125\u0128\5p9\2\u0126\u0128\5t;\2\u0127\u010f\3\2\2")
        buf.write("\2\u0127\u0110\3\2\2\2\u0127\u0111\3\2\2\2\u0127\u0112")
        buf.write("\3\2\2\2\u0127\u0113\3\2\2\2\u0127\u0114\3\2\2\2\u0127")
        buf.write("\u0115\3\2\2\2\u0127\u0116\3\2\2\2\u0127\u0117\3\2\2\2")
        buf.write("\u0127\u0118\3\2\2\2\u0127\u0119\3\2\2\2\u0127\u011a\3")
        buf.write("\2\2\2\u0127\u011b\3\2\2\2\u0127\u011c\3\2\2\2\u0127\u011d")
        buf.write("\3\2\2\2\u0127\u011e\3\2\2\2\u0127\u011f\3\2\2\2\u0127")
        buf.write("\u0120\3\2\2\2\u0127\u0121\3\2\2\2\u0127\u0122\3\2\2\2")
        buf.write("\u0127\u0123\3\2\2\2\u0127\u0124\3\2\2\2\u0127\u0125\3")
        buf.write("\2\2\2\u0127\u0126\3\2\2\2\u0128\t\3\2\2\2\u0129\u012a")
        buf.write("\7\"\2\2\u012a\u012e\7\u0087\2\2\u012b\u012c\5\u00b6\\")
        buf.write("\2\u012c\u012d\7\4\2\2\u012d\u012f\3\2\2\2\u012e\u012b")
        buf.write("\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u0130\3\2\2\2\u0130")
        buf.write("\u0142\5\u00b8]\2\u0131\u013b\7}\2\2\u0132\u0133\7\u008b")
        buf.write("\2\2\u0133\u013c\5\u00bc_\2\u0134\u0136\7\62\2\2\u0135")
        buf.write("\u0134\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0137\3\2\2\2")
        buf.write("\u0137\u0138\5\u00be`\2\u0138\u0139\7\u008b\2\2\u0139")
        buf.write("\u013a\5\u00be`\2\u013a\u013c\3\2\2\2\u013b\u0132\3\2")
        buf.write("\2\2\u013b\u0135\3\2\2\2\u013c\u0143\3\2\2\2\u013d\u013f")
        buf.write("\7\37\2\2\u013e\u0140\7\62\2\2\u013f\u013e\3\2\2\2\u013f")
        buf.write("\u0140\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0143\5 \21\2")
        buf.write("\u0142\u0131\3\2\2\2\u0142\u013d\3\2\2\2\u0143\13\3\2")
        buf.write("\2\2\u0144\u014c\7#\2\2\u0145\u014d\5\u00b6\\\2\u0146")
        buf.write("\u0147\5\u00b6\\\2\u0147\u0148\7\4\2\2\u0148\u014a\3\2")
        buf.write("\2\2\u0149\u0146\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u014b")
        buf.write("\3\2\2\2\u014b\u014d\5\u00ba^\2\u014c\u0145\3\2\2\2\u014c")
        buf.write("\u0149\3\2\2\2\u014c\u014d\3\2\2\2\u014d\r\3\2\2\2\u014e")
        buf.write("\u0150\7\'\2\2\u014f\u0151\7;\2\2\u0150\u014f\3\2\2\2")
        buf.write("\u0150\u0151\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0153\5")
        buf.write("D#\2\u0153\u0154\7%\2\2\u0154\u0155\5\u00b6\\\2\u0155")
        buf.write("\17\3\2\2\2\u0156\u0158\7*\2\2\u0157\u0159\t\2\2\2\u0158")
        buf.write("\u0157\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u015e\3\2\2\2")
        buf.write("\u015a\u015c\7\u008c\2\2\u015b\u015d\5\u00d2j\2\u015c")
        buf.write("\u015b\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015f\3\2\2\2")
        buf.write("\u015e\u015a\3\2\2\2\u015e\u015f\3\2\2\2\u015f\21\3\2")
        buf.write("\2\2\u0160\u0162\t\3\2\2\u0161\u0163\7\u008c\2\2\u0162")
        buf.write("\u0161\3\2\2\2\u0162\u0163\3\2\2\2\u0163\23\3\2\2\2\u0164")
        buf.write("\u0166\7\u0081\2\2\u0165\u0167\7\u008c\2\2\u0166\u0165")
        buf.write("\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u016d\3\2\2\2\u0168")
        buf.write("\u016a\7\u008b\2\2\u0169\u016b\7\u0084\2\2\u016a\u0169")
        buf.write("\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u016c\3\2\2\2\u016c")
        buf.write("\u016e\5\u00ceh\2\u016d\u0168\3\2\2\2\u016d\u016e\3\2")
        buf.write("\2\2\u016e\25\3\2\2\2\u016f\u0170\7\u0084\2\2\u0170\u0171")
        buf.write("\5\u00ceh\2\u0171\27\3\2\2\2\u0172\u0174\7|\2\2\u0173")
        buf.write("\u0175\7\u0084\2\2\u0174\u0173\3\2\2\2\u0174\u0175\3\2")
        buf.write("\2\2\u0175\u0176\3\2\2\2\u0176\u0177\5\u00ceh\2\u0177")
        buf.write("\31\3\2\2\2\u0178\u017a\7\66\2\2\u0179\u017b\7\u008f\2")
        buf.write("\2\u017a\u0179\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017c")
        buf.write("\3\2\2\2\u017c\u0180\7X\2\2\u017d\u017e\7T\2\2\u017e\u017f")
        buf.write("\7j\2\2\u017f\u0181\7J\2\2\u0180\u017d\3\2\2\2\u0180\u0181")
        buf.write("\3\2\2\2\u0181\u0185\3\2\2\2\u0182\u0183\5\u00b6\\\2\u0183")
        buf.write("\u0184\7\4\2\2\u0184\u0186\3\2\2\2\u0185\u0182\3\2\2\2")
        buf.write("\u0185\u0186\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u0188\5")
        buf.write("\u00c4c\2\u0188\u0189\7o\2\2\u0189\u018a\5\u00b8]\2\u018a")
        buf.write("\u018b\7\5\2\2\u018b\u0190\5\34\17\2\u018c\u018d\7\7\2")
        buf.write("\2\u018d\u018f\5\34\17\2\u018e\u018c\3\2\2\2\u018f\u0192")
        buf.write("\3\2\2\2\u0190\u018e\3\2\2\2\u0190\u0191\3\2\2\2\u0191")
        buf.write("\u0193\3\2\2\2\u0192\u0190\3\2\2\2\u0193\u0196\7\6\2\2")
        buf.write("\u0194\u0195\7\u0097\2\2\u0195\u0197\5D#\2\u0196\u0194")
        buf.write("\3\2\2\2\u0196\u0197\3\2\2\2\u0197\33\3\2\2\2\u0198\u019b")
        buf.write("\5\u00be`\2\u0199\u019b\5D#\2\u019a\u0198\3\2\2\2\u019a")
        buf.write("\u0199\3\2\2\2\u019b\u019e\3\2\2\2\u019c\u019d\7\61\2")
        buf.write("\2\u019d\u019f\5\u00c0a\2\u019e\u019c\3\2\2\2\u019e\u019f")
        buf.write("\3\2\2\2\u019f\u01a1\3\2\2\2\u01a0\u01a2\5\u008eH\2\u01a1")
        buf.write("\u01a0\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\35\3\2\2\2\u01a3")
        buf.write("\u01a5\7\66\2\2\u01a4\u01a6\t\4\2\2\u01a5\u01a4\3\2\2")
        buf.write("\2\u01a5\u01a6\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01ab")
        buf.write("\7\u0087\2\2\u01a8\u01a9\7T\2\2\u01a9\u01aa\7j\2\2\u01aa")
        buf.write("\u01ac\7J\2\2\u01ab\u01a8\3\2\2\2\u01ab\u01ac\3\2\2\2")
        buf.write("\u01ac\u01b0\3\2\2\2\u01ad\u01ae\5\u00b6\\\2\u01ae\u01af")
        buf.write("\7\4\2\2\u01af\u01b1\3\2\2\2\u01b0\u01ad\3\2\2\2\u01b0")
        buf.write("\u01b1\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01ca\5\u00b8")
        buf.write("]\2\u01b3\u01b4\7\5\2\2\u01b4\u01b9\5 \21\2\u01b5\u01b6")
        buf.write("\7\7\2\2\u01b6\u01b8\5 \21\2\u01b7\u01b5\3\2\2\2\u01b8")
        buf.write("\u01bb\3\2\2\2\u01b9\u01b7\3\2\2\2\u01b9\u01ba\3\2\2\2")
        buf.write("\u01ba\u01c0\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bc\u01bd\7")
        buf.write("\7\2\2\u01bd\u01bf\5(\25\2\u01be\u01bc\3\2\2\2\u01bf\u01c2")
        buf.write("\3\2\2\2\u01c0\u01be\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1")
        buf.write("\u01c3\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c3\u01c6\7\6\2\2")
        buf.write("\u01c4\u01c5\7\u0099\2\2\u01c5\u01c7\7\u00ca\2\2\u01c6")
        buf.write("\u01c4\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01cb\3\2\2\2")
        buf.write("\u01c8\u01c9\7%\2\2\u01c9\u01cb\5T+\2\u01ca\u01b3\3\2")
        buf.write("\2\2\u01ca\u01c8\3\2\2\2\u01cb\37\3\2\2\2\u01cc\u01ce")
        buf.write("\5\u00be`\2\u01cd\u01cf\5\"\22\2\u01ce\u01cd\3\2\2\2\u01ce")
        buf.write("\u01cf\3\2\2\2\u01cf\u01d3\3\2\2\2\u01d0\u01d2\5$\23\2")
        buf.write("\u01d1\u01d0\3\2\2\2\u01d2\u01d5\3\2\2\2\u01d3\u01d1\3")
        buf.write("\2\2\2\u01d3\u01d4\3\2\2\2\u01d4!\3\2\2\2\u01d5\u01d3")
        buf.write("\3\2\2\2\u01d6\u01d8\5\u00b2Z\2\u01d7\u01d6\3\2\2\2\u01d8")
        buf.write("\u01d9\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2")
        buf.write("\u01da\u01e5\3\2\2\2\u01db\u01dc\7\5\2\2\u01dc\u01dd\5")
        buf.write("&\24\2\u01dd\u01de\7\6\2\2\u01de\u01e6\3\2\2\2\u01df\u01e0")
        buf.write("\7\5\2\2\u01e0\u01e1\5&\24\2\u01e1\u01e2\7\7\2\2\u01e2")
        buf.write("\u01e3\5&\24\2\u01e3\u01e4\7\6\2\2\u01e4\u01e6\3\2\2\2")
        buf.write("\u01e5\u01db\3\2\2\2\u01e5\u01df\3\2\2\2\u01e5\u01e6\3")
        buf.write("\2\2\2\u01e6#\3\2\2\2\u01e7\u01e8\7\65\2\2\u01e8\u01ea")
        buf.write("\5\u00b2Z\2\u01e9\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea")
        buf.write("\u021a\3\2\2\2\u01eb\u01ec\7u\2\2\u01ec\u01ee\7c\2\2\u01ed")
        buf.write("\u01ef\5\u008eH\2\u01ee\u01ed\3\2\2\2\u01ee\u01ef\3\2")
        buf.write("\2\2\u01ef\u01f1\3\2\2\2\u01f0\u01f2\5,\27\2\u01f1\u01f0")
        buf.write("\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f4\3\2\2\2\u01f3")
        buf.write("\u01f5\7(\2\2\u01f4\u01f3\3\2\2\2\u01f4\u01f5\3\2\2\2")
        buf.write("\u01f5\u021b\3\2\2\2\u01f6\u01f7\7j\2\2\u01f7\u01fa\7")
        buf.write("l\2\2\u01f8\u01fa\7\u008f\2\2\u01f9\u01f6\3\2\2\2\u01f9")
        buf.write("\u01f8\3\2\2\2\u01fa\u01fc\3\2\2\2\u01fb\u01fd\5,\27\2")
        buf.write("\u01fc\u01fb\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u021b\3")
        buf.write("\2\2\2\u01fe\u01ff\7\60\2\2\u01ff\u0200\7\5\2\2\u0200")
        buf.write("\u0201\5D#\2\u0201\u0202\7\6\2\2\u0202\u021b\3\2\2\2\u0203")
        buf.write("\u020a\7<\2\2\u0204\u020b\5&\24\2\u0205\u020b\5H%\2\u0206")
        buf.write("\u0207\7\5\2\2\u0207\u0208\5D#\2\u0208\u0209\7\6\2\2\u0209")
        buf.write("\u020b\3\2\2\2\u020a\u0204\3\2\2\2\u020a\u0205\3\2\2\2")
        buf.write("\u020a\u0206\3\2\2\2\u020b\u021b\3\2\2\2\u020c\u020d\7")
        buf.write("\61\2\2\u020d\u021b\5\u00c0a\2\u020e\u021b\5*\26\2\u020f")
        buf.write("\u0210\7\u00ac\2\2\u0210\u0212\7\u00ad\2\2\u0211\u020f")
        buf.write("\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0213\3\2\2\2\u0213")
        buf.write("\u0214\7%\2\2\u0214\u0215\7\5\2\2\u0215\u0216\5D#\2\u0216")
        buf.write("\u0218\7\6\2\2\u0217\u0219\t\5\2\2\u0218\u0217\3\2\2\2")
        buf.write("\u0218\u0219\3\2\2\2\u0219\u021b\3\2\2\2\u021a\u01eb\3")
        buf.write("\2\2\2\u021a\u01f9\3\2\2\2\u021a\u01fe\3\2\2\2\u021a\u0203")
        buf.write("\3\2\2\2\u021a\u020c\3\2\2\2\u021a\u020e\3\2\2\2\u021a")
        buf.write("\u0211\3\2\2\2\u021b%\3\2\2\2\u021c\u021e\t\6\2\2\u021d")
        buf.write("\u021c\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u021f\3\2\2\2")
        buf.write("\u021f\u0220\7\u00cb\2\2\u0220\'\3\2\2\2\u0221\u0222\7")
        buf.write("\65\2\2\u0222\u0224\5\u00b2Z\2\u0223\u0221\3\2\2\2\u0223")
        buf.write("\u0224\3\2\2\2\u0224\u024a\3\2\2\2\u0225\u0226\7u\2\2")
        buf.write("\u0226\u0229\7c\2\2\u0227\u0229\7\u008f\2\2\u0228\u0225")
        buf.write("\3\2\2\2\u0228\u0227\3\2\2\2\u0229\u022a\3\2\2\2\u022a")
        buf.write("\u022b\7\5\2\2\u022b\u0230\5\34\17\2\u022c\u022d\7\7\2")
        buf.write("\2\u022d\u022f\5\34\17\2\u022e\u022c\3\2\2\2\u022f\u0232")
        buf.write("\3\2\2\2\u0230\u022e\3\2\2\2\u0230\u0231\3\2\2\2\u0231")
        buf.write("\u0233\3\2\2\2\u0232\u0230\3\2\2\2\u0233\u0235\7\6\2\2")
        buf.write("\u0234\u0236\5,\27\2\u0235\u0234\3\2\2\2\u0235\u0236\3")
        buf.write("\2\2\2\u0236\u024b\3\2\2\2\u0237\u0238\7\60\2\2\u0238")
        buf.write("\u0239\7\5\2\2\u0239\u023a\5D#\2\u023a\u023b\7\6\2\2\u023b")
        buf.write("\u024b\3\2\2\2\u023c\u023d\7N\2\2\u023d\u023e\7c\2\2\u023e")
        buf.write("\u023f\7\5\2\2\u023f\u0244\5\u00be`\2\u0240\u0241\7\7")
        buf.write("\2\2\u0241\u0243\5\u00be`\2\u0242\u0240\3\2\2\2\u0243")
        buf.write("\u0246\3\2\2\2\u0244\u0242\3\2\2\2\u0244\u0245\3\2\2\2")
        buf.write("\u0245\u0247\3\2\2\2\u0246\u0244\3\2\2\2\u0247\u0248\7")
        buf.write("\6\2\2\u0248\u0249\5*\26\2\u0249\u024b\3\2\2\2\u024a\u0228")
        buf.write("\3\2\2\2\u024a\u0237\3\2\2\2\u024a\u023c\3\2\2\2\u024b")
        buf.write(")\3\2\2\2\u024c\u024d\7y\2\2\u024d\u0259\5\u00c2b\2\u024e")
        buf.write("\u024f\7\5\2\2\u024f\u0254\5\u00be`\2\u0250\u0251\7\7")
        buf.write("\2\2\u0251\u0253\5\u00be`\2\u0252\u0250\3\2\2\2\u0253")
        buf.write("\u0256\3\2\2\2\u0254\u0252\3\2\2\2\u0254\u0255\3\2\2\2")
        buf.write("\u0255\u0257\3\2\2\2\u0256\u0254\3\2\2\2\u0257\u0258\7")
        buf.write("\6\2\2\u0258\u025a\3\2\2\2\u0259\u024e\3\2\2\2\u0259\u025a")
        buf.write("\3\2\2\2\u025a\u0269\3\2\2\2\u025b\u025c\7o\2\2\u025c")
        buf.write("\u0263\t\7\2\2\u025d\u025e\7\u0086\2\2\u025e\u0264\t\b")
        buf.write("\2\2\u025f\u0264\7-\2\2\u0260\u0264\7\177\2\2\u0261\u0262")
        buf.write("\7i\2\2\u0262\u0264\7\36\2\2\u0263\u025d\3\2\2\2\u0263")
        buf.write("\u025f\3\2\2\2\u0263\u0260\3\2\2\2\u0263\u0261\3\2\2\2")
        buf.write("\u0264\u0268\3\2\2\2\u0265\u0266\7g\2\2\u0266\u0268\5")
        buf.write("\u00b2Z\2\u0267\u025b\3\2\2\2\u0267\u0265\3\2\2\2\u0268")
        buf.write("\u026b\3\2\2\2\u0269\u0267\3\2\2\2\u0269\u026a\3\2\2\2")
        buf.write("\u026a\u0274\3\2\2\2\u026b\u0269\3\2\2\2\u026c\u026e\7")
        buf.write("j\2\2\u026d\u026c\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u026f")
        buf.write("\3\2\2\2\u026f\u0272\7=\2\2\u0270\u0271\7Z\2\2\u0271\u0273")
        buf.write("\t\t\2\2\u0272\u0270\3\2\2\2\u0272\u0273\3\2\2\2\u0273")
        buf.write("\u0275\3\2\2\2\u0274\u026d\3\2\2\2\u0274\u0275\3\2\2\2")
        buf.write("\u0275+\3\2\2\2\u0276\u0277\7o\2\2\u0277\u0278\7\64\2")
        buf.write("\2\u0278\u0279\t\n\2\2\u0279-\3\2\2\2\u027a\u027c\7\66")
        buf.write("\2\2\u027b\u027d\t\4\2\2\u027c\u027b\3\2\2\2\u027c\u027d")
        buf.write("\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u0282\7\u008d\2\2\u027f")
        buf.write("\u0280\7T\2\2\u0280\u0281\7j\2\2\u0281\u0283\7J\2\2\u0282")
        buf.write("\u027f\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u0287\3\2\2\2")
        buf.write("\u0284\u0285\5\u00b6\\\2\u0285\u0286\7\4\2\2\u0286\u0288")
        buf.write("\3\2\2\2\u0287\u0284\3\2\2\2\u0287\u0288\3\2\2\2\u0288")
        buf.write("\u0289\3\2\2\2\u0289\u028e\5\u00c6d\2\u028a\u028f\7)\2")
        buf.write("\2\u028b\u028f\7 \2\2\u028c\u028d\7]\2\2\u028d\u028f\7")
        buf.write("m\2\2\u028e\u028a\3\2\2\2\u028e\u028b\3\2\2\2\u028e\u028c")
        buf.write("\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u029e\3\2\2\2\u0290")
        buf.write("\u029f\7?\2\2\u0291\u029f\7\\\2\2\u0292\u029c\7\u0090")
        buf.write("\2\2\u0293\u0294\7m\2\2\u0294\u0299\5\u00be`\2\u0295\u0296")
        buf.write("\7\7\2\2\u0296\u0298\5\u00be`\2\u0297\u0295\3\2\2\2\u0298")
        buf.write("\u029b\3\2\2\2\u0299\u0297\3\2\2\2\u0299\u029a\3\2\2\2")
        buf.write("\u029a\u029d\3\2\2\2\u029b\u0299\3\2\2\2\u029c\u0293\3")
        buf.write("\2\2\2\u029c\u029d\3\2\2\2\u029d\u029f\3\2\2\2\u029e\u0290")
        buf.write("\3\2\2\2\u029e\u0291\3\2\2\2\u029e\u0292\3\2\2\2\u029f")
        buf.write("\u02a0\3\2\2\2\u02a0\u02a1\7o\2\2\u02a1\u02a5\5\u00b8")
        buf.write("]\2\u02a2\u02a3\7M\2\2\u02a3\u02a4\7D\2\2\u02a4\u02a6")
        buf.write("\7\u0082\2\2\u02a5\u02a2\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6")
        buf.write("\u02a9\3\2\2\2\u02a7\u02a8\7\u0096\2\2\u02a8\u02aa\5D")
        buf.write("#\2\u02a9\u02a7\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02ab")
        buf.write("\3\2\2\2\u02ab\u02b4\7*\2\2\u02ac\u02b1\5l\67\2\u02ad")
        buf.write("\u02b1\5J&\2\u02ae\u02b1\5<\37\2\u02af\u02b1\5T+\2\u02b0")
        buf.write("\u02ac\3\2\2\2\u02b0\u02ad\3\2\2\2\u02b0\u02ae\3\2\2\2")
        buf.write("\u02b0\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b3\7")
        buf.write("\3\2\2\u02b3\u02b5\3\2\2\2\u02b4\u02b0\3\2\2\2\u02b5\u02b6")
        buf.write("\3\2\2\2\u02b6\u02b4\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7")
        buf.write("\u02b8\3\2\2\2\u02b8\u02b9\7F\2\2\u02b9/\3\2\2\2\u02ba")
        buf.write("\u02bc\7\66\2\2\u02bb\u02bd\t\4\2\2\u02bc\u02bb\3\2\2")
        buf.write("\2\u02bc\u02bd\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02c2")
        buf.write("\7\u0094\2\2\u02bf\u02c0\7T\2\2\u02c0\u02c1\7j\2\2\u02c1")
        buf.write("\u02c3\7J\2\2\u02c2\u02bf\3\2\2\2\u02c2\u02c3\3\2\2\2")
        buf.write("\u02c3\u02c7\3\2\2\2\u02c4\u02c5\5\u00b6\\\2\u02c5\u02c6")
        buf.write("\7\4\2\2\u02c6\u02c8\3\2\2\2\u02c7\u02c4\3\2\2\2\u02c7")
        buf.write("\u02c8\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02d5\5\u00c8")
        buf.write("e\2\u02ca\u02cb\7\5\2\2\u02cb\u02d0\5\u00be`\2\u02cc\u02cd")
        buf.write("\7\7\2\2\u02cd\u02cf\5\u00be`\2\u02ce\u02cc\3\2\2\2\u02cf")
        buf.write("\u02d2\3\2\2\2\u02d0\u02ce\3\2\2\2\u02d0\u02d1\3\2\2\2")
        buf.write("\u02d1\u02d3\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d3\u02d4\7")
        buf.write("\6\2\2\u02d4\u02d6\3\2\2\2\u02d5\u02ca\3\2\2\2\u02d5\u02d6")
        buf.write("\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d8\7%\2\2\u02d8")
        buf.write("\u02d9\5T+\2\u02d9\61\3\2\2\2\u02da\u02db\7\66\2\2\u02db")
        buf.write("\u02dc\7\u0095\2\2\u02dc\u02e0\7\u0087\2\2\u02dd\u02de")
        buf.write("\7T\2\2\u02de\u02df\7j\2\2\u02df\u02e1\7J\2\2\u02e0\u02dd")
        buf.write("\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e5\3\2\2\2\u02e2")
        buf.write("\u02e3\5\u00b6\\\2\u02e3\u02e4\7\4\2\2\u02e4\u02e6\3\2")
        buf.write("\2\2\u02e5\u02e2\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7")
        buf.write("\3\2\2\2\u02e7\u02e8\5\u00b8]\2\u02e8\u02e9\7\u0091\2")
        buf.write("\2\u02e9\u02f5\5\u00caf\2\u02ea\u02eb\7\5\2\2\u02eb\u02f0")
        buf.write("\5\u00acW\2\u02ec\u02ed\7\7\2\2\u02ed\u02ef\5\u00acW\2")
        buf.write("\u02ee\u02ec\3\2\2\2\u02ef\u02f2\3\2\2\2\u02f0\u02ee\3")
        buf.write("\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f3\3\2\2\2\u02f2\u02f0")
        buf.write("\3\2\2\2\u02f3\u02f4\7\6\2\2\u02f4\u02f6\3\2\2\2\u02f5")
        buf.write("\u02ea\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\63\3\2\2\2\u02f7")
        buf.write("\u02f9\7\u0098\2\2\u02f8\u02fa\7x\2\2\u02f9\u02f8\3\2")
        buf.write("\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fc")
        buf.write("\5\66\34\2\u02fc\u02fd\7%\2\2\u02fd\u02fe\7\5\2\2\u02fe")
        buf.write("\u02ff\5T+\2\u02ff\u0309\7\6\2\2\u0300\u0301\7\7\2\2\u0301")
        buf.write("\u0302\5\66\34\2\u0302\u0303\7%\2\2\u0303\u0304\7\5\2")
        buf.write("\2\u0304\u0305\5T+\2\u0305\u0306\7\6\2\2\u0306\u0308\3")
        buf.write("\2\2\2\u0307\u0300\3\2\2\2\u0308\u030b\3\2\2\2\u0309\u0307")
        buf.write("\3\2\2\2\u0309\u030a\3\2\2\2\u030a\65\3\2\2\2\u030b\u0309")
        buf.write("\3\2\2\2\u030c\u0318\5\u00b8]\2\u030d\u030e\7\5\2\2\u030e")
        buf.write("\u0313\5\u00be`\2\u030f\u0310\7\7\2\2\u0310\u0312\5\u00be")
        buf.write("`\2\u0311\u030f\3\2\2\2\u0312\u0315\3\2\2\2\u0313\u0311")
        buf.write("\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0316\3\2\2\2\u0315")
        buf.write("\u0313\3\2\2\2\u0316\u0317\7\6\2\2\u0317\u0319\3\2\2\2")
        buf.write("\u0318\u030d\3\2\2\2\u0318\u0319\3\2\2\2\u0319\67\3\2")
        buf.write("\2\2\u031a\u031b\5\66\34\2\u031b\u031c\7%\2\2\u031c\u031d")
        buf.write("\7\5\2\2\u031d\u031e\5\u00a4S\2\u031e\u0320\7\u008e\2")
        buf.write("\2\u031f\u0321\7!\2\2\u0320\u031f\3\2\2\2\u0320\u0321")
        buf.write("\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0323\5\u00a6T\2\u0323")
        buf.write("\u0324\7\6\2\2\u03249\3\2\2\2\u0325\u0331\5\u00b8]\2\u0326")
        buf.write("\u0327\7\5\2\2\u0327\u032c\5\u00be`\2\u0328\u0329\7\7")
        buf.write("\2\2\u0329\u032b\5\u00be`\2\u032a\u0328\3\2\2\2\u032b")
        buf.write("\u032e\3\2\2\2\u032c\u032a\3\2\2\2\u032c\u032d\3\2\2\2")
        buf.write("\u032d\u032f\3\2\2\2\u032e\u032c\3\2\2\2\u032f\u0330\7")
        buf.write("\6\2\2\u0330\u0332\3\2\2\2\u0331\u0326\3\2\2\2\u0331\u0332")
        buf.write("\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0334\7%\2\2\u0334")
        buf.write("\u0335\7\5\2\2\u0335\u0336\5T+\2\u0336\u0337\7\6\2\2\u0337")
        buf.write(";\3\2\2\2\u0338\u033a\5\64\33\2\u0339\u0338\3\2\2\2\u0339")
        buf.write("\u033a\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033c\7?\2\2")
        buf.write("\u033c\u033d\7O\2\2\u033d\u0340\5r:\2\u033e\u033f\7\u0097")
        buf.write("\2\2\u033f\u0341\5D#\2\u0340\u033e\3\2\2\2\u0340\u0341")
        buf.write("\3\2\2\2\u0341=\3\2\2\2\u0342\u0344\5\64\33\2\u0343\u0342")
        buf.write("\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0345\3\2\2\2\u0345")
        buf.write("\u0346\7?\2\2\u0346\u0347\7O\2\2\u0347\u034a\5r:\2\u0348")
        buf.write("\u0349\7\u0097\2\2\u0349\u034b\5D#\2\u034a\u0348\3\2\2")
        buf.write("\2\u034a\u034b\3\2\2\2\u034b\u0350\3\2\2\2\u034c\u034e")
        buf.write("\5\u0088E\2\u034d\u034c\3\2\2\2\u034d\u034e\3\2\2\2\u034e")
        buf.write("\u034f\3\2\2\2\u034f\u0351\5\u008aF\2\u0350\u034d\3\2")
        buf.write("\2\2\u0350\u0351\3\2\2\2\u0351?\3\2\2\2\u0352\u0354\7")
        buf.write("A\2\2\u0353\u0355\7;\2\2\u0354\u0353\3\2\2\2\u0354\u0355")
        buf.write("\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0357\5\u00b6\\\2\u0357")
        buf.write("A\3\2\2\2\u0358\u0359\7C\2\2\u0359\u035c\t\13\2\2\u035a")
        buf.write("\u035b\7T\2\2\u035b\u035d\7J\2\2\u035c\u035a\3\2\2\2\u035c")
        buf.write("\u035d\3\2\2\2\u035d\u0361\3\2\2\2\u035e\u035f\5\u00b6")
        buf.write("\\\2\u035f\u0360\7\4\2\2\u0360\u0362\3\2\2\2\u0361\u035e")
        buf.write("\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0363\3\2\2\2\u0363")
        buf.write("\u0364\5\u00e2r\2\u0364C\3\2\2\2\u0365\u0366\b#\1\2\u0366")
        buf.write("\u03ec\5H%\2\u0367\u03ec\7\u00cc\2\2\u0368\u0369\5\u00b6")
        buf.write("\\\2\u0369\u036a\7\4\2\2\u036a\u036c\3\2\2\2\u036b\u0368")
        buf.write("\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036d\3\2\2\2\u036d")
        buf.write("\u036e\5\u00b8]\2\u036e\u036f\7\4\2\2\u036f\u0371\3\2")
        buf.write("\2\2\u0370\u036b\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0372")
        buf.write("\3\2\2\2\u0372\u03ec\5\u00be`\2\u0373\u0374\5\u00a8U\2")
        buf.write("\u0374\u0375\5D#\34\u0375\u03ec\3\2\2\2\u0376\u0377\7")
        buf.write("\u00bc\2\2\u0377\u0379\7\5\2\2\u0378\u037a\t\f\2\2\u0379")
        buf.write("\u0378\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037b\3\2\2\2")
        buf.write("\u037b\u037c\7O\2\2\u037c\u037d\5D#\2\u037d\u037e\7\6")
        buf.write("\2\2\u037e\u03ec\3\2\2\2\u037f\u0380\7\u00c0\2\2\u0380")
        buf.write("\u0381\7\5\2\2\u0381\u0382\t\r\2\2\u0382\u0383\7O\2\2")
        buf.write("\u0383\u0384\5D#\2\u0384\u0385\7\6\2\2\u0385\u03ec\3\2")
        buf.write("\2\2\u0386\u0387\7\u00c7\2\2\u0387\u0388\7\5\2\2\u0388")
        buf.write("\u0389\5D#\2\u0389\u038a\7W\2\2\u038a\u038b\5D#\2\u038b")
        buf.write("\u038c\7\6\2\2\u038c\u03ec\3\2\2\2\u038d\u038e\t\16\2")
        buf.write("\2\u038e\u038f\7\5\2\2\u038f\u0394\5D#\2\u0390\u0391\7")
        buf.write("\7\2\2\u0391\u0393\5D#\2\u0392\u0390\3\2\2\2\u0393\u0396")
        buf.write("\3\2\2\2\u0394\u0392\3\2\2\2\u0394\u0395\3\2\2\2\u0395")
        buf.write("\u0397\3\2\2\2\u0396\u0394\3\2\2\2\u0397\u0398\7\6\2\2")
        buf.write("\u0398\u03ec\3\2\2\2\u0399\u039a\7\u00c8\2\2\u039a\u039b")
        buf.write("\7\5\2\2\u039b\u039c\5D#\2\u039c\u039d\7O\2\2\u039d\u03a0")
        buf.write("\5D#\2\u039e\u039f\7M\2\2\u039f\u03a1\5D#\2\u03a0\u039e")
        buf.write("\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2")
        buf.write("\u03a3\7\6\2\2\u03a3\u03ec\3\2\2\2\u03a4\u03a5\5\u00b4")
        buf.write("[\2\u03a5\u03b2\7\5\2\2\u03a6\u03a8\7B\2\2\u03a7\u03a6")
        buf.write("\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9")
        buf.write("\u03ae\5D#\2\u03aa\u03ab\7\7\2\2\u03ab\u03ad\5D#\2\u03ac")
        buf.write("\u03aa\3\2\2\2\u03ad\u03b0\3\2\2\2\u03ae\u03ac\3\2\2\2")
        buf.write("\u03ae\u03af\3\2\2\2\u03af\u03b3\3\2\2\2\u03b0\u03ae\3")
        buf.write("\2\2\2\u03b1\u03b3\7\t\2\2\u03b2\u03a7\3\2\2\2\u03b2\u03b1")
        buf.write("\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4")
        buf.write("\u03b6\7\6\2\2\u03b5\u03b7\5v<\2\u03b6\u03b5\3\2\2\2\u03b6")
        buf.write("\u03b7\3\2\2\2\u03b7\u03b9\3\2\2\2\u03b8\u03ba\5z>\2\u03b9")
        buf.write("\u03b8\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03ec\3\2\2\2")
        buf.write("\u03bb\u03bc\7\5\2\2\u03bc\u03c1\5D#\2\u03bd\u03be\7\7")
        buf.write("\2\2\u03be\u03c0\5D#\2\u03bf\u03bd\3\2\2\2\u03c0\u03c3")
        buf.write("\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2")
        buf.write("\u03c4\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c4\u03c5\7\6\2\2")
        buf.write("\u03c5\u03ec\3\2\2\2\u03c6\u03c7\7/\2\2\u03c7\u03c8\7")
        buf.write("\5\2\2\u03c8\u03c9\5D#\2\u03c9\u03ca\7%\2\2\u03ca\u03cb")
        buf.write("\5\"\22\2\u03cb\u03cc\7\6\2\2\u03cc\u03ec\3\2\2\2\u03cd")
        buf.write("\u03cf\7j\2\2\u03ce\u03cd\3\2\2\2\u03ce\u03cf\3\2\2\2")
        buf.write("\u03cf\u03d0\3\2\2\2\u03d0\u03d2\7J\2\2\u03d1\u03ce\3")
        buf.write("\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4")
        buf.write("\7\5\2\2\u03d4\u03d5\5T+\2\u03d5\u03d6\7\6\2\2\u03d6\u03ec")
        buf.write("\3\2\2\2\u03d7\u03d9\7.\2\2\u03d8\u03da\5D#\2\u03d9\u03d8")
        buf.write("\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03e0\3\2\2\2\u03db")
        buf.write("\u03dc\7\u0096\2\2\u03dc\u03dd\5D#\2\u03dd\u03de\7\u008a")
        buf.write("\2\2\u03de\u03df\5D#\2\u03df\u03e1\3\2\2\2\u03e0\u03db")
        buf.write("\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2")
        buf.write("\u03e3\3\2\2\2\u03e3\u03e6\3\2\2\2\u03e4\u03e5\7E\2\2")
        buf.write("\u03e5\u03e7\5D#\2\u03e6\u03e4\3\2\2\2\u03e6\u03e7\3\2")
        buf.write("\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\7F\2\2\u03e9\u03ec")
        buf.write("\3\2\2\2\u03ea\u03ec\5F$\2\u03eb\u0365\3\2\2\2\u03eb\u0367")
        buf.write("\3\2\2\2\u03eb\u0370\3\2\2\2\u03eb\u0373\3\2\2\2\u03eb")
        buf.write("\u0376\3\2\2\2\u03eb\u037f\3\2\2\2\u03eb\u0386\3\2\2\2")
        buf.write("\u03eb\u038d\3\2\2\2\u03eb\u0399\3\2\2\2\u03eb\u03a4\3")
        buf.write("\2\2\2\u03eb\u03bb\3\2\2\2\u03eb\u03c6\3\2\2\2\u03eb\u03d1")
        buf.write("\3\2\2\2\u03eb\u03d7\3\2\2\2\u03eb\u03ea\3\2\2\2\u03ec")
        buf.write("\u0464\3\2\2\2\u03ed\u03ee\f\33\2\2\u03ee\u03ef\7\r\2")
        buf.write("\2\u03ef\u0463\5D#\34\u03f0\u03f1\f\32\2\2\u03f1\u03f2")
        buf.write("\t\17\2\2\u03f2\u0463\5D#\33\u03f3\u03f4\f\31\2\2\u03f4")
        buf.write("\u03f5\t\6\2\2\u03f5\u0463\5D#\32\u03f6\u03f7\f\30\2\2")
        buf.write("\u03f7\u03f8\t\20\2\2\u03f8\u0463\5D#\31\u03f9\u03fa\f")
        buf.write("\27\2\2\u03fa\u03fb\t\21\2\2\u03fb\u0463\5D#\30\u03fc")
        buf.write("\u0409\f\26\2\2\u03fd\u040a\7\b\2\2\u03fe\u040a\7\30\2")
        buf.write("\2\u03ff\u040a\7\31\2\2\u0400\u040a\7\32\2\2\u0401\u040a")
        buf.write("\7`\2\2\u0402\u0403\7`\2\2\u0403\u040a\7j\2\2\u0404\u040a")
        buf.write("\7W\2\2\u0405\u040a\7e\2\2\u0406\u040a\7Q\2\2\u0407\u040a")
        buf.write("\7g\2\2\u0408\u040a\7z\2\2\u0409\u03fd\3\2\2\2\u0409\u03fe")
        buf.write("\3\2\2\2\u0409\u03ff\3\2\2\2\u0409\u0400\3\2\2\2\u0409")
        buf.write("\u0401\3\2\2\2\u0409\u0402\3\2\2\2\u0409\u0404\3\2\2\2")
        buf.write("\u0409\u0405\3\2\2\2\u0409\u0406\3\2\2\2\u0409\u0407\3")
        buf.write("\2\2\2\u0409\u0408\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u0463")
        buf.write("\5D#\27\u040c\u040d\f\25\2\2\u040d\u040e\7$\2\2\u040e")
        buf.write("\u0463\5D#\26\u040f\u0410\f\24\2\2\u0410\u0411\7p\2\2")
        buf.write("\u0411\u0463\5D#\25\u0412\u0413\f\b\2\2\u0413\u0415\7")
        buf.write("`\2\2\u0414\u0416\7j\2\2\u0415\u0414\3\2\2\2\u0415\u0416")
        buf.write("\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0463\5D#\t\u0418\u041a")
        buf.write("\f\7\2\2\u0419\u041b\7j\2\2\u041a\u0419\3\2\2\2\u041a")
        buf.write("\u041b\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041d\7+\2\2")
        buf.write("\u041d\u041e\5D#\2\u041e\u041f\7$\2\2\u041f\u0420\5D#")
        buf.write("\b\u0420\u0463\3\2\2\2\u0421\u0422\f\13\2\2\u0422\u0423")
        buf.write("\7\61\2\2\u0423\u0463\5\u00c0a\2\u0424\u0426\f\n\2\2\u0425")
        buf.write("\u0427\7j\2\2\u0426\u0425\3\2\2\2\u0426\u0427\3\2\2\2")
        buf.write("\u0427\u0428\3\2\2\2\u0428\u0429\t\22\2\2\u0429\u042c")
        buf.write("\5D#\2\u042a\u042b\7G\2\2\u042b\u042d\5D#\2\u042c\u042a")
        buf.write("\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u0463\3\2\2\2\u042e")
        buf.write("\u0433\f\t\2\2\u042f\u0434\7a\2\2\u0430\u0434\7k\2\2\u0431")
        buf.write("\u0432\7j\2\2\u0432\u0434\7l\2\2\u0433\u042f\3\2\2\2\u0433")
        buf.write("\u0430\3\2\2\2\u0433\u0431\3\2\2\2\u0434\u0463\3\2\2\2")
        buf.write("\u0435\u0437\f\6\2\2\u0436\u0438\7j\2\2\u0437\u0436\3")
        buf.write("\2\2\2\u0437\u0438\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u0460")
        buf.write("\7W\2\2\u043a\u0444\7\5\2\2\u043b\u0445\5T+\2\u043c\u0441")
        buf.write("\5D#\2\u043d\u043e\7\7\2\2\u043e\u0440\5D#\2\u043f\u043d")
        buf.write("\3\2\2\2\u0440\u0443\3\2\2\2\u0441\u043f\3\2\2\2\u0441")
        buf.write("\u0442\3\2\2\2\u0442\u0445\3\2\2\2\u0443\u0441\3\2\2\2")
        buf.write("\u0444\u043b\3\2\2\2\u0444\u043c\3\2\2\2\u0444\u0445\3")
        buf.write("\2\2\2\u0445\u0446\3\2\2\2\u0446\u0461\7\6\2\2\u0447\u0448")
        buf.write("\5\u00b6\\\2\u0448\u0449\7\4\2\2\u0449\u044b\3\2\2\2\u044a")
        buf.write("\u0447\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044c\3\2\2\2")
        buf.write("\u044c\u0461\5\u00b8]\2\u044d\u044e\5\u00b6\\\2\u044e")
        buf.write("\u044f\7\4\2\2\u044f\u0451\3\2\2\2\u0450\u044d\3\2\2\2")
        buf.write("\u0450\u0451\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0453\5")
        buf.write("\u00e0q\2\u0453\u045c\7\5\2\2\u0454\u0459\5D#\2\u0455")
        buf.write("\u0456\7\7\2\2\u0456\u0458\5D#\2\u0457\u0455\3\2\2\2\u0458")
        buf.write("\u045b\3\2\2\2\u0459\u0457\3\2\2\2\u0459\u045a\3\2\2\2")
        buf.write("\u045a\u045d\3\2\2\2\u045b\u0459\3\2\2\2\u045c\u0454\3")
        buf.write("\2\2\2\u045c\u045d\3\2\2\2\u045d\u045e\3\2\2\2\u045e\u045f")
        buf.write("\7\6\2\2\u045f\u0461\3\2\2\2\u0460\u043a\3\2\2\2\u0460")
        buf.write("\u044a\3\2\2\2\u0460\u0450\3\2\2\2\u0461\u0463\3\2\2\2")
        buf.write("\u0462\u03ed\3\2\2\2\u0462\u03f0\3\2\2\2\u0462\u03f3\3")
        buf.write("\2\2\2\u0462\u03f6\3\2\2\2\u0462\u03f9\3\2\2\2\u0462\u03fc")
        buf.write("\3\2\2\2\u0462\u040c\3\2\2\2\u0462\u040f\3\2\2\2\u0462")
        buf.write("\u0412\3\2\2\2\u0462\u0418\3\2\2\2\u0462\u0421\3\2\2\2")
        buf.write("\u0462\u0424\3\2\2\2\u0462\u042e\3\2\2\2\u0462\u0435\3")
        buf.write("\2\2\2\u0463\u0466\3\2\2\2\u0464\u0462\3\2\2\2\u0464\u0465")
        buf.write("\3\2\2\2\u0465E\3\2\2\2\u0466\u0464\3\2\2\2\u0467\u0468")
        buf.write("\7w\2\2\u0468\u046d\7\5\2\2\u0469\u046e\7U\2\2\u046a\u046b")
        buf.write("\t\23\2\2\u046b\u046c\7\7\2\2\u046c\u046e\5\u00aaV\2\u046d")
        buf.write("\u0469\3\2\2\2\u046d\u046a\3\2\2\2\u046e\u046f\3\2\2\2")
        buf.write("\u046f\u0470\7\6\2\2\u0470G\3\2\2\2\u0471\u0472\t\24\2")
        buf.write("\2\u0472I\3\2\2\2\u0473\u0475\5\64\33\2\u0474\u0473\3")
        buf.write("\2\2\2\u0474\u0475\3\2\2\2\u0475\u047b\3\2\2\2\u0476\u047c")
        buf.write("\7\\\2\2\u0477\u047c\7~\2\2\u0478\u0479\7\\\2\2\u0479")
        buf.write("\u047a\7p\2\2\u047a\u047c\t\n\2\2\u047b\u0476\3\2\2\2")
        buf.write("\u047b\u0477\3\2\2\2\u047b\u0478\3\2\2\2\u047c\u047d\3")
        buf.write("\2\2\2\u047d\u0481\7_\2\2\u047e\u047f\5\u00b6\\\2\u047f")
        buf.write("\u0480\7\4\2\2\u0480\u0482\3\2\2\2\u0481\u047e\3\2\2\2")
        buf.write("\u0481\u0482\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0486\5")
        buf.write("\u00b8]\2\u0484\u0485\7%\2\2\u0485\u0487\5\u00d0i\2\u0486")
        buf.write("\u0484\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0493\3\2\2\2")
        buf.write("\u0488\u0489\7\5\2\2\u0489\u048e\5\u00be`\2\u048a\u048b")
        buf.write("\7\7\2\2\u048b\u048d\5\u00be`\2\u048c\u048a\3\2\2\2\u048d")
        buf.write("\u0490\3\2\2\2\u048e\u048c\3\2\2\2\u048e\u048f\3\2\2\2")
        buf.write("\u048f\u0491\3\2\2\2\u0490\u048e\3\2\2\2\u0491\u0492\7")
        buf.write("\6\2\2\u0492\u0494\3\2\2\2\u0493\u0488\3\2\2\2\u0493\u0494")
        buf.write("\3\2\2\2\u0494\u04b2\3\2\2\2\u0495\u0496\7\u0093\2\2\u0496")
        buf.write("\u0497\7\5\2\2\u0497\u049c\5D#\2\u0498\u0499\7\7\2\2\u0499")
        buf.write("\u049b\5D#\2\u049a\u0498\3\2\2\2\u049b\u049e\3\2\2\2\u049c")
        buf.write("\u049a\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049f\3\2\2\2")
        buf.write("\u049e\u049c\3\2\2\2\u049f\u04ae\7\6\2\2\u04a0\u04a1\7")
        buf.write("\7\2\2\u04a1\u04a2\7\5\2\2\u04a2\u04a7\5D#\2\u04a3\u04a4")
        buf.write("\7\7\2\2\u04a4\u04a6\5D#\2\u04a5\u04a3\3\2\2\2\u04a6\u04a9")
        buf.write("\3\2\2\2\u04a7\u04a5\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8")
        buf.write("\u04aa\3\2\2\2\u04a9\u04a7\3\2\2\2\u04aa\u04ab\7\6\2\2")
        buf.write("\u04ab\u04ad\3\2\2\2\u04ac\u04a0\3\2\2\2\u04ad\u04b0\3")
        buf.write("\2\2\2\u04ae\u04ac\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b3")
        buf.write("\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b1\u04b3\5T+\2\u04b2\u0495")
        buf.write("\3\2\2\2\u04b2\u04b1\3\2\2\2\u04b3\u04b5\3\2\2\2\u04b4")
        buf.write("\u04b6\5L\'\2\u04b5\u04b4\3\2\2\2\u04b5\u04b6\3\2\2\2")
        buf.write("\u04b6\u04ba\3\2\2\2\u04b7\u04b8\7<\2\2\u04b8\u04ba\7")
        buf.write("\u0093\2\2\u04b9\u0474\3\2\2\2\u04b9\u04b7\3\2\2\2\u04ba")
        buf.write("K\3\2\2\2\u04bb\u04bc\7o\2\2\u04bc\u04cb\7\64\2\2\u04bd")
        buf.write("\u04be\7\5\2\2\u04be\u04c3\5\34\17\2\u04bf\u04c0\7\7\2")
        buf.write("\2\u04c0\u04c2\5\34\17\2\u04c1\u04bf\3\2\2\2\u04c2\u04c5")
        buf.write("\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4")
        buf.write("\u04c6\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c6\u04c9\7\6\2\2")
        buf.write("\u04c7\u04c8\7\u0097\2\2\u04c8\u04ca\5D#\2\u04c9\u04c7")
        buf.write("\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cc\3\2\2\2\u04cb")
        buf.write("\u04bd\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04cd\3\2\2\2")
        buf.write("\u04cd\u04e8\7\u00ba\2\2\u04ce\u04e9\7\u00bb\2\2\u04cf")
        buf.write("\u04d0\7\u0090\2\2\u04d0\u04d3\7\u0086\2\2\u04d1\u04d4")
        buf.write("\5\u00be`\2\u04d2\u04d4\5n8\2\u04d3\u04d1\3\2\2\2\u04d3")
        buf.write("\u04d2\3\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04d6\7\30\2")
        buf.write("\2\u04d6\u04e1\5D#\2\u04d7\u04da\7\7\2\2\u04d8\u04db\5")
        buf.write("\u00be`\2\u04d9\u04db\5n8\2\u04da\u04d8\3\2\2\2\u04da")
        buf.write("\u04d9\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04dd\7\30\2")
        buf.write("\2\u04dd\u04de\5D#\2\u04de\u04e0\3\2\2\2\u04df\u04d7\3")
        buf.write("\2\2\2\u04e0\u04e3\3\2\2\2\u04e1\u04df\3\2\2\2\u04e1\u04e2")
        buf.write("\3\2\2\2\u04e2\u04e6\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e4")
        buf.write("\u04e5\7\u0097\2\2\u04e5\u04e7\5D#\2\u04e6\u04e4\3\2\2")
        buf.write("\2\u04e6\u04e7\3\2\2\2\u04e7\u04e9\3\2\2\2\u04e8\u04ce")
        buf.write("\3\2\2\2\u04e8\u04cf\3\2\2\2\u04e9M\3\2\2\2\u04ea\u04ee")
        buf.write("\7t\2\2\u04eb\u04ec\5\u00b6\\\2\u04ec\u04ed\7\4\2\2\u04ed")
        buf.write("\u04ef\3\2\2\2\u04ee\u04eb\3\2\2\2\u04ee\u04ef\3\2\2\2")
        buf.write("\u04ef\u04f0\3\2\2\2\u04f0\u04f7\5\u00ccg\2\u04f1\u04f2")
        buf.write("\7\b\2\2\u04f2\u04f8\5P)\2\u04f3\u04f4\7\5\2\2\u04f4\u04f5")
        buf.write("\5P)\2\u04f5\u04f6\7\6\2\2\u04f6\u04f8\3\2\2\2\u04f7\u04f1")
        buf.write("\3\2\2\2\u04f7\u04f3\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8")
        buf.write("O\3\2\2\2\u04f9\u04fd\5&\24\2\u04fa\u04fd\5\u00b2Z\2\u04fb")
        buf.write("\u04fd\7\u00cd\2\2\u04fc\u04f9\3\2\2\2\u04fc\u04fa\3\2")
        buf.write("\2\2\u04fc\u04fb\3\2\2\2\u04fdQ\3\2\2\2\u04fe\u0509\7")
        buf.write("{\2\2\u04ff\u050a\5\u00c0a\2\u0500\u0501\5\u00b6\\\2\u0501")
        buf.write("\u0502\7\4\2\2\u0502\u0504\3\2\2\2\u0503\u0500\3\2\2\2")
        buf.write("\u0503\u0504\3\2\2\2\u0504\u0507\3\2\2\2\u0505\u0508\5")
        buf.write("\u00b8]\2\u0506\u0508\5\u00c4c\2\u0507\u0505\3\2\2\2\u0507")
        buf.write("\u0506\3\2\2\2\u0508\u050a\3\2\2\2\u0509\u04ff\3\2\2\2")
        buf.write("\u0509\u0503\3\2\2\2\u0509\u050a\3\2\2\2\u050aS\3\2\2")
        buf.write("\2\u050b\u050d\5\u0086D\2\u050c\u050b\3\2\2\2\u050c\u050d")
        buf.write("\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u0514\5Z.\2\u050f\u0510")
        buf.write("\5j\66\2\u0510\u0511\5Z.\2\u0511\u0513\3\2\2\2\u0512\u050f")
        buf.write("\3\2\2\2\u0513\u0516\3\2\2\2\u0514\u0512\3\2\2\2\u0514")
        buf.write("\u0515\3\2\2\2\u0515\u0518\3\2\2\2\u0516\u0514\3\2\2\2")
        buf.write("\u0517\u0519\5\u0088E\2\u0518\u0517\3\2\2\2\u0518\u0519")
        buf.write("\3\2\2\2\u0519\u051b\3\2\2\2\u051a\u051c\5\u008aF\2\u051b")
        buf.write("\u051a\3\2\2\2\u051b\u051c\3\2\2\2\u051cU\3\2\2\2\u051d")
        buf.write("\u0525\5b\62\2\u051e\u051f\5f\64\2\u051f\u0521\5b\62\2")
        buf.write("\u0520\u0522\5h\65\2\u0521\u0520\3\2\2\2\u0521\u0522\3")
        buf.write("\2\2\2\u0522\u0524\3\2\2\2\u0523\u051e\3\2\2\2\u0524\u0527")
        buf.write("\3\2\2\2\u0525\u0523\3\2\2\2\u0525\u0526\3\2\2\2\u0526")
        buf.write("W\3\2\2\2\u0527\u0525\3\2\2\2\u0528\u0529\7\33\2\2\u0529")
        buf.write("\u052a\7\u00c9\2\2\u052a\u052b\5V,\2\u052b\u052c\7\34")
        buf.write("\2\2\u052c\u052f\3\2\2\2\u052d\u052f\5V,\2\u052e\u0528")
        buf.write("\3\2\2\2\u052e\u052d\3\2\2\2\u052fY\3\2\2\2\u0530\u0532")
        buf.write("\7\u0085\2\2\u0531\u0533\t\25\2\2\u0532\u0531\3\2\2\2")
        buf.write("\u0532\u0533\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u0539\5")
        buf.write("d\63\2\u0535\u0536\7\7\2\2\u0536\u0538\5d\63\2\u0537\u0535")
        buf.write("\3\2\2\2\u0538\u053b\3\2\2\2\u0539\u0537\3\2\2\2\u0539")
        buf.write("\u053a\3\2\2\2\u053a\u0548\3\2\2\2\u053b\u0539\3\2\2\2")
        buf.write("\u053c\u0546\7O\2\2\u053d\u0542\5b\62\2\u053e\u053f\7")
        buf.write("\7\2\2\u053f\u0541\5b\62\2\u0540\u053e\3\2\2\2\u0541\u0544")
        buf.write("\3\2\2\2\u0542\u0540\3\2\2\2\u0542\u0543\3\2\2\2\u0543")
        buf.write("\u0547\3\2\2\2\u0544\u0542\3\2\2\2\u0545\u0547\5X-\2\u0546")
        buf.write("\u053d\3\2\2\2\u0546\u0545\3\2\2\2\u0547\u0549\3\2\2\2")
        buf.write("\u0548\u053c\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u054c\3")
        buf.write("\2\2\2\u054a\u054b\7\u0097\2\2\u054b\u054d\5D#\2\u054c")
        buf.write("\u054a\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u055c\3\2\2\2")
        buf.write("\u054e\u054f\7R\2\2\u054f\u0550\7,\2\2\u0550\u0555\5D")
        buf.write("#\2\u0551\u0552\7\7\2\2\u0552\u0554\5D#\2\u0553\u0551")
        buf.write("\3\2\2\2\u0554\u0557\3\2\2\2\u0555\u0553\3\2\2\2\u0555")
        buf.write("\u0556\3\2\2\2\u0556\u055a\3\2\2\2\u0557\u0555\3\2\2\2")
        buf.write("\u0558\u0559\7S\2\2\u0559\u055b\5D#\2\u055a\u0558\3\2")
        buf.write("\2\2\u055a\u055b\3\2\2\2\u055b\u055d\3\2\2\2\u055c\u054e")
        buf.write("\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u056c\3\2\2\2\u055e")
        buf.write("\u055f\7\u00b1\2\2\u055f\u0560\5\u00d4k\2\u0560\u0561")
        buf.write("\7%\2\2\u0561\u0569\5x=\2\u0562\u0563\7\7\2\2\u0563\u0564")
        buf.write("\5\u00d4k\2\u0564\u0565\7%\2\2\u0565\u0566\5x=\2\u0566")
        buf.write("\u0568\3\2\2\2\u0567\u0562\3\2\2\2\u0568\u056b\3\2\2\2")
        buf.write("\u0569\u0567\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056d\3")
        buf.write("\2\2\2\u056b\u0569\3\2\2\2\u056c\u055e\3\2\2\2\u056c\u056d")
        buf.write("\3\2\2\2\u056d\u058b\3\2\2\2\u056e\u056f\7\u0093\2\2\u056f")
        buf.write("\u0570\7\5\2\2\u0570\u0575\5D#\2\u0571\u0572\7\7\2\2\u0572")
        buf.write("\u0574\5D#\2\u0573\u0571\3\2\2\2\u0574\u0577\3\2\2\2\u0575")
        buf.write("\u0573\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0578\3\2\2\2")
        buf.write("\u0577\u0575\3\2\2\2\u0578\u0587\7\6\2\2\u0579\u057a\7")
        buf.write("\7\2\2\u057a\u057b\7\5\2\2\u057b\u0580\5D#\2\u057c\u057d")
        buf.write("\7\7\2\2\u057d\u057f\5D#\2\u057e\u057c\3\2\2\2\u057f\u0582")
        buf.write("\3\2\2\2\u0580\u057e\3\2\2\2\u0580\u0581\3\2\2\2\u0581")
        buf.write("\u0583\3\2\2\2\u0582\u0580\3\2\2\2\u0583\u0584\7\6\2\2")
        buf.write("\u0584\u0586\3\2\2\2\u0585\u0579\3\2\2\2\u0586\u0589\3")
        buf.write("\2\2\2\u0587\u0585\3\2\2\2\u0587\u0588\3\2\2\2\u0588\u058b")
        buf.write("\3\2\2\2\u0589\u0587\3\2\2\2\u058a\u0530\3\2\2\2\u058a")
        buf.write("\u056e\3\2\2\2\u058b[\3\2\2\2\u058c\u058d\5T+\2\u058d")
        buf.write("]\3\2\2\2\u058e\u0590\5\u0086D\2\u058f\u058e\3\2\2\2\u058f")
        buf.write("\u0590\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0593\5Z.\2\u0592")
        buf.write("\u0594\5\u0088E\2\u0593\u0592\3\2\2\2\u0593\u0594\3\2")
        buf.write("\2\2\u0594\u0596\3\2\2\2\u0595\u0597\5\u008aF\2\u0596")
        buf.write("\u0595\3\2\2\2\u0596\u0597\3\2\2\2\u0597_\3\2\2\2\u0598")
        buf.write("\u059a\5\u0086D\2\u0599\u0598\3\2\2\2\u0599\u059a\3\2")
        buf.write("\2\2\u059a\u059b\3\2\2\2\u059b\u05a5\5Z.\2\u059c\u059e")
        buf.write("\7\u008e\2\2\u059d\u059f\7!\2\2\u059e\u059d\3\2\2\2\u059e")
        buf.write("\u059f\3\2\2\2\u059f\u05a3\3\2\2\2\u05a0\u05a3\7^\2\2")
        buf.write("\u05a1\u05a3\7H\2\2\u05a2\u059c\3\2\2\2\u05a2\u05a0\3")
        buf.write("\2\2\2\u05a2\u05a1\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u05a6")
        buf.write("\5Z.\2\u05a5\u05a2\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05a5")
        buf.write("\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u05aa\3\2\2\2\u05a9")
        buf.write("\u05ab\5\u0088E\2\u05aa\u05a9\3\2\2\2\u05aa\u05ab\3\2")
        buf.write("\2\2\u05ab\u05ad\3\2\2\2\u05ac\u05ae\5\u008aF\2\u05ad")
        buf.write("\u05ac\3\2\2\2\u05ad\u05ae\3\2\2\2\u05aea\3\2\2\2\u05af")
        buf.write("\u05b0\5\u00b6\\\2\u05b0\u05b1\7\4\2\2\u05b1\u05b3\3\2")
        buf.write("\2\2\u05b2\u05af\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b4")
        buf.write("\3\2\2\2\u05b4\u05b9\5\u00b8]\2\u05b5\u05b7\7%\2\2\u05b6")
        buf.write("\u05b5\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b8\3\2\2\2")
        buf.write("\u05b8\u05ba\5\u00d0i\2\u05b9\u05b6\3\2\2\2\u05b9\u05ba")
        buf.write("\3\2\2\2\u05ba\u05c0\3\2\2\2\u05bb\u05bc\7Y\2\2\u05bc")
        buf.write("\u05bd\7,\2\2\u05bd\u05c1\5\u00c4c\2\u05be\u05bf\7j\2")
        buf.write("\2\u05bf\u05c1\7Y\2\2\u05c0\u05bb\3\2\2\2\u05c0\u05be")
        buf.write("\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05f0\3\2\2\2\u05c2")
        buf.write("\u05c3\5\u00b6\\\2\u05c3\u05c4\7\4\2\2\u05c4\u05c6\3\2")
        buf.write("\2\2\u05c5\u05c2\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c7")
        buf.write("\3\2\2\2\u05c7\u05c8\5\u00e0q\2\u05c8\u05c9\7\5\2\2\u05c9")
        buf.write("\u05ce\5D#\2\u05ca\u05cb\7\7\2\2\u05cb\u05cd\5D#\2\u05cc")
        buf.write("\u05ca\3\2\2\2\u05cd\u05d0\3\2\2\2\u05ce\u05cc\3\2\2\2")
        buf.write("\u05ce\u05cf\3\2\2\2\u05cf\u05d1\3\2\2\2\u05d0\u05ce\3")
        buf.write("\2\2\2\u05d1\u05d6\7\6\2\2\u05d2\u05d4\7%\2\2\u05d3\u05d2")
        buf.write("\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5")
        buf.write("\u05d7\5\u00d0i\2\u05d6\u05d3\3\2\2\2\u05d6\u05d7\3\2")
        buf.write("\2\2\u05d7\u05f0\3\2\2\2\u05d8\u05e2\7\5\2\2\u05d9\u05de")
        buf.write("\5b\62\2\u05da\u05db\7\7\2\2\u05db\u05dd\5b\62\2\u05dc")
        buf.write("\u05da\3\2\2\2\u05dd\u05e0\3\2\2\2\u05de\u05dc\3\2\2\2")
        buf.write("\u05de\u05df\3\2\2\2\u05df\u05e3\3\2\2\2\u05e0\u05de\3")
        buf.write("\2\2\2\u05e1\u05e3\5X-\2\u05e2\u05d9\3\2\2\2\u05e2\u05e1")
        buf.write("\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4\u05e5\7\6\2\2\u05e5")
        buf.write("\u05f0\3\2\2\2\u05e6\u05e7\7\5\2\2\u05e7\u05e8\5T+\2\u05e8")
        buf.write("\u05ed\7\6\2\2\u05e9\u05eb\7%\2\2\u05ea\u05e9\3\2\2\2")
        buf.write("\u05ea\u05eb\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec\u05ee\5")
        buf.write("\u00d0i\2\u05ed\u05ea\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee")
        buf.write("\u05f0\3\2\2\2\u05ef\u05b2\3\2\2\2\u05ef\u05c5\3\2\2\2")
        buf.write("\u05ef\u05d8\3\2\2\2\u05ef\u05e6\3\2\2\2\u05f0c\3\2\2")
        buf.write("\2\u05f1\u05fe\7\t\2\2\u05f2\u05f3\5\u00b8]\2\u05f3\u05f4")
        buf.write("\7\4\2\2\u05f4\u05f5\7\t\2\2\u05f5\u05fe\3\2\2\2\u05f6")
        buf.write("\u05fb\5D#\2\u05f7\u05f9\7%\2\2\u05f8\u05f7\3\2\2\2\u05f8")
        buf.write("\u05f9\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fc\5\u00ae")
        buf.write("X\2\u05fb\u05f8\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc\u05fe")
        buf.write("\3\2\2\2\u05fd\u05f1\3\2\2\2\u05fd\u05f2\3\2\2\2\u05fd")
        buf.write("\u05f6\3\2\2\2\u05fee\3\2\2\2\u05ff\u0611\7\7\2\2\u0600")
        buf.write("\u0602\7h\2\2\u0601\u0600\3\2\2\2\u0601\u0602\3\2\2\2")
        buf.write("\u0602\u060d\3\2\2\2\u0603\u0605\7\u0080\2\2\u0604\u0606")
        buf.write("\7r\2\2\u0605\u0604\3\2\2\2\u0605\u0606\3\2\2\2\u0606")
        buf.write("\u060e\3\2\2\2\u0607\u0609\7d\2\2\u0608\u060a\7r\2\2\u0609")
        buf.write("\u0608\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u060e\3\2\2\2")
        buf.write("\u060b\u060e\7[\2\2\u060c\u060e\7\67\2\2\u060d\u0603\3")
        buf.write("\2\2\2\u060d\u0607\3\2\2\2\u060d\u060b\3\2\2\2\u060d\u060c")
        buf.write("\3\2\2\2\u060d\u060e\3\2\2\2\u060e\u060f\3\2\2\2\u060f")
        buf.write("\u0611\7b\2\2\u0610\u05ff\3\2\2\2\u0610\u0601\3\2\2\2")
        buf.write("\u0611g\3\2\2\2\u0612\u0613\7o\2\2\u0613\u0621\5D#\2\u0614")
        buf.write("\u0615\7\u0091\2\2\u0615\u0616\7\5\2\2\u0616\u061b\5\u00be")
        buf.write("`\2\u0617\u0618\7\7\2\2\u0618\u061a\5\u00be`\2\u0619\u0617")
        buf.write("\3\2\2\2\u061a\u061d\3\2\2\2\u061b\u0619\3\2\2\2\u061b")
        buf.write("\u061c\3\2\2\2\u061c\u061e\3\2\2\2\u061d\u061b\3\2\2\2")
        buf.write("\u061e\u061f\7\6\2\2\u061f\u0621\3\2\2\2\u0620\u0612\3")
        buf.write("\2\2\2\u0620\u0614\3\2\2\2\u0621i\3\2\2\2\u0622\u0624")
        buf.write("\7\u008e\2\2\u0623\u0625\7!\2\2\u0624\u0623\3\2\2\2\u0624")
        buf.write("\u0625\3\2\2\2\u0625\u0629\3\2\2\2\u0626\u0629\7^\2\2")
        buf.write("\u0627\u0629\7H\2\2\u0628\u0622\3\2\2\2\u0628\u0626\3")
        buf.write("\2\2\2\u0628\u0627\3\2\2\2\u0629k\3\2\2\2\u062a\u062c")
        buf.write("\5\64\33\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2\2\2\u062c")
        buf.write("\u062d\3\2\2\2\u062d\u0630\7\u0090\2\2\u062e\u062f\7p")
        buf.write("\2\2\u062f\u0631\t\n\2\2\u0630\u062e\3\2\2\2\u0630\u0631")
        buf.write("\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0633\5r:\2\u0633\u0636")
        buf.write("\7\u0086\2\2\u0634\u0637\5\u00be`\2\u0635\u0637\5n8\2")
        buf.write("\u0636\u0634\3\2\2\2\u0636\u0635\3\2\2\2\u0637\u0638\3")
        buf.write("\2\2\2\u0638\u0639\7\b\2\2\u0639\u0644\5D#\2\u063a\u063d")
        buf.write("\7\7\2\2\u063b\u063e\5\u00be`\2\u063c\u063e\5n8\2\u063d")
        buf.write("\u063b\3\2\2\2\u063d\u063c\3\2\2\2\u063e\u063f\3\2\2\2")
        buf.write("\u063f\u0640\7\b\2\2\u0640\u0641\5D#\2\u0641\u0643\3\2")
        buf.write("\2\2\u0642\u063a\3\2\2\2\u0643\u0646\3\2\2\2\u0644\u0642")
        buf.write("\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u0649\3\2\2\2\u0646")
        buf.write("\u0644\3\2\2\2\u0647\u0648\7\u0097\2\2\u0648\u064a\5D")
        buf.write("#\2\u0649\u0647\3\2\2\2\u0649\u064a\3\2\2\2\u064am\3\2")
        buf.write("\2\2\u064b\u064c\7\5\2\2\u064c\u0651\5\u00be`\2\u064d")
        buf.write("\u064e\7\7\2\2\u064e\u0650\5\u00be`\2\u064f\u064d\3\2")
        buf.write("\2\2\u0650\u0653\3\2\2\2\u0651\u064f\3\2\2\2\u0651\u0652")
        buf.write("\3\2\2\2\u0652\u0654\3\2\2\2\u0653\u0651\3\2\2\2\u0654")
        buf.write("\u0655\7\6\2\2\u0655o\3\2\2\2\u0656\u0658\5\64\33\2\u0657")
        buf.write("\u0656\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u0659\3\2\2\2")
        buf.write("\u0659\u065c\7\u0090\2\2\u065a\u065b\7p\2\2\u065b\u065d")
        buf.write("\t\n\2\2\u065c\u065a\3\2\2\2\u065c\u065d\3\2\2\2\u065d")
        buf.write("\u065e\3\2\2\2\u065e\u065f\5r:\2\u065f\u0662\7\u0086\2")
        buf.write("\2\u0660\u0663\5\u00be`\2\u0661\u0663\5n8\2\u0662\u0660")
        buf.write("\3\2\2\2\u0662\u0661\3\2\2\2\u0663\u0664\3\2\2\2\u0664")
        buf.write("\u0665\7\b\2\2\u0665\u0670\5D#\2\u0666\u0669\7\7\2\2\u0667")
        buf.write("\u066a\5\u00be`\2\u0668\u066a\5n8\2\u0669\u0667\3\2\2")
        buf.write("\2\u0669\u0668\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u066c")
        buf.write("\7\b\2\2\u066c\u066d\5D#\2\u066d\u066f\3\2\2\2\u066e\u0666")
        buf.write("\3\2\2\2\u066f\u0672\3\2\2\2\u0670\u066e\3\2\2\2\u0670")
        buf.write("\u0671\3\2\2\2\u0671\u0675\3\2\2\2\u0672\u0670\3\2\2\2")
        buf.write("\u0673\u0674\7\u0097\2\2\u0674\u0676\5D#\2\u0675\u0673")
        buf.write("\3\2\2\2\u0675\u0676\3\2\2\2\u0676\u067b\3\2\2\2\u0677")
        buf.write("\u0679\5\u0088E\2\u0678\u0677\3\2\2\2\u0678\u0679\3\2")
        buf.write("\2\2\u0679\u067a\3\2\2\2\u067a\u067c\5\u008aF\2\u067b")
        buf.write("\u0678\3\2\2\2\u067b\u067c\3\2\2\2\u067cq\3\2\2\2\u067d")
        buf.write("\u067e\5\u00b6\\\2\u067e\u067f\7\4\2\2\u067f\u0681\3\2")
        buf.write("\2\2\u0680\u067d\3\2\2\2\u0680\u0681\3\2\2\2\u0681\u0682")
        buf.write("\3\2\2\2\u0682\u0685\5\u00b8]\2\u0683\u0684\7%\2\2\u0684")
        buf.write("\u0686\5\u00d6l\2\u0685\u0683\3\2\2\2\u0685\u0686\3\2")
        buf.write("\2\2\u0686\u068c\3\2\2\2\u0687\u0688\7Y\2\2\u0688\u0689")
        buf.write("\7,\2\2\u0689\u068d\5\u00c4c\2\u068a\u068b\7j\2\2\u068b")
        buf.write("\u068d\7Y\2\2\u068c\u0687\3\2\2\2\u068c\u068a\3\2\2\2")
        buf.write("\u068c\u068d\3\2\2\2\u068ds\3\2\2\2\u068e\u0690\7\u0092")
        buf.write("\2\2\u068f\u0691\5\u00b6\\\2\u0690\u068f\3\2\2\2\u0690")
        buf.write("\u0691\3\2\2\2\u0691\u0694\3\2\2\2\u0692\u0693\7_\2\2")
        buf.write("\u0693\u0695\5\u00d8m\2\u0694\u0692\3\2\2\2\u0694\u0695")
        buf.write("\3\2\2\2\u0695u\3\2\2\2\u0696\u0697\7\u00b5\2\2\u0697")
        buf.write("\u0698\7\5\2\2\u0698\u0699\7\u0097\2\2\u0699\u069a\5D")
        buf.write("#\2\u069a\u069b\7\6\2\2\u069bw\3\2\2\2\u069c\u069e\7\5")
        buf.write("\2\2\u069d\u069f\5\u00dan\2\u069e\u069d\3\2\2\2\u069e")
        buf.write("\u069f\3\2\2\2\u069f\u06aa\3\2\2\2\u06a0\u06a1\7\u009c")
        buf.write("\2\2\u06a1\u06a2\7,\2\2\u06a2\u06a7\5D#\2\u06a3\u06a4")
        buf.write("\7\7\2\2\u06a4\u06a6\5D#\2\u06a5\u06a3\3\2\2\2\u06a6\u06a9")
        buf.write("\3\2\2\2\u06a7\u06a5\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8")
        buf.write("\u06ab\3\2\2\2\u06a9\u06a7\3\2\2\2\u06aa\u06a0\3\2\2\2")
        buf.write("\u06aa\u06ab\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06ad\7")
        buf.write("q\2\2\u06ad\u06ae\7,\2\2\u06ae\u06b3\5\u008cG\2\u06af")
        buf.write("\u06b0\7\7\2\2\u06b0\u06b2\5\u008cG\2\u06b1\u06af\3\2")
        buf.write("\2\2\u06b2\u06b5\3\2\2\2\u06b3\u06b1\3\2\2\2\u06b3\u06b4")
        buf.write("\3\2\2\2\u06b4\u06b7\3\2\2\2\u06b5\u06b3\3\2\2\2\u06b6")
        buf.write("\u06b8\5|?\2\u06b7\u06b6\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8")
        buf.write("\u06b9\3\2\2\2\u06b9\u06ba\7\6\2\2\u06bay\3\2\2\2\u06bb")
        buf.write("\u06dd\7\u009b\2\2\u06bc\u06de\5\u00d4k\2\u06bd\u06bf")
        buf.write("\7\5\2\2\u06be\u06c0\5\u00dan\2\u06bf\u06be\3\2\2\2\u06bf")
        buf.write("\u06c0\3\2\2\2\u06c0\u06cb\3\2\2\2\u06c1\u06c2\7\u009c")
        buf.write("\2\2\u06c2\u06c3\7,\2\2\u06c3\u06c8\5D#\2\u06c4\u06c5")
        buf.write("\7\7\2\2\u06c5\u06c7\5D#\2\u06c6\u06c4\3\2\2\2\u06c7\u06ca")
        buf.write("\3\2\2\2\u06c8\u06c6\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9")
        buf.write("\u06cc\3\2\2\2\u06ca\u06c8\3\2\2\2\u06cb\u06c1\3\2\2\2")
        buf.write("\u06cb\u06cc\3\2\2\2\u06cc\u06d7\3\2\2\2\u06cd\u06ce\7")
        buf.write("q\2\2\u06ce\u06cf\7,\2\2\u06cf\u06d4\5\u008cG\2\u06d0")
        buf.write("\u06d1\7\7\2\2\u06d1\u06d3\5\u008cG\2\u06d2\u06d0\3\2")
        buf.write("\2\2\u06d3\u06d6\3\2\2\2\u06d4\u06d2\3\2\2\2\u06d4\u06d5")
        buf.write("\3\2\2\2\u06d5\u06d8\3\2\2\2\u06d6\u06d4\3\2\2\2\u06d7")
        buf.write("\u06cd\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06da\3\2\2\2")
        buf.write("\u06d9\u06db\5|?\2\u06da\u06d9\3\2\2\2\u06da\u06db\3\2")
        buf.write("\2\2\u06db\u06dc\3\2\2\2\u06dc\u06de\7\6\2\2\u06dd\u06bc")
        buf.write("\3\2\2\2\u06dd\u06bd\3\2\2\2\u06de{\3\2\2\2\u06df\u06e7")
        buf.write("\5~@\2\u06e0\u06e1\7\u00b7\2\2\u06e1\u06e2\7i\2\2\u06e2")
        buf.write("\u06e8\7\u00b9\2\2\u06e3\u06e4\7\u00a0\2\2\u06e4\u06e8")
        buf.write("\7\u0082\2\2\u06e5\u06e8\7R\2\2\u06e6\u06e8\7\u00b8\2")
        buf.write("\2\u06e7\u06e0\3\2\2\2\u06e7\u06e3\3\2\2\2\u06e7\u06e5")
        buf.write("\3\2\2\2\u06e7\u06e6\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8")
        buf.write("}\3\2\2\2\u06e9\u06f0\t\26\2\2\u06ea\u06f1\5\u0094K\2")
        buf.write("\u06eb\u06ec\7+\2\2\u06ec\u06ed\5\u0090I\2\u06ed\u06ee")
        buf.write("\7$\2\2\u06ee\u06ef\5\u0092J\2\u06ef\u06f1\3\2\2\2\u06f0")
        buf.write("\u06ea\3\2\2\2\u06f0\u06eb\3\2\2\2\u06f1\177\3\2\2\2\u06f2")
        buf.write("\u06f3\5\u00dco\2\u06f3\u06fd\7\5\2\2\u06f4\u06f9\5D#")
        buf.write("\2\u06f5\u06f6\7\7\2\2\u06f6\u06f8\5D#\2\u06f7\u06f5\3")
        buf.write("\2\2\2\u06f8\u06fb\3\2\2\2\u06f9\u06f7\3\2\2\2\u06f9\u06fa")
        buf.write("\3\2\2\2\u06fa\u06fe\3\2\2\2\u06fb\u06f9\3\2\2\2\u06fc")
        buf.write("\u06fe\7\t\2\2\u06fd\u06f4\3\2\2\2\u06fd\u06fc\3\2\2\2")
        buf.write("\u06fe\u06ff\3\2\2\2\u06ff\u0700\7\6\2\2\u0700\u0081\3")
        buf.write("\2\2\2\u0701\u0702\5\u00dep\2\u0702\u070f\7\5\2\2\u0703")
        buf.write("\u0705\7B\2\2\u0704\u0703\3\2\2\2\u0704\u0705\3\2\2\2")
        buf.write("\u0705\u0706\3\2\2\2\u0706\u070b\5D#\2\u0707\u0708\7\7")
        buf.write("\2\2\u0708\u070a\5D#\2\u0709\u0707\3\2\2\2\u070a\u070d")
        buf.write("\3\2\2\2\u070b\u0709\3\2\2\2\u070b\u070c\3\2\2\2\u070c")
        buf.write("\u0710\3\2\2\2\u070d\u070b\3\2\2\2\u070e\u0710\7\t\2\2")
        buf.write("\u070f\u0704\3\2\2\2\u070f\u070e\3\2\2\2\u070f\u0710\3")
        buf.write("\2\2\2\u0710\u0711\3\2\2\2\u0711\u0713\7\6\2\2\u0712\u0714")
        buf.write("\5v<\2\u0713\u0712\3\2\2\2\u0713\u0714\3\2\2\2\u0714\u0083")
        buf.write("\3\2\2\2\u0715\u0716\5\u0096L\2\u0716\u0720\7\5\2\2\u0717")
        buf.write("\u071c\5D#\2\u0718\u0719\7\7\2\2\u0719\u071b\5D#\2\u071a")
        buf.write("\u0718\3\2\2\2\u071b\u071e\3\2\2\2\u071c\u071a\3\2\2\2")
        buf.write("\u071c\u071d\3\2\2\2\u071d\u0721\3\2\2\2\u071e\u071c\3")
        buf.write("\2\2\2\u071f\u0721\7\t\2\2\u0720\u0717\3\2\2\2\u0720\u071f")
        buf.write("\3\2\2\2\u0720\u0721\3\2\2\2\u0721\u0722\3\2\2\2\u0722")
        buf.write("\u0724\7\6\2\2\u0723\u0725\5v<\2\u0724\u0723\3\2\2\2\u0724")
        buf.write("\u0725\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0729\7\u009b")
        buf.write("\2\2\u0727\u072a\5x=\2\u0728\u072a\5\u00d4k\2\u0729\u0727")
        buf.write("\3\2\2\2\u0729\u0728\3\2\2\2\u072a\u0085\3\2\2\2\u072b")
        buf.write("\u072d\7\u0098\2\2\u072c\u072e\7x\2\2\u072d\u072c\3\2")
        buf.write("\2\2\u072d\u072e\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u0734")
        buf.write("\5:\36\2\u0730\u0731\7\7\2\2\u0731\u0733\5:\36\2\u0732")
        buf.write("\u0730\3\2\2\2\u0733\u0736\3\2\2\2\u0734\u0732\3\2\2\2")
        buf.write("\u0734\u0735\3\2\2\2\u0735\u0087\3\2\2\2\u0736\u0734\3")
        buf.write("\2\2\2\u0737\u0738\7q\2\2\u0738\u0739\7,\2\2\u0739\u073e")
        buf.write("\5\u008cG\2\u073a\u073b\7\7\2\2\u073b\u073d\5\u008cG\2")
        buf.write("\u073c\u073a\3\2\2\2\u073d\u0740\3\2\2\2\u073e\u073c\3")
        buf.write("\2\2\2\u073e\u073f\3\2\2\2\u073f\u0089\3\2\2\2\u0740\u073e")
        buf.write("\3\2\2\2\u0741\u0742\7f\2\2\u0742\u0745\5D#\2\u0743\u0744")
        buf.write("\t\27\2\2\u0744\u0746\5D#\2\u0745\u0743\3\2\2\2\u0745")
        buf.write("\u0746\3\2\2\2\u0746\u008b\3\2\2\2\u0747\u074a\5D#\2\u0748")
        buf.write("\u0749\7\61\2\2\u0749\u074b\5\u00c0a\2\u074a\u0748\3\2")
        buf.write("\2\2\u074a\u074b\3\2\2\2\u074b\u074d\3\2\2\2\u074c\u074e")
        buf.write("\5\u008eH\2\u074d\u074c\3\2\2\2\u074d\u074e\3\2\2\2\u074e")
        buf.write("\u0751\3\2\2\2\u074f\u0750\7\u00b2\2\2\u0750\u0752\t\30")
        buf.write("\2\2\u0751\u074f\3\2\2\2\u0751\u0752\3\2\2\2\u0752\u008d")
        buf.write("\3\2\2\2\u0753\u0754\t\31\2\2\u0754\u008f\3\2\2\2\u0755")
        buf.write("\u0756\5D#\2\u0756\u0757\7\u009e\2\2\u0757\u0760\3\2\2")
        buf.write("\2\u0758\u0759\5D#\2\u0759\u075a\7\u00a1\2\2\u075a\u0760")
        buf.write("\3\2\2\2\u075b\u075c\7\u00a0\2\2\u075c\u0760\7\u0082\2")
        buf.write("\2\u075d\u075e\7\u009f\2\2\u075e\u0760\7\u009e\2\2\u075f")
        buf.write("\u0755\3\2\2\2\u075f\u0758\3\2\2\2\u075f\u075b\3\2\2\2")
        buf.write("\u075f\u075d\3\2\2\2\u0760\u0091\3\2\2\2\u0761\u0762\5")
        buf.write("D#\2\u0762\u0763\7\u009e\2\2\u0763\u076c\3\2\2\2\u0764")
        buf.write("\u0765\5D#\2\u0765\u0766\7\u00a1\2\2\u0766\u076c\3\2\2")
        buf.write("\2\u0767\u0768\7\u00a0\2\2\u0768\u076c\7\u0082\2\2\u0769")
        buf.write("\u076a\7\u009f\2\2\u076a\u076c\7\u00a1\2\2\u076b\u0761")
        buf.write("\3\2\2\2\u076b\u0764\3\2\2\2\u076b\u0767\3\2\2\2\u076b")
        buf.write("\u0769\3\2\2\2\u076c\u0093\3\2\2\2\u076d\u076e\5D#\2\u076e")
        buf.write("\u076f\7\u009e\2\2\u076f\u0775\3\2\2\2\u0770\u0771\7\u009f")
        buf.write("\2\2\u0771\u0775\7\u009e\2\2\u0772\u0773\7\u00a0\2\2\u0773")
        buf.write("\u0775\7\u0082\2\2\u0774\u076d\3\2\2\2\u0774\u0770\3\2")
        buf.write("\2\2\u0774\u0772\3\2\2\2\u0775\u0095\3\2\2\2\u0776\u0777")
        buf.write("\t\32\2\2\u0777\u0778\7\5\2\2\u0778\u0779\5D#\2\u0779")
        buf.write("\u077a\7\6\2\2\u077a\u077b\7\u009b\2\2\u077b\u077d\7\5")
        buf.write("\2\2\u077c\u077e\5\u009cO\2\u077d\u077c\3\2\2\2\u077d")
        buf.write("\u077e\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0781\5\u00a0")
        buf.write("Q\2\u0780\u0782\5~@\2\u0781\u0780\3\2\2\2\u0781\u0782")
        buf.write("\3\2\2\2\u0782\u0783\3\2\2\2\u0783\u0784\7\6\2\2\u0784")
        buf.write("\u07cc\3\2\2\2\u0785\u0786\t\33\2\2\u0786\u0787\7\5\2")
        buf.write("\2\u0787\u0788\7\6\2\2\u0788\u0789\7\u009b\2\2\u0789\u078b")
        buf.write("\7\5\2\2\u078a\u078c\5\u009cO\2\u078b\u078a\3\2\2\2\u078b")
        buf.write("\u078c\3\2\2\2\u078c\u078e\3\2\2\2\u078d\u078f\5\u009e")
        buf.write("P\2\u078e\u078d\3\2\2\2\u078e\u078f\3\2\2\2\u078f\u0790")
        buf.write("\3\2\2\2\u0790\u07cc\7\6\2\2\u0791\u0792\t\34\2\2\u0792")
        buf.write("\u0793\7\5\2\2\u0793\u0794\7\6\2\2\u0794\u0795\7\u009b")
        buf.write("\2\2\u0795\u0797\7\5\2\2\u0796\u0798\5\u009cO\2\u0797")
        buf.write("\u0796\3\2\2\2\u0797\u0798\3\2\2\2\u0798\u0799\3\2\2\2")
        buf.write("\u0799\u079a\5\u00a0Q\2\u079a\u079b\7\6\2\2\u079b\u07cc")
        buf.write("\3\2\2\2\u079c\u079d\t\35\2\2\u079d\u079e\7\5\2\2\u079e")
        buf.write("\u07a0\5D#\2\u079f\u07a1\5\u0098M\2\u07a0\u079f\3\2\2")
        buf.write("\2\u07a0\u07a1\3\2\2\2\u07a1\u07a3\3\2\2\2\u07a2\u07a4")
        buf.write("\5\u009aN\2\u07a3\u07a2\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4")
        buf.write("\u07a5\3\2\2\2\u07a5\u07a6\7\6\2\2\u07a6\u07a7\7\u009b")
        buf.write("\2\2\u07a7\u07a9\7\5\2\2\u07a8\u07aa\5\u009cO\2\u07a9")
        buf.write("\u07a8\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07ab\3\2\2\2")
        buf.write("\u07ab\u07ac\5\u00a0Q\2\u07ac\u07ad\7\6\2\2\u07ad\u07cc")
        buf.write("\3\2\2\2\u07ae\u07af\7\u00a7\2\2\u07af\u07b0\7\5\2\2\u07b0")
        buf.write("\u07b1\5D#\2\u07b1\u07b2\7\7\2\2\u07b2\u07b3\5&\24\2\u07b3")
        buf.write("\u07b4\7\6\2\2\u07b4\u07b5\7\u009b\2\2\u07b5\u07b7\7\5")
        buf.write("\2\2\u07b6\u07b8\5\u009cO\2\u07b7\u07b6\3\2\2\2\u07b7")
        buf.write("\u07b8\3\2\2\2\u07b8\u07b9\3\2\2\2\u07b9\u07bb\5\u00a0")
        buf.write("Q\2\u07ba\u07bc\5~@\2\u07bb\u07ba\3\2\2\2\u07bb\u07bc")
        buf.write("\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07be\7\6\2\2\u07be")
        buf.write("\u07cc\3\2\2\2\u07bf\u07c0\7\u00a8\2\2\u07c0\u07c1\7\5")
        buf.write("\2\2\u07c1\u07c2\5D#\2\u07c2\u07c3\7\6\2\2\u07c3\u07c4")
        buf.write("\7\u009b\2\2\u07c4\u07c6\7\5\2\2\u07c5\u07c7\5\u009cO")
        buf.write("\2\u07c6\u07c5\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07c8")
        buf.write("\3\2\2\2\u07c8\u07c9\5\u00a0Q\2\u07c9\u07ca\7\6\2\2\u07ca")
        buf.write("\u07cc\3\2\2\2\u07cb\u0776\3\2\2\2\u07cb\u0785\3\2\2\2")
        buf.write("\u07cb\u0791\3\2\2\2\u07cb\u079c\3\2\2\2\u07cb\u07ae\3")
        buf.write("\2\2\2\u07cb\u07bf\3\2\2\2\u07cc\u0097\3\2\2\2\u07cd\u07ce")
        buf.write("\7\7\2\2\u07ce\u07cf\5&\24\2\u07cf\u0099\3\2\2\2\u07d0")
        buf.write("\u07d1\7\7\2\2\u07d1\u07d2\5&\24\2\u07d2\u009b\3\2\2\2")
        buf.write("\u07d3\u07d4\7\u009c\2\2\u07d4\u07d6\7,\2\2\u07d5\u07d7")
        buf.write("\5D#\2\u07d6\u07d5\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u07d6")
        buf.write("\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u009d\3\2\2\2\u07da")
        buf.write("\u07db\7q\2\2\u07db\u07dd\7,\2\2\u07dc\u07de\5D#\2\u07dd")
        buf.write("\u07dc\3\2\2\2\u07de\u07df\3\2\2\2\u07df\u07dd\3\2\2\2")
        buf.write("\u07df\u07e0\3\2\2\2\u07e0\u009f\3\2\2\2\u07e1\u07e2\7")
        buf.write("q\2\2\u07e2\u07e3\7,\2\2\u07e3\u07e4\5\u00a0Q\2\u07e4")
        buf.write("\u00a1\3\2\2\2\u07e5\u07e7\5D#\2\u07e6\u07e8\5\u008eH")
        buf.write("\2\u07e7\u07e6\3\2\2\2\u07e7\u07e8\3\2\2\2\u07e8\u07f0")
        buf.write("\3\2\2\2\u07e9\u07ea\7\7\2\2\u07ea\u07ec\5D#\2\u07eb\u07ed")
        buf.write("\5\u008eH\2\u07ec\u07eb\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed")
        buf.write("\u07ef\3\2\2\2\u07ee\u07e9\3\2\2\2\u07ef\u07f2\3\2\2\2")
        buf.write("\u07f0\u07ee\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u00a3\3")
        buf.write("\2\2\2\u07f2\u07f0\3\2\2\2\u07f3\u07f4\5T+\2\u07f4\u00a5")
        buf.write("\3\2\2\2\u07f5\u07f6\5T+\2\u07f6\u00a7\3\2\2\2\u07f7\u07f8")
        buf.write("\t\36\2\2\u07f8\u00a9\3\2\2\2\u07f9\u07fa\7\u00cd\2\2")
        buf.write("\u07fa\u00ab\3\2\2\2\u07fb\u07fe\5D#\2\u07fc\u07fe\5 ")
        buf.write("\21\2\u07fd\u07fb\3\2\2\2\u07fd\u07fc\3\2\2\2\u07fe\u00ad")
        buf.write("\3\2\2\2\u07ff\u0800\t\37\2\2\u0800\u00af\3\2\2\2\u0801")
        buf.write("\u0802\t \2\2\u0802\u00b1\3\2\2\2\u0803\u0804\5\u00e2")
        buf.write("r\2\u0804\u00b3\3\2\2\2\u0805\u0806\5\u00e2r\2\u0806\u00b5")
        buf.write("\3\2\2\2\u0807\u0808\5\u00e2r\2\u0808\u00b7\3\2\2\2\u0809")
        buf.write("\u080a\5\u00e2r\2\u080a\u00b9\3\2\2\2\u080b\u080c\5\u00e2")
        buf.write("r\2\u080c\u00bb\3\2\2\2\u080d\u080e\5\u00e2r\2\u080e\u00bd")
        buf.write("\3\2\2\2\u080f\u0810\5\u00e2r\2\u0810\u00bf\3\2\2\2\u0811")
        buf.write("\u0812\5\u00e2r\2\u0812\u00c1\3\2\2\2\u0813\u0814\5\u00e2")
        buf.write("r\2\u0814\u00c3\3\2\2\2\u0815\u0816\5\u00e2r\2\u0816\u00c5")
        buf.write("\3\2\2\2\u0817\u0818\5\u00e2r\2\u0818\u00c7\3\2\2\2\u0819")
        buf.write("\u081a\5\u00e2r\2\u081a\u00c9\3\2\2\2\u081b\u081c\5\u00e2")
        buf.write("r\2\u081c\u00cb\3\2\2\2\u081d\u081e\5\u00e2r\2\u081e\u00cd")
        buf.write("\3\2\2\2\u081f\u0820\5\u00e2r\2\u0820\u00cf\3\2\2\2\u0821")
        buf.write("\u0822\5\u00e2r\2\u0822\u00d1\3\2\2\2\u0823\u0824\5\u00e2")
        buf.write("r\2\u0824\u00d3\3\2\2\2\u0825\u0826\5\u00e2r\2\u0826\u00d5")
        buf.write("\3\2\2\2\u0827\u0828\5\u00e2r\2\u0828\u00d7\3\2\2\2\u0829")
        buf.write("\u082a\5\u00e2r\2\u082a\u00d9\3\2\2\2\u082b\u082c\5\u00e2")
        buf.write("r\2\u082c\u00db\3\2\2\2\u082d\u082e\5\u00e2r\2\u082e\u00dd")
        buf.write("\3\2\2\2\u082f\u0830\5\u00e2r\2\u0830\u00df\3\2\2\2\u0831")
        buf.write("\u0832\5\u00e2r\2\u0832\u00e1\3\2\2\2\u0833\u083b\7\u00ca")
        buf.write("\2\2\u0834\u083b\5\u00b0Y\2\u0835\u083b\7\u00cd\2\2\u0836")
        buf.write("\u0837\7\5\2\2\u0837\u0838\5\u00e2r\2\u0838\u0839\7\6")
        buf.write("\2\2\u0839\u083b\3\2\2\2\u083a\u0833\3\2\2\2\u083a\u0834")
        buf.write("\3\2\2\2\u083a\u0835\3\2\2\2\u083a\u0836\3\2\2\2\u083b")
        buf.write("\u00e3\3\2\2\2\u0128\u00e6\u00e8\u00f3\u00fa\u00ff\u0105")
        buf.write("\u010b\u010d\u0127\u012e\u0135\u013b\u013f\u0142\u0149")
        buf.write("\u014c\u0150\u0158\u015c\u015e\u0162\u0166\u016a\u016d")
        buf.write("\u0174\u017a\u0180\u0185\u0190\u0196\u019a\u019e\u01a1")
        buf.write("\u01a5\u01ab\u01b0\u01b9\u01c0\u01c6\u01ca\u01ce\u01d3")
        buf.write("\u01d9\u01e5\u01e9\u01ee\u01f1\u01f4\u01f9\u01fc\u020a")
        buf.write("\u0211\u0218\u021a\u021d\u0223\u0228\u0230\u0235\u0244")
        buf.write("\u024a\u0254\u0259\u0263\u0267\u0269\u026d\u0272\u0274")
        buf.write("\u027c\u0282\u0287\u028e\u0299\u029c\u029e\u02a5\u02a9")
        buf.write("\u02b0\u02b6\u02bc\u02c2\u02c7\u02d0\u02d5\u02e0\u02e5")
        buf.write("\u02f0\u02f5\u02f9\u0309\u0313\u0318\u0320\u032c\u0331")
        buf.write("\u0339\u0340\u0343\u034a\u034d\u0350\u0354\u035c\u0361")
        buf.write("\u036b\u0370\u0379\u0394\u03a0\u03a7\u03ae\u03b2\u03b6")
        buf.write("\u03b9\u03c1\u03ce\u03d1\u03d9\u03e2\u03e6\u03eb\u0409")
        buf.write("\u0415\u041a\u0426\u042c\u0433\u0437\u0441\u0444\u044a")
        buf.write("\u0450\u0459\u045c\u0460\u0462\u0464\u046d\u0474\u047b")
        buf.write("\u0481\u0486\u048e\u0493\u049c\u04a7\u04ae\u04b2\u04b5")
        buf.write("\u04b9\u04c3\u04c9\u04cb\u04d3\u04da\u04e1\u04e6\u04e8")
        buf.write("\u04ee\u04f7\u04fc\u0503\u0507\u0509\u050c\u0514\u0518")
        buf.write("\u051b\u0521\u0525\u052e\u0532\u0539\u0542\u0546\u0548")
        buf.write("\u054c\u0555\u055a\u055c\u0569\u056c\u0575\u0580\u0587")
        buf.write("\u058a\u058f\u0593\u0596\u0599\u059e\u05a2\u05a7\u05aa")
        buf.write("\u05ad\u05b2\u05b6\u05b9\u05c0\u05c5\u05ce\u05d3\u05d6")
        buf.write("\u05de\u05e2\u05ea\u05ed\u05ef\u05f8\u05fb\u05fd\u0601")
        buf.write("\u0605\u0609\u060d\u0610\u061b\u0620\u0624\u0628\u062b")
        buf.write("\u0630\u0636\u063d\u0644\u0649\u0651\u0657\u065c\u0662")
        buf.write("\u0669\u0670\u0675\u0678\u067b\u0680\u0685\u068c\u0690")
        buf.write("\u0694\u069e\u06a7\u06aa\u06b3\u06b7\u06bf\u06c8\u06cb")
        buf.write("\u06d4\u06d7\u06da\u06dd\u06e7\u06f0\u06f9\u06fd\u0704")
        buf.write("\u070b\u070f\u0713\u071c\u0720\u0724\u0729\u072d\u0734")
        buf.write("\u073e\u0745\u074a\u074d\u0751\u075f\u076b\u0774\u077d")
        buf.write("\u0781\u078b\u078e\u0797\u07a0\u07a3\u07a9\u07b7\u07bb")
        buf.write("\u07c6\u07cb\u07d8\u07df\u07e7\u07ec\u07f0\u07fd\u083a")
        return buf.getvalue()


class SQLiteParser ( Parser ):

    grammarFileName = "SQLiteParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "LBRACE", "RBRACE", "ABORT", "ACTION", "ADD", "AFTER", 
                      "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "ATTACH", 
                      "AUTOINCREMENT", "BEFORE", "BEGIN", "BETWEEN", "BY", 
                      "CASCADE", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN", 
                      "COMMIT", "CONFLICT", "CONSTRAINT", "CREATE", "CROSS", 
                      "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "DATABASE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DELETE", 
                      "DESC", "DETACH", "DISTINCT", "DROP", "EACH", "ELSE", 
                      "END", "ESCAPE", "EXCEPT", "EXCLUSIVE", "EXISTS", 
                      "EXPLAIN", "FAIL", "FOR", "FOREIGN", "FROM", "FULL", 
                      "GLOB", "GROUP", "HAVING", "IF", "IGNORE", "IMMEDIATE", 
                      "IN", "INDEX", "INDEXED", "INITIALLY", "INNER", "INSERT", 
                      "INSTEAD", "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", 
                      "KEY", "LEFT", "LIKE", "LIMIT", "MATCH", "NATURAL", 
                      "NO", "NOT", "NOTNULL", "NULL_", "OF", "OFFSET", "ON", 
                      "OR", "ORDER", "OUTER", "PLAN", "PRAGMA", "PRIMARY", 
                      "QUERY", "RAISE", "RECURSIVE", "REFERENCES", "REGEXP", 
                      "REINDEX", "RELEASE", "RENAME", "REPLACE", "RESTRICT", 
                      "RIGHT", "ROLLBACK", "ROW", "ROWS", "SAVEPOINT", "SELECT", 
                      "SET", "TABLE", "TEMP", "TEMPORARY", "THEN", "TO", 
                      "TRANSACTION", "TRIGGER", "UNION", "UNIQUE", "UPDATE", 
                      "USING", "VACUUM", "VALUES", "VIEW", "VIRTUAL", "WHEN", 
                      "WHERE", "WITH", "WITHOUT", "FIRST_VALUE", "OVER", 
                      "PARTITION", "RANGE", "PRECEDING", "UNBOUNDED", "CURRENT", 
                      "FOLLOWING", "CUME_DIST", "DENSE_RANK", "LAG", "LAST_VALUE", 
                      "LEAD", "NTH_VALUE", "NTILE", "PERCENT_RANK", "RANK", 
                      "ROW_NUMBER", "GENERATED", "ALWAYS", "STORED", "TRUE_", 
                      "FALSE_", "WINDOW", "NULLS", "FIRST", "LAST", "FILTER", 
                      "GROUPS", "EXCLUDE", "TIES", "OTHERS", "DO", "NOTHING", 
                      "TRIM", "BOTH", "TRAILING", "LEADING", "EXTRACT", 
                      "YEAR", "MONTH", "DAY", "HOUR", "MINUTE", "SECOND", 
                      "POSITION", "SUBSTRING", "OJ", "IDENTIFIER", "NUMERIC_LITERAL", 
                      "BIND_PARAMETER", "STRING_LITERAL", "BLOB_LITERAL", 
                      "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
                      "UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_error = 1
    RULE_sql_stmt_list = 2
    RULE_sql_stmt = 3
    RULE_alter_table_stmt = 4
    RULE_analyze_stmt = 5
    RULE_attach_stmt = 6
    RULE_begin_stmt = 7
    RULE_commit_stmt = 8
    RULE_rollback_stmt = 9
    RULE_savepoint_stmt = 10
    RULE_release_stmt = 11
    RULE_create_index_stmt = 12
    RULE_indexed_column = 13
    RULE_create_table_stmt = 14
    RULE_column_def = 15
    RULE_type_name = 16
    RULE_column_constraint = 17
    RULE_signed_number = 18
    RULE_table_constraint = 19
    RULE_foreign_key_clause = 20
    RULE_conflict_clause = 21
    RULE_create_trigger_stmt = 22
    RULE_create_view_stmt = 23
    RULE_create_virtual_table_stmt = 24
    RULE_with_clause = 25
    RULE_cte_table_name = 26
    RULE_recursive_cte = 27
    RULE_common_table_expression = 28
    RULE_delete_stmt = 29
    RULE_delete_stmt_limited = 30
    RULE_detach_stmt = 31
    RULE_drop_stmt = 32
    RULE_expr = 33
    RULE_raise_function = 34
    RULE_literal_value = 35
    RULE_insert_stmt = 36
    RULE_upsert_clause = 37
    RULE_pragma_stmt = 38
    RULE_pragma_value = 39
    RULE_reindex_stmt = 40
    RULE_select_stmt = 41
    RULE_join_raw_clause = 42
    RULE_join_clause = 43
    RULE_select_core = 44
    RULE_factored_select_stmt = 45
    RULE_simple_select_stmt = 46
    RULE_compound_select_stmt = 47
    RULE_table_or_subquery = 48
    RULE_result_column = 49
    RULE_join_operator = 50
    RULE_join_constraint = 51
    RULE_compound_operator = 52
    RULE_update_stmt = 53
    RULE_column_name_list = 54
    RULE_update_stmt_limited = 55
    RULE_qualified_table_name = 56
    RULE_vacuum_stmt = 57
    RULE_filter_clause = 58
    RULE_window_defn = 59
    RULE_over_clause = 60
    RULE_frame_spec = 61
    RULE_frame_clause = 62
    RULE_simple_function_invocation = 63
    RULE_aggregate_function_invocation = 64
    RULE_window_function_invocation = 65
    RULE_common_table_stmt = 66
    RULE_order_by_stmt = 67
    RULE_limit_stmt = 68
    RULE_ordering_term = 69
    RULE_asc_desc = 70
    RULE_frame_left = 71
    RULE_frame_right = 72
    RULE_frame_single = 73
    RULE_window_function = 74
    RULE_offset = 75
    RULE_default_value = 76
    RULE_partition_by = 77
    RULE_order_by_expr = 78
    RULE_order_by_expr_asc_desc = 79
    RULE_expr_asc_desc = 80
    RULE_initial_select = 81
    RULE_recursive_select = 82
    RULE_unary_operator = 83
    RULE_error_message = 84
    RULE_module_argument = 85
    RULE_column_alias = 86
    RULE_keyword = 87
    RULE_name = 88
    RULE_function_name = 89
    RULE_schema_name = 90
    RULE_table_name = 91
    RULE_table_or_index_name = 92
    RULE_new_table_name = 93
    RULE_column_name = 94
    RULE_collation_name = 95
    RULE_foreign_table = 96
    RULE_index_name = 97
    RULE_trigger_name = 98
    RULE_view_name = 99
    RULE_module_name = 100
    RULE_pragma_name = 101
    RULE_savepoint_name = 102
    RULE_table_alias = 103
    RULE_transaction_name = 104
    RULE_window_name = 105
    RULE_alias = 106
    RULE_filename = 107
    RULE_base_window_name = 108
    RULE_simple_func = 109
    RULE_aggregate_func = 110
    RULE_table_function_name = 111
    RULE_any_name = 112

    ruleNames =  [ "parse", "error", "sql_stmt_list", "sql_stmt", "alter_table_stmt", 
                   "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
                   "rollback_stmt", "savepoint_stmt", "release_stmt", "create_index_stmt", 
                   "indexed_column", "create_table_stmt", "column_def", 
                   "type_name", "column_constraint", "signed_number", "table_constraint", 
                   "foreign_key_clause", "conflict_clause", "create_trigger_stmt", 
                   "create_view_stmt", "create_virtual_table_stmt", "with_clause", 
                   "cte_table_name", "recursive_cte", "common_table_expression", 
                   "delete_stmt", "delete_stmt_limited", "detach_stmt", 
                   "drop_stmt", "expr", "raise_function", "literal_value", 
                   "insert_stmt", "upsert_clause", "pragma_stmt", "pragma_value", 
                   "reindex_stmt", "select_stmt", "join_raw_clause", "join_clause", 
                   "select_core", "factored_select_stmt", "simple_select_stmt", 
                   "compound_select_stmt", "table_or_subquery", "result_column", 
                   "join_operator", "join_constraint", "compound_operator", 
                   "update_stmt", "column_name_list", "update_stmt_limited", 
                   "qualified_table_name", "vacuum_stmt", "filter_clause", 
                   "window_defn", "over_clause", "frame_spec", "frame_clause", 
                   "simple_function_invocation", "aggregate_function_invocation", 
                   "window_function_invocation", "common_table_stmt", "order_by_stmt", 
                   "limit_stmt", "ordering_term", "asc_desc", "frame_left", 
                   "frame_right", "frame_single", "window_function", "offset", 
                   "default_value", "partition_by", "order_by_expr", "order_by_expr_asc_desc", 
                   "expr_asc_desc", "initial_select", "recursive_select", 
                   "unary_operator", "error_message", "module_argument", 
                   "column_alias", "keyword", "name", "function_name", "schema_name", 
                   "table_name", "table_or_index_name", "new_table_name", 
                   "column_name", "collation_name", "foreign_table", "index_name", 
                   "trigger_name", "view_name", "module_name", "pragma_name", 
                   "savepoint_name", "table_alias", "transaction_name", 
                   "window_name", "alias", "filename", "base_window_name", 
                   "simple_func", "aggregate_func", "table_function_name", 
                   "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    LBRACE=25
    RBRACE=26
    ABORT=27
    ACTION=28
    ADD=29
    AFTER=30
    ALL=31
    ALTER=32
    ANALYZE=33
    AND=34
    AS=35
    ASC=36
    ATTACH=37
    AUTOINCREMENT=38
    BEFORE=39
    BEGIN=40
    BETWEEN=41
    BY=42
    CASCADE=43
    CASE=44
    CAST=45
    CHECK=46
    COLLATE=47
    COLUMN=48
    COMMIT=49
    CONFLICT=50
    CONSTRAINT=51
    CREATE=52
    CROSS=53
    CURRENT_DATE=54
    CURRENT_TIME=55
    CURRENT_TIMESTAMP=56
    DATABASE=57
    DEFAULT=58
    DEFERRABLE=59
    DEFERRED=60
    DELETE=61
    DESC=62
    DETACH=63
    DISTINCT=64
    DROP=65
    EACH=66
    ELSE=67
    END=68
    ESCAPE=69
    EXCEPT=70
    EXCLUSIVE=71
    EXISTS=72
    EXPLAIN=73
    FAIL=74
    FOR=75
    FOREIGN=76
    FROM=77
    FULL=78
    GLOB=79
    GROUP=80
    HAVING=81
    IF=82
    IGNORE=83
    IMMEDIATE=84
    IN=85
    INDEX=86
    INDEXED=87
    INITIALLY=88
    INNER=89
    INSERT=90
    INSTEAD=91
    INTERSECT=92
    INTO=93
    IS=94
    ISNULL=95
    JOIN=96
    KEY=97
    LEFT=98
    LIKE=99
    LIMIT=100
    MATCH=101
    NATURAL=102
    NO=103
    NOT=104
    NOTNULL=105
    NULL_=106
    OF=107
    OFFSET=108
    ON=109
    OR=110
    ORDER=111
    OUTER=112
    PLAN=113
    PRAGMA=114
    PRIMARY=115
    QUERY=116
    RAISE=117
    RECURSIVE=118
    REFERENCES=119
    REGEXP=120
    REINDEX=121
    RELEASE=122
    RENAME=123
    REPLACE=124
    RESTRICT=125
    RIGHT=126
    ROLLBACK=127
    ROW=128
    ROWS=129
    SAVEPOINT=130
    SELECT=131
    SET=132
    TABLE=133
    TEMP=134
    TEMPORARY=135
    THEN=136
    TO=137
    TRANSACTION=138
    TRIGGER=139
    UNION=140
    UNIQUE=141
    UPDATE=142
    USING=143
    VACUUM=144
    VALUES=145
    VIEW=146
    VIRTUAL=147
    WHEN=148
    WHERE=149
    WITH=150
    WITHOUT=151
    FIRST_VALUE=152
    OVER=153
    PARTITION=154
    RANGE=155
    PRECEDING=156
    UNBOUNDED=157
    CURRENT=158
    FOLLOWING=159
    CUME_DIST=160
    DENSE_RANK=161
    LAG=162
    LAST_VALUE=163
    LEAD=164
    NTH_VALUE=165
    NTILE=166
    PERCENT_RANK=167
    RANK=168
    ROW_NUMBER=169
    GENERATED=170
    ALWAYS=171
    STORED=172
    TRUE_=173
    FALSE_=174
    WINDOW=175
    NULLS=176
    FIRST=177
    LAST=178
    FILTER=179
    GROUPS=180
    EXCLUDE=181
    TIES=182
    OTHERS=183
    DO=184
    NOTHING=185
    TRIM=186
    BOTH=187
    TRAILING=188
    LEADING=189
    EXTRACT=190
    YEAR=191
    MONTH=192
    DAY=193
    HOUR=194
    MINUTE=195
    SECOND=196
    POSITION=197
    SUBSTRING=198
    OJ=199
    IDENTIFIER=200
    NUMERIC_LITERAL=201
    BIND_PARAMETER=202
    STRING_LITERAL=203
    BLOB_LITERAL=204
    SINGLE_LINE_COMMENT=205
    MULTILINE_COMMENT=206
    SPACES=207
    UNEXPECTED_CHAR=208

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ParseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext,i)


        def error(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ErrorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ErrorContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)




    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.SCOL) | (1 << SQLiteParser.ALTER) | (1 << SQLiteParser.ANALYZE) | (1 << SQLiteParser.ATTACH) | (1 << SQLiteParser.BEGIN) | (1 << SQLiteParser.COMMIT) | (1 << SQLiteParser.CREATE) | (1 << SQLiteParser.DEFAULT) | (1 << SQLiteParser.DELETE) | (1 << SQLiteParser.DETACH))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (SQLiteParser.DROP - 65)) | (1 << (SQLiteParser.END - 65)) | (1 << (SQLiteParser.EXPLAIN - 65)) | (1 << (SQLiteParser.INSERT - 65)) | (1 << (SQLiteParser.PRAGMA - 65)) | (1 << (SQLiteParser.REINDEX - 65)) | (1 << (SQLiteParser.RELEASE - 65)) | (1 << (SQLiteParser.REPLACE - 65)) | (1 << (SQLiteParser.ROLLBACK - 65)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (SQLiteParser.SAVEPOINT - 130)) | (1 << (SQLiteParser.SELECT - 130)) | (1 << (SQLiteParser.UPDATE - 130)) | (1 << (SQLiteParser.VACUUM - 130)) | (1 << (SQLiteParser.VALUES - 130)) | (1 << (SQLiteParser.WITH - 130)))) != 0) or _la==SQLiteParser.UNEXPECTED_CHAR:
                self.state = 228
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.SCOL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.ATTACH, SQLiteParser.BEGIN, SQLiteParser.COMMIT, SQLiteParser.CREATE, SQLiteParser.DEFAULT, SQLiteParser.DELETE, SQLiteParser.DETACH, SQLiteParser.DROP, SQLiteParser.END, SQLiteParser.EXPLAIN, SQLiteParser.INSERT, SQLiteParser.PRAGMA, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.REPLACE, SQLiteParser.ROLLBACK, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.UPDATE, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.WITH]:
                    self.state = 226
                    self.sql_stmt_list()
                    pass
                elif token in [SQLiteParser.UNEXPECTED_CHAR]:
                    self.state = 227
                    self.error()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 233
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._UNEXPECTED_CHAR = None # Token

        def UNEXPECTED_CHAR(self):
            return self.getToken(SQLiteParser.UNEXPECTED_CHAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError" ):
                listener.enterError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError" ):
                listener.exitError(self)




    def error(self):

        localctx = SQLiteParser.ErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_error)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            localctx._UNEXPECTED_CHAR = self.match(SQLiteParser.UNEXPECTED_CHAR)
            raise RuntimeError("UNEXPECTED_CHAR=" + (None if localctx._UNEXPECTED_CHAR is None else localctx._UNEXPECTED_CHAR.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.SCOL:
                self.state = 238
                self.match(SQLiteParser.SCOL)
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 244
            self.sql_stmt()
            self.state = 253
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 246 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 245
                        self.match(SQLiteParser.SCOL)
                        self.state = 248 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SQLiteParser.SCOL):
                            break

                    self.state = 250
                    self.sql_stmt() 
                self.state = 255
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 259
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 256
                    self.match(SQLiteParser.SCOL) 
                self.state = 261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext,0)


        def drop_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext,0)


        def EXPLAIN(self):
            return self.getToken(SQLiteParser.EXPLAIN, 0)

        def QUERY(self):
            return self.getToken(SQLiteParser.QUERY, 0)

        def PLAN(self):
            return self.getToken(SQLiteParser.PLAN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.EXPLAIN:
                self.state = 262
                self.match(SQLiteParser.EXPLAIN)
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.QUERY:
                    self.state = 263
                    self.match(SQLiteParser.QUERY)
                    self.state = 264
                    self.match(SQLiteParser.PLAN)




            self.state = 293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 269
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 270
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 271
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 272
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 273
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 274
                self.create_index_stmt()
                pass

            elif la_ == 7:
                self.state = 275
                self.create_table_stmt()
                pass

            elif la_ == 8:
                self.state = 276
                self.create_trigger_stmt()
                pass

            elif la_ == 9:
                self.state = 277
                self.create_view_stmt()
                pass

            elif la_ == 10:
                self.state = 278
                self.create_virtual_table_stmt()
                pass

            elif la_ == 11:
                self.state = 279
                self.delete_stmt()
                pass

            elif la_ == 12:
                self.state = 280
                self.delete_stmt_limited()
                pass

            elif la_ == 13:
                self.state = 281
                self.detach_stmt()
                pass

            elif la_ == 14:
                self.state = 282
                self.drop_stmt()
                pass

            elif la_ == 15:
                self.state = 283
                self.insert_stmt()
                pass

            elif la_ == 16:
                self.state = 284
                self.pragma_stmt()
                pass

            elif la_ == 17:
                self.state = 285
                self.reindex_stmt()
                pass

            elif la_ == 18:
                self.state = 286
                self.release_stmt()
                pass

            elif la_ == 19:
                self.state = 287
                self.rollback_stmt()
                pass

            elif la_ == 20:
                self.state = 288
                self.savepoint_stmt()
                pass

            elif la_ == 21:
                self.state = 289
                self.select_stmt()
                pass

            elif la_ == 22:
                self.state = 290
                self.update_stmt()
                pass

            elif la_ == 23:
                self.state = 291
                self.update_stmt_limited()
                pass

            elif la_ == 24:
                self.state = 292
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_column_name = None # Column_nameContext
            self.new_column_name = None # Column_nameContext

        def ALTER(self):
            return self.getToken(SQLiteParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def RENAME(self):
            return self.getToken(SQLiteParser.RENAME, 0)

        def ADD(self):
            return self.getToken(SQLiteParser.ADD, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COLUMN(self):
            return self.getToken(SQLiteParser.COLUMN, 0)

        def TO(self):
            return self.getToken(SQLiteParser.TO, 0)

        def new_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.New_table_nameContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = SQLiteParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.match(SQLiteParser.ALTER)
            self.state = 296
            self.match(SQLiteParser.TABLE)
            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 297
                self.schema_name()
                self.state = 298
                self.match(SQLiteParser.DOT)


            self.state = 302
            self.table_name()
            self.state = 320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.RENAME]:
                self.state = 303
                self.match(SQLiteParser.RENAME)
                self.state = 313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 304
                    self.match(SQLiteParser.TO)
                    self.state = 305
                    self.new_table_name()
                    pass

                elif la_ == 2:
                    self.state = 307
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                    if la_ == 1:
                        self.state = 306
                        self.match(SQLiteParser.COLUMN)


                    self.state = 309
                    localctx.old_column_name = self.column_name()
                    self.state = 310
                    self.match(SQLiteParser.TO)
                    self.state = 311
                    localctx.new_column_name = self.column_name()
                    pass


                pass
            elif token in [SQLiteParser.ADD]:
                self.state = 315
                self.match(SQLiteParser.ADD)
                self.state = 317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 316
                    self.match(SQLiteParser.COLUMN)


                self.state = 319
                self.column_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(SQLiteParser.ANALYZE, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_stmt" ):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_stmt" ):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(SQLiteParser.ANALYZE)
            self.state = 330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 323
                self.schema_name()

            elif la_ == 2:
                self.state = 327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 324
                    self.schema_name()
                    self.state = 325
                    self.match(SQLiteParser.DOT)


                self.state = 329
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH(self):
            return self.getToken(SQLiteParser.ATTACH, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE(self):
            return self.getToken(SQLiteParser.DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttach_stmt" ):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttach_stmt" ):
                listener.exitAttach_stmt(self)




    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.match(SQLiteParser.ATTACH)
            self.state = 334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 333
                self.match(SQLiteParser.DATABASE)


            self.state = 336
            self.expr(0)
            self.state = 337
            self.match(SQLiteParser.AS)
            self.state = 338
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(SQLiteParser.BEGIN, 0)

        def TRANSACTION(self):
            return self.getToken(SQLiteParser.TRANSACTION, 0)

        def DEFERRED(self):
            return self.getToken(SQLiteParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(SQLiteParser.IMMEDIATE, 0)

        def EXCLUSIVE(self):
            return self.getToken(SQLiteParser.EXCLUSIVE, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_stmt" ):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_stmt" ):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(SQLiteParser.BEGIN)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & ((1 << (SQLiteParser.DEFERRED - 60)) | (1 << (SQLiteParser.EXCLUSIVE - 60)) | (1 << (SQLiteParser.IMMEDIATE - 60)))) != 0):
                self.state = 341
                _la = self._input.LA(1)
                if not(((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & ((1 << (SQLiteParser.DEFERRED - 60)) | (1 << (SQLiteParser.EXCLUSIVE - 60)) | (1 << (SQLiteParser.IMMEDIATE - 60)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION:
                self.state = 344
                self.match(SQLiteParser.TRANSACTION)
                self.state = 346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 345
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(SQLiteParser.COMMIT, 0)

        def END(self):
            return self.getToken(SQLiteParser.END, 0)

        def TRANSACTION(self):
            return self.getToken(SQLiteParser.TRANSACTION, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stmt" ):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stmt" ):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.COMMIT or _la==SQLiteParser.END):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION:
                self.state = 351
                self.match(SQLiteParser.TRANSACTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def TRANSACTION(self):
            return self.getToken(SQLiteParser.TRANSACTION, 0)

        def TO(self):
            return self.getToken(SQLiteParser.TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT(self):
            return self.getToken(SQLiteParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stmt" ):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stmt" ):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(SQLiteParser.ROLLBACK)
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION:
                self.state = 355
                self.match(SQLiteParser.TRANSACTION)


            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TO:
                self.state = 358
                self.match(SQLiteParser.TO)
                self.state = 360
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 359
                    self.match(SQLiteParser.SAVEPOINT)


                self.state = 362
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(SQLiteParser.SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_stmt" ):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_stmt" ):
                listener.exitSavepoint_stmt(self)




    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(SQLiteParser.SAVEPOINT)
            self.state = 366
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Release_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(SQLiteParser.RELEASE, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT(self):
            return self.getToken(SQLiteParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelease_stmt" ):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelease_stmt" ):
                listener.exitRelease_stmt(self)




    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(SQLiteParser.RELEASE)
            self.state = 370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 369
                self.match(SQLiteParser.SAVEPOINT)


            self.state = 372
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(SQLiteParser.INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def UNIQUE(self):
            return self.getToken(SQLiteParser.UNIQUE, 0)

        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = SQLiteParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(SQLiteParser.CREATE)
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.UNIQUE:
                self.state = 375
                self.match(SQLiteParser.UNIQUE)


            self.state = 378
            self.match(SQLiteParser.INDEX)
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 379
                self.match(SQLiteParser.IF)
                self.state = 380
                self.match(SQLiteParser.NOT)
                self.state = 381
                self.match(SQLiteParser.EXISTS)


            self.state = 387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 384
                self.schema_name()
                self.state = 385
                self.match(SQLiteParser.DOT)


            self.state = 389
            self.index_name()
            self.state = 390
            self.match(SQLiteParser.ON)
            self.state = 391
            self.table_name()
            self.state = 392
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 393
            self.indexed_column()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 394
                self.match(SQLiteParser.COMMA)
                self.state = 395
                self.indexed_column()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 401
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 402
                self.match(SQLiteParser.WHERE)
                self.state = 403
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = SQLiteParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 406
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 407
                self.expr(0)
                pass


            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COLLATE:
                self.state = 410
                self.match(SQLiteParser.COLLATE)
                self.state = 411
                self.collation_name()


            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                self.state = 414
                self.asc_desc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rowID = None # Token

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def TEMP(self):
            return self.getToken(SQLiteParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SQLiteParser.TEMPORARY, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_defContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_constraintContext,i)


        def WITHOUT(self):
            return self.getToken(SQLiteParser.WITHOUT, 0)

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = SQLiteParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(SQLiteParser.CREATE)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY:
                self.state = 418
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 421
            self.match(SQLiteParser.TABLE)
            self.state = 425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 422
                self.match(SQLiteParser.IF)
                self.state = 423
                self.match(SQLiteParser.NOT)
                self.state = 424
                self.match(SQLiteParser.EXISTS)


            self.state = 430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 427
                self.schema_name()
                self.state = 428
                self.match(SQLiteParser.DOT)


            self.state = 432
            self.table_name()
            self.state = 456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR]:
                self.state = 433
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 434
                self.column_def()
                self.state = 439
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 435
                        self.match(SQLiteParser.COMMA)
                        self.state = 436
                        self.column_def() 
                    self.state = 441
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 442
                    self.match(SQLiteParser.COMMA)
                    self.state = 443
                    self.table_constraint()
                    self.state = 448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 449
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WITHOUT:
                    self.state = 450
                    self.match(SQLiteParser.WITHOUT)
                    self.state = 451
                    localctx.rowID = self.match(SQLiteParser.IDENTIFIER)


                pass
            elif token in [SQLiteParser.AS]:
                self.state = 454
                self.match(SQLiteParser.AS)
                self.state = 455
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = SQLiteParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_column_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.column_name()
            self.state = 460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 459
                self.type_name()


            self.state = 465
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 462
                    self.column_constraint() 
                self.state = 467
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 468
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 471 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 473
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 474
                self.signed_number()
                self.state = 475
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 477
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 478
                self.signed_number()
                self.state = 479
                self.match(SQLiteParser.COMMA)
                self.state = 480
                self.signed_number()
                self.state = 481
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(SQLiteParser.CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def DEFAULT(self):
            return self.getToken(SQLiteParser.DEFAULT, 0)

        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def CONSTRAINT(self):
            return self.getToken(SQLiteParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def PRIMARY(self):
            return self.getToken(SQLiteParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(SQLiteParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(SQLiteParser.UNIQUE, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def GENERATED(self):
            return self.getToken(SQLiteParser.GENERATED, 0)

        def ALWAYS(self):
            return self.getToken(SQLiteParser.ALWAYS, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def STORED(self):
            return self.getToken(SQLiteParser.STORED, 0)

        def VIRTUAL(self):
            return self.getToken(SQLiteParser.VIRTUAL, 0)

        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = SQLiteParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.CONSTRAINT:
                self.state = 485
                self.match(SQLiteParser.CONSTRAINT)
                self.state = 486
                self.name()


            self.state = 536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.PRIMARY]:
                self.state = 489
                self.match(SQLiteParser.PRIMARY)
                self.state = 490
                self.match(SQLiteParser.KEY)
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                    self.state = 491
                    self.asc_desc()


                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON:
                    self.state = 494
                    self.conflict_clause()


                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AUTOINCREMENT:
                    self.state = 497
                    self.match(SQLiteParser.AUTOINCREMENT)


                pass
            elif token in [SQLiteParser.NOT, SQLiteParser.UNIQUE]:
                self.state = 503
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.NOT]:
                    self.state = 500
                    self.match(SQLiteParser.NOT)
                    self.state = 501
                    self.match(SQLiteParser.NULL_)
                    pass
                elif token in [SQLiteParser.UNIQUE]:
                    self.state = 502
                    self.match(SQLiteParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON:
                    self.state = 505
                    self.conflict_clause()


                pass
            elif token in [SQLiteParser.CHECK]:
                self.state = 508
                self.match(SQLiteParser.CHECK)
                self.state = 509
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 510
                self.expr(0)
                self.state = 511
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.DEFAULT]:
                self.state = 513
                self.match(SQLiteParser.DEFAULT)
                self.state = 520
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 514
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 515
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 516
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 517
                    self.expr(0)
                    self.state = 518
                    self.match(SQLiteParser.CLOSE_PAR)
                    pass


                pass
            elif token in [SQLiteParser.COLLATE]:
                self.state = 522
                self.match(SQLiteParser.COLLATE)
                self.state = 523
                self.collation_name()
                pass
            elif token in [SQLiteParser.REFERENCES]:
                self.state = 524
                self.foreign_key_clause()
                pass
            elif token in [SQLiteParser.AS, SQLiteParser.GENERATED]:
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.GENERATED:
                    self.state = 525
                    self.match(SQLiteParser.GENERATED)
                    self.state = 526
                    self.match(SQLiteParser.ALWAYS)


                self.state = 529
                self.match(SQLiteParser.AS)
                self.state = 530
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 531
                self.expr(0)
                self.state = 532
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.VIRTUAL or _la==SQLiteParser.STORED:
                    self.state = 533
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.VIRTUAL or _la==SQLiteParser.STORED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS:
                self.state = 538
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 541
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(SQLiteParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def CHECK(self):
            return self.getToken(SQLiteParser.CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def FOREIGN(self):
            return self.getToken(SQLiteParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(SQLiteParser.KEY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def PRIMARY(self):
            return self.getToken(SQLiteParser.PRIMARY, 0)

        def UNIQUE(self):
            return self.getToken(SQLiteParser.UNIQUE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = SQLiteParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.CONSTRAINT:
                self.state = 543
                self.match(SQLiteParser.CONSTRAINT)
                self.state = 544
                self.name()


            self.state = 584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.PRIMARY, SQLiteParser.UNIQUE]:
                self.state = 550
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.PRIMARY]:
                    self.state = 547
                    self.match(SQLiteParser.PRIMARY)
                    self.state = 548
                    self.match(SQLiteParser.KEY)
                    pass
                elif token in [SQLiteParser.UNIQUE]:
                    self.state = 549
                    self.match(SQLiteParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 552
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 553
                self.indexed_column()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 554
                    self.match(SQLiteParser.COMMA)
                    self.state = 555
                    self.indexed_column()
                    self.state = 560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 561
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON:
                    self.state = 562
                    self.conflict_clause()


                pass
            elif token in [SQLiteParser.CHECK]:
                self.state = 565
                self.match(SQLiteParser.CHECK)
                self.state = 566
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 567
                self.expr(0)
                self.state = 568
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.FOREIGN]:
                self.state = 570
                self.match(SQLiteParser.FOREIGN)
                self.state = 571
                self.match(SQLiteParser.KEY)
                self.state = 572
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 573
                self.column_name()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 574
                    self.match(SQLiteParser.COMMA)
                    self.state = 575
                    self.column_name()
                    self.state = 580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 581
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 582
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCES(self):
            return self.getToken(SQLiteParser.REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def DEFERRABLE(self):
            return self.getToken(SQLiteParser.DEFERRABLE, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ON)
            else:
                return self.getToken(SQLiteParser.ON, i)

        def MATCH(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.MATCH)
            else:
                return self.getToken(SQLiteParser.MATCH, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DELETE)
            else:
                return self.getToken(SQLiteParser.DELETE, i)

        def UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UPDATE)
            else:
                return self.getToken(SQLiteParser.UPDATE, i)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def INITIALLY(self):
            return self.getToken(SQLiteParser.INITIALLY, 0)

        def CASCADE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CASCADE)
            else:
                return self.getToken(SQLiteParser.CASCADE, i)

        def RESTRICT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.RESTRICT)
            else:
                return self.getToken(SQLiteParser.RESTRICT, i)

        def DEFERRED(self):
            return self.getToken(SQLiteParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(SQLiteParser.IMMEDIATE, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SET)
            else:
                return self.getToken(SQLiteParser.SET, i)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NO)
            else:
                return self.getToken(SQLiteParser.NO, i)

        def ACTION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ACTION)
            else:
                return self.getToken(SQLiteParser.ACTION, i)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NULL_)
            else:
                return self.getToken(SQLiteParser.NULL_, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DEFAULT)
            else:
                return self.getToken(SQLiteParser.DEFAULT, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = SQLiteParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(SQLiteParser.REFERENCES)
            self.state = 587
            self.foreign_table()
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 588
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 589
                self.column_name()
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 590
                    self.match(SQLiteParser.COMMA)
                    self.state = 591
                    self.column_name()
                    self.state = 596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 597
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.MATCH or _la==SQLiteParser.ON:
                self.state = 613
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.ON]:
                    self.state = 601
                    self.match(SQLiteParser.ON)
                    self.state = 602
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.DELETE or _la==SQLiteParser.UPDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 609
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SQLiteParser.SET]:
                        self.state = 603
                        self.match(SQLiteParser.SET)
                        self.state = 604
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.DEFAULT or _la==SQLiteParser.NULL_):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [SQLiteParser.CASCADE]:
                        self.state = 605
                        self.match(SQLiteParser.CASCADE)
                        pass
                    elif token in [SQLiteParser.RESTRICT]:
                        self.state = 606
                        self.match(SQLiteParser.RESTRICT)
                        pass
                    elif token in [SQLiteParser.NO]:
                        self.state = 607
                        self.match(SQLiteParser.NO)
                        self.state = 608
                        self.match(SQLiteParser.ACTION)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [SQLiteParser.MATCH]:
                    self.state = 611
                    self.match(SQLiteParser.MATCH)
                    self.state = 612
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.NOT:
                    self.state = 618
                    self.match(SQLiteParser.NOT)


                self.state = 621
                self.match(SQLiteParser.DEFERRABLE)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.INITIALLY:
                    self.state = 622
                    self.match(SQLiteParser.INITIALLY)
                    self.state = 623
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.DEFERRED or _la==SQLiteParser.IMMEDIATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def CONFLICT(self):
            return self.getToken(SQLiteParser.CONFLICT, 0)

        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = SQLiteParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(SQLiteParser.ON)
            self.state = 629
            self.match(SQLiteParser.CONFLICT)
            self.state = 630
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.ABORT or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (SQLiteParser.FAIL - 74)) | (1 << (SQLiteParser.IGNORE - 74)) | (1 << (SQLiteParser.REPLACE - 74)) | (1 << (SQLiteParser.ROLLBACK - 74)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_trigger_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(SQLiteParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def BEGIN(self):
            return self.getToken(SQLiteParser.BEGIN, 0)

        def END(self):
            return self.getToken(SQLiteParser.END, 0)

        def DELETE(self):
            return self.getToken(SQLiteParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(SQLiteParser.INSERT, 0)

        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def BEFORE(self):
            return self.getToken(SQLiteParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(SQLiteParser.AFTER, 0)

        def FOR(self):
            return self.getToken(SQLiteParser.FOR, 0)

        def EACH(self):
            return self.getToken(SQLiteParser.EACH, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def WHEN(self):
            return self.getToken(SQLiteParser.WHEN, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def TEMP(self):
            return self.getToken(SQLiteParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SQLiteParser.TEMPORARY, 0)

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def INSTEAD(self):
            return self.getToken(SQLiteParser.INSTEAD, 0)

        def OF(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OF)
            else:
                return self.getToken(SQLiteParser.OF, i)

        def update_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,i)


        def insert_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,i)


        def delete_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,i)


        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_trigger_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger_stmt" ):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger_stmt" ):
                listener.exitCreate_trigger_stmt(self)




    def create_trigger_stmt(self):

        localctx = SQLiteParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(SQLiteParser.CREATE)
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY:
                self.state = 633
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 636
            self.match(SQLiteParser.TRIGGER)
            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 637
                self.match(SQLiteParser.IF)
                self.state = 638
                self.match(SQLiteParser.NOT)
                self.state = 639
                self.match(SQLiteParser.EXISTS)


            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 642
                self.schema_name()
                self.state = 643
                self.match(SQLiteParser.DOT)


            self.state = 647
            self.trigger_name()
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.BEFORE]:
                self.state = 648
                self.match(SQLiteParser.BEFORE)
                pass
            elif token in [SQLiteParser.AFTER]:
                self.state = 649
                self.match(SQLiteParser.AFTER)
                pass
            elif token in [SQLiteParser.INSTEAD]:
                self.state = 650
                self.match(SQLiteParser.INSTEAD)
                self.state = 651
                self.match(SQLiteParser.OF)
                pass
            elif token in [SQLiteParser.DELETE, SQLiteParser.INSERT, SQLiteParser.UPDATE]:
                pass
            else:
                pass
            self.state = 668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.DELETE]:
                self.state = 654
                self.match(SQLiteParser.DELETE)
                pass
            elif token in [SQLiteParser.INSERT]:
                self.state = 655
                self.match(SQLiteParser.INSERT)
                pass
            elif token in [SQLiteParser.UPDATE]:
                self.state = 656
                self.match(SQLiteParser.UPDATE)
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OF:
                    self.state = 657
                    self.match(SQLiteParser.OF)
                    self.state = 658
                    self.column_name()
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 659
                        self.match(SQLiteParser.COMMA)
                        self.state = 660
                        self.column_name()
                        self.state = 665
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

            self.state = 670
            self.match(SQLiteParser.ON)
            self.state = 671
            self.table_name()
            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FOR:
                self.state = 672
                self.match(SQLiteParser.FOR)
                self.state = 673
                self.match(SQLiteParser.EACH)
                self.state = 674
                self.match(SQLiteParser.ROW)


            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHEN:
                self.state = 677
                self.match(SQLiteParser.WHEN)
                self.state = 678
                self.expr(0)


            self.state = 681
            self.match(SQLiteParser.BEGIN)
            self.state = 690 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 686
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 682
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 683
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 684
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 685
                    self.select_stmt()
                    pass


                self.state = 688
                self.match(SQLiteParser.SCOL)
                self.state = 692 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.DEFAULT or _la==SQLiteParser.DELETE or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SQLiteParser.INSERT - 90)) | (1 << (SQLiteParser.REPLACE - 90)) | (1 << (SQLiteParser.SELECT - 90)) | (1 << (SQLiteParser.UPDATE - 90)) | (1 << (SQLiteParser.VALUES - 90)) | (1 << (SQLiteParser.WITH - 90)))) != 0)):
                    break

            self.state = 694
            self.match(SQLiteParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_view_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(SQLiteParser.VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def TEMP(self):
            return self.getToken(SQLiteParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SQLiteParser.TEMPORARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_view_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view_stmt" ):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view_stmt" ):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = SQLiteParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(SQLiteParser.CREATE)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY:
                self.state = 697
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 700
            self.match(SQLiteParser.VIEW)
            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 701
                self.match(SQLiteParser.IF)
                self.state = 702
                self.match(SQLiteParser.NOT)
                self.state = 703
                self.match(SQLiteParser.EXISTS)


            self.state = 709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 706
                self.schema_name()
                self.state = 707
                self.match(SQLiteParser.DOT)


            self.state = 711
            self.view_name()
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 712
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 713
                self.column_name()
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 714
                    self.match(SQLiteParser.COMMA)
                    self.state = 715
                    self.column_name()
                    self.state = 720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 721
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 725
            self.match(SQLiteParser.AS)
            self.state = 726
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_virtual_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def VIRTUAL(self):
            return self.getToken(SQLiteParser.VIRTUAL, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def USING(self):
            return self.getToken(SQLiteParser.USING, 0)

        def module_name(self):
            return self.getTypedRuleContext(SQLiteParser.Module_nameContext,0)


        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def module_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Module_argumentContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_virtual_table_stmt" ):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_virtual_table_stmt" ):
                listener.exitCreate_virtual_table_stmt(self)




    def create_virtual_table_stmt(self):

        localctx = SQLiteParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(SQLiteParser.CREATE)
            self.state = 729
            self.match(SQLiteParser.VIRTUAL)
            self.state = 730
            self.match(SQLiteParser.TABLE)
            self.state = 734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 731
                self.match(SQLiteParser.IF)
                self.state = 732
                self.match(SQLiteParser.NOT)
                self.state = 733
                self.match(SQLiteParser.EXISTS)


            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 736
                self.schema_name()
                self.state = 737
                self.match(SQLiteParser.DOT)


            self.state = 741
            self.table_name()
            self.state = 742
            self.match(SQLiteParser.USING)
            self.state = 743
            self.module_name()
            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 744
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 745
                self.module_argument()
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 746
                    self.match(SQLiteParser.COMMA)
                    self.state = 747
                    self.module_argument()
                    self.state = 752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 753
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SQLiteParser.WITH, 0)

        def cte_table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS)
            else:
                return self.getToken(SQLiteParser.AS, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def RECURSIVE(self):
            return self.getToken(SQLiteParser.RECURSIVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(SQLiteParser.WITH)
            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 758
                self.match(SQLiteParser.RECURSIVE)


            self.state = 761
            self.cte_table_name()
            self.state = 762
            self.match(SQLiteParser.AS)
            self.state = 763
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 764
            self.select_stmt()
            self.state = 765
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 766
                self.match(SQLiteParser.COMMA)
                self.state = 767
                self.cte_table_name()
                self.state = 768
                self.match(SQLiteParser.AS)
                self.state = 769
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 770
                self.select_stmt()
                self.state = 771
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_cte_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_table_name" ):
                listener.enterCte_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_table_name" ):
                listener.exitCte_table_name(self)




    def cte_table_name(self):

        localctx = SQLiteParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_cte_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.table_name()
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 779
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 780
                self.column_name()
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 781
                    self.match(SQLiteParser.COMMA)
                    self.state = 782
                    self.column_name()
                    self.state = 787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 788
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cte_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def initial_select(self):
            return self.getTypedRuleContext(SQLiteParser.Initial_selectContext,0)


        def UNION(self):
            return self.getToken(SQLiteParser.UNION, 0)

        def recursive_select(self):
            return self.getTypedRuleContext(SQLiteParser.Recursive_selectContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ALL(self):
            return self.getToken(SQLiteParser.ALL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte" ):
                listener.enterRecursive_cte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte" ):
                listener.exitRecursive_cte(self)




    def recursive_cte(self):

        localctx = SQLiteParser.Recursive_cteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_recursive_cte)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.cte_table_name()
            self.state = 793
            self.match(SQLiteParser.AS)
            self.state = 794
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 795
            self.initial_select()
            self.state = 796
            self.match(SQLiteParser.UNION)
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ALL:
                self.state = 797
                self.match(SQLiteParser.ALL)


            self.state = 800
            self.recursive_select()
            self.state = 801
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.table_name()
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 804
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 805
                self.column_name()
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 806
                    self.match(SQLiteParser.COMMA)
                    self.state = 807
                    self.column_name()
                    self.state = 812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 813
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 817
            self.match(SQLiteParser.AS)
            self.state = 818
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 819
            self.select_stmt()
            self.state = 820
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SQLiteParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 822
                self.with_clause()


            self.state = 825
            self.match(SQLiteParser.DELETE)
            self.state = 826
            self.match(SQLiteParser.FROM)
            self.state = 827
            self.qualified_table_name()
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 828
                self.match(SQLiteParser.WHERE)
                self.state = 829
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SQLiteParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt_limited" ):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt_limited" ):
                listener.exitDelete_stmt_limited(self)




    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 832
                self.with_clause()


            self.state = 835
            self.match(SQLiteParser.DELETE)
            self.state = 836
            self.match(SQLiteParser.FROM)
            self.state = 837
            self.qualified_table_name()
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 838
                self.match(SQLiteParser.WHERE)
                self.state = 839
                self.expr(0)


            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT or _la==SQLiteParser.ORDER:
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER:
                    self.state = 842
                    self.order_by_stmt()


                self.state = 845
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Detach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETACH(self):
            return self.getToken(SQLiteParser.DETACH, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE(self):
            return self.getToken(SQLiteParser.DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetach_stmt" ):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetach_stmt" ):
                listener.exitDetach_stmt(self)




    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(SQLiteParser.DETACH)
            self.state = 850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 849
                self.match(SQLiteParser.DATABASE)


            self.state = 852
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.obj = None # Token

        def DROP(self):
            return self.getToken(SQLiteParser.DROP, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def INDEX(self):
            return self.getToken(SQLiteParser.INDEX, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def TRIGGER(self):
            return self.getToken(SQLiteParser.TRIGGER, 0)

        def VIEW(self):
            return self.getToken(SQLiteParser.VIEW, 0)

        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stmt" ):
                listener.enterDrop_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stmt" ):
                listener.exitDrop_stmt(self)




    def drop_stmt(self):

        localctx = SQLiteParser.Drop_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_drop_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(SQLiteParser.DROP)
            self.state = 855
            localctx.obj = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (SQLiteParser.INDEX - 86)) | (1 << (SQLiteParser.TABLE - 86)) | (1 << (SQLiteParser.TRIGGER - 86)) | (1 << (SQLiteParser.VIEW - 86)))) != 0)):
                localctx.obj = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 856
                self.match(SQLiteParser.IF)
                self.state = 857
                self.match(SQLiteParser.EXISTS)


            self.state = 863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 860
                self.schema_name()
                self.state = 861
                self.match(SQLiteParser.DOT)


            self.state = 865
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def TRIM(self):
            return self.getToken(SQLiteParser.TRIM, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def BOTH(self):
            return self.getToken(SQLiteParser.BOTH, 0)

        def TRAILING(self):
            return self.getToken(SQLiteParser.TRAILING, 0)

        def LEADING(self):
            return self.getToken(SQLiteParser.LEADING, 0)

        def EXTRACT(self):
            return self.getToken(SQLiteParser.EXTRACT, 0)

        def YEAR(self):
            return self.getToken(SQLiteParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(SQLiteParser.MONTH, 0)

        def DAY(self):
            return self.getToken(SQLiteParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SQLiteParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SQLiteParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SQLiteParser.SECOND, 0)

        def POSITION(self):
            return self.getToken(SQLiteParser.POSITION, 0)

        def IN(self):
            return self.getToken(SQLiteParser.IN, 0)

        def SUBSTRING(self):
            return self.getToken(SQLiteParser.SUBSTRING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def FOR(self):
            return self.getToken(SQLiteParser.FOR, 0)

        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext,0)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Over_clauseContext,0)


        def DISTINCT(self):
            return self.getToken(SQLiteParser.DISTINCT, 0)

        def CAST(self):
            return self.getToken(SQLiteParser.CAST, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def CASE(self):
            return self.getToken(SQLiteParser.CASE, 0)

        def END(self):
            return self.getToken(SQLiteParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHEN)
            else:
                return self.getToken(SQLiteParser.WHEN, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.THEN)
            else:
                return self.getToken(SQLiteParser.THEN, i)

        def ELSE(self):
            return self.getToken(SQLiteParser.ELSE, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext,0)


        def PIPE2(self):
            return self.getToken(SQLiteParser.PIPE2, 0)

        def DIV(self):
            return self.getToken(SQLiteParser.DIV, 0)

        def MOD(self):
            return self.getToken(SQLiteParser.MOD, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def LT2(self):
            return self.getToken(SQLiteParser.LT2, 0)

        def GT2(self):
            return self.getToken(SQLiteParser.GT2, 0)

        def AMP(self):
            return self.getToken(SQLiteParser.AMP, 0)

        def PIPE(self):
            return self.getToken(SQLiteParser.PIPE, 0)

        def LT(self):
            return self.getToken(SQLiteParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(SQLiteParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(SQLiteParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(SQLiteParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(SQLiteParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(SQLiteParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(SQLiteParser.NOT_EQ2, 0)

        def IS(self):
            return self.getToken(SQLiteParser.IS, 0)

        def LIKE(self):
            return self.getToken(SQLiteParser.LIKE, 0)

        def GLOB(self):
            return self.getToken(SQLiteParser.GLOB, 0)

        def MATCH(self):
            return self.getToken(SQLiteParser.MATCH, 0)

        def REGEXP(self):
            return self.getToken(SQLiteParser.REGEXP, 0)

        def AND(self):
            return self.getToken(SQLiteParser.AND, 0)

        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def BETWEEN(self):
            return self.getToken(SQLiteParser.BETWEEN, 0)

        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def ESCAPE(self):
            return self.getToken(SQLiteParser.ESCAPE, 0)

        def ISNULL(self):
            return self.getToken(SQLiteParser.ISNULL, 0)

        def NOTNULL(self):
            return self.getToken(SQLiteParser.NOTNULL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 868
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 869
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 878
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 873
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                    if la_ == 1:
                        self.state = 870
                        self.schema_name()
                        self.state = 871
                        self.match(SQLiteParser.DOT)


                    self.state = 875
                    self.table_name()
                    self.state = 876
                    self.match(SQLiteParser.DOT)


                self.state = 880
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 881
                self.unary_operator()
                self.state = 882
                self.expr(26)
                pass

            elif la_ == 5:
                self.state = 884
                self.match(SQLiteParser.TRIM)
                self.state = 885
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & ((1 << (SQLiteParser.BOTH - 187)) | (1 << (SQLiteParser.TRAILING - 187)) | (1 << (SQLiteParser.LEADING - 187)))) != 0):
                    self.state = 886
                    _la = self._input.LA(1)
                    if not(((((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & ((1 << (SQLiteParser.BOTH - 187)) | (1 << (SQLiteParser.TRAILING - 187)) | (1 << (SQLiteParser.LEADING - 187)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 889
                self.match(SQLiteParser.FROM)
                self.state = 890
                self.expr(0)
                self.state = 891
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 893
                self.match(SQLiteParser.EXTRACT)
                self.state = 894
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 895
                _la = self._input.LA(1)
                if not(((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (SQLiteParser.YEAR - 191)) | (1 << (SQLiteParser.MONTH - 191)) | (1 << (SQLiteParser.DAY - 191)) | (1 << (SQLiteParser.HOUR - 191)) | (1 << (SQLiteParser.MINUTE - 191)) | (1 << (SQLiteParser.SECOND - 191)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 896
                self.match(SQLiteParser.FROM)
                self.state = 897
                self.expr(0)
                self.state = 898
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 900
                self.match(SQLiteParser.POSITION)
                self.state = 901
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 902
                self.expr(0)
                self.state = 903
                self.match(SQLiteParser.IN)
                self.state = 904
                self.expr(0)
                self.state = 905
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 907
                _la = self._input.LA(1)
                if not(((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (SQLiteParser.YEAR - 191)) | (1 << (SQLiteParser.MONTH - 191)) | (1 << (SQLiteParser.DAY - 191)) | (1 << (SQLiteParser.HOUR - 191)) | (1 << (SQLiteParser.MINUTE - 191)) | (1 << (SQLiteParser.SECOND - 191)) | (1 << (SQLiteParser.SUBSTRING - 191)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 908
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 909
                self.expr(0)
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 910
                    self.match(SQLiteParser.COMMA)
                    self.state = 911
                    self.expr(0)
                    self.state = 916
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 917
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 919
                self.match(SQLiteParser.SUBSTRING)
                self.state = 920
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 921
                self.expr(0)
                self.state = 922
                self.match(SQLiteParser.FROM)
                self.state = 923
                self.expr(0)
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.FOR:
                    self.state = 924
                    self.match(SQLiteParser.FOR)
                    self.state = 925
                    self.expr(0)


                self.state = 928
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.state = 930
                self.function_name()
                self.state = 931
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 944
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.TRIM, SQLiteParser.EXTRACT, SQLiteParser.YEAR, SQLiteParser.MONTH, SQLiteParser.DAY, SQLiteParser.HOUR, SQLiteParser.MINUTE, SQLiteParser.SECOND, SQLiteParser.POSITION, SQLiteParser.SUBSTRING, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                    self.state = 933
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                    if la_ == 1:
                        self.state = 932
                        self.match(SQLiteParser.DISTINCT)


                    self.state = 935
                    self.expr(0)
                    self.state = 940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 936
                        self.match(SQLiteParser.COMMA)
                        self.state = 937
                        self.expr(0)
                        self.state = 942
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SQLiteParser.STAR]:
                    self.state = 943
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [SQLiteParser.CLOSE_PAR]:
                    pass
                else:
                    pass
                self.state = 946
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 948
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 947
                    self.filter_clause()


                self.state = 951
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 950
                    self.over_clause()


                pass

            elif la_ == 11:
                self.state = 953
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 954
                self.expr(0)
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 955
                    self.match(SQLiteParser.COMMA)
                    self.state = 956
                    self.expr(0)
                    self.state = 961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 962
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.state = 964
                self.match(SQLiteParser.CAST)
                self.state = 965
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 966
                self.expr(0)
                self.state = 967
                self.match(SQLiteParser.AS)
                self.state = 968
                self.type_name()
                self.state = 969
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.EXISTS or _la==SQLiteParser.NOT:
                    self.state = 972
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.NOT:
                        self.state = 971
                        self.match(SQLiteParser.NOT)


                    self.state = 974
                    self.match(SQLiteParser.EXISTS)


                self.state = 977
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 978
                self.select_stmt()
                self.state = 979
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.state = 981
                self.match(SQLiteParser.CASE)
                self.state = 983
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 982
                    self.expr(0)


                self.state = 990 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 985
                    self.match(SQLiteParser.WHEN)
                    self.state = 986
                    self.expr(0)
                    self.state = 987
                    self.match(SQLiteParser.THEN)
                    self.state = 988
                    self.expr(0)
                    self.state = 992 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLiteParser.WHEN):
                        break

                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ELSE:
                    self.state = 994
                    self.match(SQLiteParser.ELSE)
                    self.state = 995
                    self.expr(0)


                self.state = 998
                self.match(SQLiteParser.END)
                pass

            elif la_ == 15:
                self.state = 1000
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1122
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1120
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1003
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1004
                        self.match(SQLiteParser.PIPE2)
                        self.state = 1005
                        self.expr(26)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1006
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1007
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1008
                        self.expr(25)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1009
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1010
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1011
                        self.expr(24)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1012
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1013
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (1 << SQLiteParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1014
                        self.expr(23)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1015
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1016
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (1 << SQLiteParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1017
                        self.expr(22)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1018
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1031
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                        if la_ == 1:
                            self.state = 1019
                            self.match(SQLiteParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 1020
                            self.match(SQLiteParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 1021
                            self.match(SQLiteParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 1022
                            self.match(SQLiteParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 1023
                            self.match(SQLiteParser.IS)
                            pass

                        elif la_ == 6:
                            self.state = 1024
                            self.match(SQLiteParser.IS)
                            self.state = 1025
                            self.match(SQLiteParser.NOT)
                            pass

                        elif la_ == 7:
                            self.state = 1026
                            self.match(SQLiteParser.IN)
                            pass

                        elif la_ == 8:
                            self.state = 1027
                            self.match(SQLiteParser.LIKE)
                            pass

                        elif la_ == 9:
                            self.state = 1028
                            self.match(SQLiteParser.GLOB)
                            pass

                        elif la_ == 10:
                            self.state = 1029
                            self.match(SQLiteParser.MATCH)
                            pass

                        elif la_ == 11:
                            self.state = 1030
                            self.match(SQLiteParser.REGEXP)
                            pass


                        self.state = 1033
                        self.expr(21)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1034
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1035
                        self.match(SQLiteParser.AND)
                        self.state = 1036
                        self.expr(20)
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1037
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1038
                        self.match(SQLiteParser.OR)
                        self.state = 1039
                        self.expr(19)
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1040
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1041
                        self.match(SQLiteParser.IS)
                        self.state = 1043
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                        if la_ == 1:
                            self.state = 1042
                            self.match(SQLiteParser.NOT)


                        self.state = 1045
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1046
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1048
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT:
                            self.state = 1047
                            self.match(SQLiteParser.NOT)


                        self.state = 1050
                        self.match(SQLiteParser.BETWEEN)
                        self.state = 1051
                        self.expr(0)
                        self.state = 1052
                        self.match(SQLiteParser.AND)
                        self.state = 1053
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1055
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1056
                        self.match(SQLiteParser.COLLATE)
                        self.state = 1057
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1058
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1060
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT:
                            self.state = 1059
                            self.match(SQLiteParser.NOT)


                        self.state = 1062
                        _la = self._input.LA(1)
                        if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (SQLiteParser.GLOB - 79)) | (1 << (SQLiteParser.LIKE - 79)) | (1 << (SQLiteParser.MATCH - 79)) | (1 << (SQLiteParser.REGEXP - 79)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1063
                        self.expr(0)
                        self.state = 1066
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                        if la_ == 1:
                            self.state = 1064
                            self.match(SQLiteParser.ESCAPE)
                            self.state = 1065
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1068
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1073
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SQLiteParser.ISNULL]:
                            self.state = 1069
                            self.match(SQLiteParser.ISNULL)
                            pass
                        elif token in [SQLiteParser.NOTNULL]:
                            self.state = 1070
                            self.match(SQLiteParser.NOTNULL)
                            pass
                        elif token in [SQLiteParser.NOT]:
                            self.state = 1071
                            self.match(SQLiteParser.NOT)
                            self.state = 1072
                            self.match(SQLiteParser.NULL_)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1075
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1077
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT:
                            self.state = 1076
                            self.match(SQLiteParser.NOT)


                        self.state = 1079
                        self.match(SQLiteParser.IN)
                        self.state = 1118
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                        if la_ == 1:
                            self.state = 1080
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1090
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                            if la_ == 1:
                                self.state = 1081
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1082
                                self.expr(0)
                                self.state = 1087
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1083
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1084
                                    self.expr(0)
                                    self.state = 1089
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1092
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1096
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                            if la_ == 1:
                                self.state = 1093
                                self.schema_name()
                                self.state = 1094
                                self.match(SQLiteParser.DOT)


                            self.state = 1098
                            self.table_name()
                            pass

                        elif la_ == 3:
                            self.state = 1102
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                            if la_ == 1:
                                self.state = 1099
                                self.schema_name()
                                self.state = 1100
                                self.match(SQLiteParser.DOT)


                            self.state = 1104
                            self.table_function_name()
                            self.state = 1105
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1114
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.ABORT) | (1 << SQLiteParser.ACTION) | (1 << SQLiteParser.ADD) | (1 << SQLiteParser.AFTER) | (1 << SQLiteParser.ALL) | (1 << SQLiteParser.ALTER) | (1 << SQLiteParser.ANALYZE) | (1 << SQLiteParser.AND) | (1 << SQLiteParser.AS) | (1 << SQLiteParser.ASC) | (1 << SQLiteParser.ATTACH) | (1 << SQLiteParser.AUTOINCREMENT) | (1 << SQLiteParser.BEFORE) | (1 << SQLiteParser.BEGIN) | (1 << SQLiteParser.BETWEEN) | (1 << SQLiteParser.BY) | (1 << SQLiteParser.CASCADE) | (1 << SQLiteParser.CASE) | (1 << SQLiteParser.CAST) | (1 << SQLiteParser.CHECK) | (1 << SQLiteParser.COLLATE) | (1 << SQLiteParser.COLUMN) | (1 << SQLiteParser.COMMIT) | (1 << SQLiteParser.CONFLICT) | (1 << SQLiteParser.CONSTRAINT) | (1 << SQLiteParser.CREATE) | (1 << SQLiteParser.CROSS) | (1 << SQLiteParser.CURRENT_DATE) | (1 << SQLiteParser.CURRENT_TIME) | (1 << SQLiteParser.CURRENT_TIMESTAMP) | (1 << SQLiteParser.DATABASE) | (1 << SQLiteParser.DEFAULT) | (1 << SQLiteParser.DEFERRABLE) | (1 << SQLiteParser.DEFERRED) | (1 << SQLiteParser.DELETE) | (1 << SQLiteParser.DESC) | (1 << SQLiteParser.DETACH))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.DISTINCT - 64)) | (1 << (SQLiteParser.DROP - 64)) | (1 << (SQLiteParser.EACH - 64)) | (1 << (SQLiteParser.ELSE - 64)) | (1 << (SQLiteParser.END - 64)) | (1 << (SQLiteParser.ESCAPE - 64)) | (1 << (SQLiteParser.EXCEPT - 64)) | (1 << (SQLiteParser.EXCLUSIVE - 64)) | (1 << (SQLiteParser.EXISTS - 64)) | (1 << (SQLiteParser.EXPLAIN - 64)) | (1 << (SQLiteParser.FAIL - 64)) | (1 << (SQLiteParser.FOR - 64)) | (1 << (SQLiteParser.FOREIGN - 64)) | (1 << (SQLiteParser.FROM - 64)) | (1 << (SQLiteParser.FULL - 64)) | (1 << (SQLiteParser.GLOB - 64)) | (1 << (SQLiteParser.GROUP - 64)) | (1 << (SQLiteParser.HAVING - 64)) | (1 << (SQLiteParser.IF - 64)) | (1 << (SQLiteParser.IGNORE - 64)) | (1 << (SQLiteParser.IMMEDIATE - 64)) | (1 << (SQLiteParser.IN - 64)) | (1 << (SQLiteParser.INDEX - 64)) | (1 << (SQLiteParser.INDEXED - 64)) | (1 << (SQLiteParser.INITIALLY - 64)) | (1 << (SQLiteParser.INNER - 64)) | (1 << (SQLiteParser.INSERT - 64)) | (1 << (SQLiteParser.INSTEAD - 64)) | (1 << (SQLiteParser.INTERSECT - 64)) | (1 << (SQLiteParser.INTO - 64)) | (1 << (SQLiteParser.IS - 64)) | (1 << (SQLiteParser.ISNULL - 64)) | (1 << (SQLiteParser.JOIN - 64)) | (1 << (SQLiteParser.KEY - 64)) | (1 << (SQLiteParser.LEFT - 64)) | (1 << (SQLiteParser.LIKE - 64)) | (1 << (SQLiteParser.LIMIT - 64)) | (1 << (SQLiteParser.MATCH - 64)) | (1 << (SQLiteParser.NATURAL - 64)) | (1 << (SQLiteParser.NO - 64)) | (1 << (SQLiteParser.NOT - 64)) | (1 << (SQLiteParser.NOTNULL - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF - 64)) | (1 << (SQLiteParser.OFFSET - 64)) | (1 << (SQLiteParser.ON - 64)) | (1 << (SQLiteParser.OR - 64)) | (1 << (SQLiteParser.ORDER - 64)) | (1 << (SQLiteParser.OUTER - 64)) | (1 << (SQLiteParser.PLAN - 64)) | (1 << (SQLiteParser.PRAGMA - 64)) | (1 << (SQLiteParser.PRIMARY - 64)) | (1 << (SQLiteParser.QUERY - 64)) | (1 << (SQLiteParser.RAISE - 64)) | (1 << (SQLiteParser.RECURSIVE - 64)) | (1 << (SQLiteParser.REFERENCES - 64)) | (1 << (SQLiteParser.REGEXP - 64)) | (1 << (SQLiteParser.REINDEX - 64)) | (1 << (SQLiteParser.RELEASE - 64)) | (1 << (SQLiteParser.RENAME - 64)) | (1 << (SQLiteParser.REPLACE - 64)) | (1 << (SQLiteParser.RESTRICT - 64)) | (1 << (SQLiteParser.RIGHT - 64)) | (1 << (SQLiteParser.ROLLBACK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.ROW - 128)) | (1 << (SQLiteParser.ROWS - 128)) | (1 << (SQLiteParser.SAVEPOINT - 128)) | (1 << (SQLiteParser.SELECT - 128)) | (1 << (SQLiteParser.SET - 128)) | (1 << (SQLiteParser.TABLE - 128)) | (1 << (SQLiteParser.TEMP - 128)) | (1 << (SQLiteParser.TEMPORARY - 128)) | (1 << (SQLiteParser.THEN - 128)) | (1 << (SQLiteParser.TO - 128)) | (1 << (SQLiteParser.TRANSACTION - 128)) | (1 << (SQLiteParser.TRIGGER - 128)) | (1 << (SQLiteParser.UNION - 128)) | (1 << (SQLiteParser.UNIQUE - 128)) | (1 << (SQLiteParser.UPDATE - 128)) | (1 << (SQLiteParser.USING - 128)) | (1 << (SQLiteParser.VACUUM - 128)) | (1 << (SQLiteParser.VALUES - 128)) | (1 << (SQLiteParser.VIEW - 128)) | (1 << (SQLiteParser.VIRTUAL - 128)) | (1 << (SQLiteParser.WHEN - 128)) | (1 << (SQLiteParser.WHERE - 128)) | (1 << (SQLiteParser.WITH - 128)) | (1 << (SQLiteParser.WITHOUT - 128)) | (1 << (SQLiteParser.FIRST_VALUE - 128)) | (1 << (SQLiteParser.OVER - 128)) | (1 << (SQLiteParser.PARTITION - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.PRECEDING - 128)) | (1 << (SQLiteParser.UNBOUNDED - 128)) | (1 << (SQLiteParser.CURRENT - 128)) | (1 << (SQLiteParser.FOLLOWING - 128)) | (1 << (SQLiteParser.CUME_DIST - 128)) | (1 << (SQLiteParser.DENSE_RANK - 128)) | (1 << (SQLiteParser.LAG - 128)) | (1 << (SQLiteParser.LAST_VALUE - 128)) | (1 << (SQLiteParser.LEAD - 128)) | (1 << (SQLiteParser.NTH_VALUE - 128)) | (1 << (SQLiteParser.NTILE - 128)) | (1 << (SQLiteParser.PERCENT_RANK - 128)) | (1 << (SQLiteParser.RANK - 128)) | (1 << (SQLiteParser.ROW_NUMBER - 128)) | (1 << (SQLiteParser.GENERATED - 128)) | (1 << (SQLiteParser.ALWAYS - 128)) | (1 << (SQLiteParser.STORED - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW - 128)) | (1 << (SQLiteParser.NULLS - 128)) | (1 << (SQLiteParser.FIRST - 128)) | (1 << (SQLiteParser.LAST - 128)) | (1 << (SQLiteParser.FILTER - 128)) | (1 << (SQLiteParser.GROUPS - 128)) | (1 << (SQLiteParser.EXCLUDE - 128)) | (1 << (SQLiteParser.TRIM - 128)) | (1 << (SQLiteParser.EXTRACT - 128)) | (1 << (SQLiteParser.YEAR - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SQLiteParser.MONTH - 192)) | (1 << (SQLiteParser.DAY - 192)) | (1 << (SQLiteParser.HOUR - 192)) | (1 << (SQLiteParser.MINUTE - 192)) | (1 << (SQLiteParser.SECOND - 192)) | (1 << (SQLiteParser.POSITION - 192)) | (1 << (SQLiteParser.SUBSTRING - 192)) | (1 << (SQLiteParser.IDENTIFIER - 192)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 192)) | (1 << (SQLiteParser.BIND_PARAMETER - 192)) | (1 << (SQLiteParser.STRING_LITERAL - 192)) | (1 << (SQLiteParser.BLOB_LITERAL - 192)))) != 0):
                                self.state = 1106
                                self.expr(0)
                                self.state = 1111
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1107
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1108
                                    self.expr(0)
                                    self.state = 1113
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1116
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass


                        pass

             
                self.state = 1124
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Raise_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(SQLiteParser.RAISE, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext,0)


        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_function" ):
                listener.enterRaise_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_function" ):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(SQLiteParser.RAISE)
            self.state = 1126
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1131
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IGNORE]:
                self.state = 1127
                self.match(SQLiteParser.IGNORE)
                pass
            elif token in [SQLiteParser.ABORT, SQLiteParser.FAIL, SQLiteParser.ROLLBACK]:
                self.state = 1128
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT or _la==SQLiteParser.FAIL or _la==SQLiteParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1129
                self.match(SQLiteParser.COMMA)
                self.state = 1130
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1133
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def CURRENT_TIME(self):
            return self.getToken(SQLiteParser.CURRENT_TIME, 0)

        def CURRENT_DATE(self):
            return self.getToken(SQLiteParser.CURRENT_DATE, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            _la = self._input.LA(1)
            if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & ((1 << (SQLiteParser.CURRENT_DATE - 54)) | (1 << (SQLiteParser.CURRENT_TIME - 54)) | (1 << (SQLiteParser.CURRENT_TIMESTAMP - 54)) | (1 << (SQLiteParser.NULL_ - 54)))) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & ((1 << (SQLiteParser.TRUE_ - 173)) | (1 << (SQLiteParser.FALSE_ - 173)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 173)) | (1 << (SQLiteParser.STRING_LITERAL - 173)) | (1 << (SQLiteParser.BLOB_LITERAL - 173)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(SQLiteParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def INSERT(self):
            return self.getToken(SQLiteParser.INSERT, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def upsert_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Upsert_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def VALUES(self):
            return self.getToken(SQLiteParser.VALUES, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def DEFAULT(self):
            return self.getToken(SQLiteParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.INSERT, SQLiteParser.REPLACE, SQLiteParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WITH:
                    self.state = 1137
                    self.with_clause()


                self.state = 1145
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1140
                    self.match(SQLiteParser.INSERT)
                    pass

                elif la_ == 2:
                    self.state = 1141
                    self.match(SQLiteParser.REPLACE)
                    pass

                elif la_ == 3:
                    self.state = 1142
                    self.match(SQLiteParser.INSERT)
                    self.state = 1143
                    self.match(SQLiteParser.OR)
                    self.state = 1144
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.ABORT or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (SQLiteParser.FAIL - 74)) | (1 << (SQLiteParser.IGNORE - 74)) | (1 << (SQLiteParser.REPLACE - 74)) | (1 << (SQLiteParser.ROLLBACK - 74)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                self.state = 1147
                self.match(SQLiteParser.INTO)
                self.state = 1151
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1148
                    self.schema_name()
                    self.state = 1149
                    self.match(SQLiteParser.DOT)


                self.state = 1153
                self.table_name()
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AS:
                    self.state = 1154
                    self.match(SQLiteParser.AS)
                    self.state = 1155
                    self.table_alias()


                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR:
                    self.state = 1158
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1159
                    self.column_name()
                    self.state = 1164
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1160
                        self.match(SQLiteParser.COMMA)
                        self.state = 1161
                        self.column_name()
                        self.state = 1166
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1167
                    self.match(SQLiteParser.CLOSE_PAR)


                self.state = 1200
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1171
                    self.match(SQLiteParser.VALUES)
                    self.state = 1172
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1173
                    self.expr(0)
                    self.state = 1178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1174
                        self.match(SQLiteParser.COMMA)
                        self.state = 1175
                        self.expr(0)
                        self.state = 1180
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1181
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1182
                        self.match(SQLiteParser.COMMA)
                        self.state = 1183
                        self.match(SQLiteParser.OPEN_PAR)
                        self.state = 1184
                        self.expr(0)
                        self.state = 1189
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1185
                            self.match(SQLiteParser.COMMA)
                            self.state = 1186
                            self.expr(0)
                            self.state = 1191
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1192
                        self.match(SQLiteParser.CLOSE_PAR)
                        self.state = 1198
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1199
                    self.select_stmt()
                    pass


                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON:
                    self.state = 1202
                    self.upsert_clause()


                pass
            elif token in [SQLiteParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1205
                self.match(SQLiteParser.DEFAULT)
                self.state = 1206
                self.match(SQLiteParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upsert_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def CONFLICT(self):
            return self.getToken(SQLiteParser.CONFLICT, 0)

        def DO(self):
            return self.getToken(SQLiteParser.DO, 0)

        def NOTHING(self):
            return self.getToken(SQLiteParser.NOTHING, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SQLiteParser.SET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHERE)
            else:
                return self.getToken(SQLiteParser.WHERE, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.EQ)
            else:
                return self.getToken(SQLiteParser.EQ, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_upsert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpsert_clause" ):
                listener.enterUpsert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpsert_clause" ):
                listener.exitUpsert_clause(self)




    def upsert_clause(self):

        localctx = SQLiteParser.Upsert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_upsert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1209
            self.match(SQLiteParser.ON)
            self.state = 1210
            self.match(SQLiteParser.CONFLICT)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 1211
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1212
                self.indexed_column()
                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1213
                    self.match(SQLiteParser.COMMA)
                    self.state = 1214
                    self.indexed_column()
                    self.state = 1219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1220
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE:
                    self.state = 1221
                    self.match(SQLiteParser.WHERE)
                    self.state = 1222
                    self.expr(0)




            self.state = 1227
            self.match(SQLiteParser.DO)
            self.state = 1254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.NOTHING]:
                self.state = 1228
                self.match(SQLiteParser.NOTHING)
                pass
            elif token in [SQLiteParser.UPDATE]:
                self.state = 1229
                self.match(SQLiteParser.UPDATE)
                self.state = 1230
                self.match(SQLiteParser.SET)

                self.state = 1233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                if la_ == 1:
                    self.state = 1231
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1232
                    self.column_name_list()
                    pass


                self.state = 1235
                self.match(SQLiteParser.EQ)
                self.state = 1236
                self.expr(0)
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1237
                    self.match(SQLiteParser.COMMA)
                    self.state = 1240
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1238
                        self.column_name()
                        pass

                    elif la_ == 2:
                        self.state = 1239
                        self.column_name_list()
                        pass


                    self.state = 1242
                    self.match(SQLiteParser.EQ)
                    self.state = 1243
                    self.expr(0)
                    self.state = 1249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE:
                    self.state = 1250
                    self.match(SQLiteParser.WHERE)
                    self.state = 1251
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(SQLiteParser.PRAGMA, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_stmt" ):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_stmt" ):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.match(SQLiteParser.PRAGMA)
            self.state = 1260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1257
                self.schema_name()
                self.state = 1258
                self.match(SQLiteParser.DOT)


            self.state = 1262
            self.pragma_name()
            self.state = 1269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ASSIGN]:
                self.state = 1263
                self.match(SQLiteParser.ASSIGN)
                self.state = 1264
                self.pragma_value()
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.state = 1265
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1266
                self.pragma_value()
                self.state = 1267
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.ATTACH, SQLiteParser.BEGIN, SQLiteParser.COMMIT, SQLiteParser.CREATE, SQLiteParser.DEFAULT, SQLiteParser.DELETE, SQLiteParser.DETACH, SQLiteParser.DROP, SQLiteParser.END, SQLiteParser.EXPLAIN, SQLiteParser.INSERT, SQLiteParser.PRAGMA, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.REPLACE, SQLiteParser.ROLLBACK, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.UPDATE, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_value" ):
                listener.enterPragma_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_value" ):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pragma_value)
        try:
            self.state = 1274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1271
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1272
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1273
                self.match(SQLiteParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REINDEX(self):
            return self.getToken(SQLiteParser.REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)




    def reindex_stmt(self):

        localctx = SQLiteParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.match(SQLiteParser.REINDEX)
            self.state = 1287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1277
                self.collation_name()

            elif la_ == 2:
                self.state = 1281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1278
                    self.schema_name()
                    self.state = 1279
                    self.match(SQLiteParser.DOT)


                self.state = 1285
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1283
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 1284
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1289
                self.common_table_stmt()


            self.state = 1292
            self.select_core()
            self.state = 1298
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1293
                    self.compound_operator()
                    self.state = 1294
                    self.select_core() 
                self.state = 1300
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER:
                self.state = 1301
                self.order_by_stmt()


            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT:
                self.state = 1304
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_raw_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_join_raw_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_raw_clause" ):
                listener.enterJoin_raw_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_raw_clause" ):
                listener.exitJoin_raw_clause(self)




    def join_raw_clause(self):

        localctx = SQLiteParser.Join_raw_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_join_raw_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.table_or_subquery()
            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA or _la==SQLiteParser.CROSS or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (SQLiteParser.INNER - 89)) | (1 << (SQLiteParser.JOIN - 89)) | (1 << (SQLiteParser.LEFT - 89)) | (1 << (SQLiteParser.NATURAL - 89)) | (1 << (SQLiteParser.RIGHT - 89)))) != 0):
                self.state = 1308
                self.join_operator()
                self.state = 1309
                self.table_or_subquery()
                self.state = 1311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                if la_ == 1:
                    self.state = 1310
                    self.join_constraint()


                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SQLiteParser.LBRACE, 0)

        def OJ(self):
            return self.getToken(SQLiteParser.OJ, 0)

        def join_raw_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_raw_clauseContext,0)


        def RBRACE(self):
            return self.getToken(SQLiteParser.RBRACE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_join_clause)
        try:
            self.state = 1324
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1318
                self.match(SQLiteParser.LBRACE)
                self.state = 1319
                self.match(SQLiteParser.OJ)
                self.state = 1320
                self.join_raw_clause()
                self.state = 1321
                self.match(SQLiteParser.RBRACE)
                pass
            elif token in [SQLiteParser.OPEN_PAR, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.IDENTIFIER, SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1323
                self.join_raw_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SQLiteParser.SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def GROUP(self):
            return self.getToken(SQLiteParser.GROUP, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def WINDOW(self):
            return self.getToken(SQLiteParser.WINDOW, 0)

        def window_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_nameContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS)
            else:
                return self.getToken(SQLiteParser.AS, i)

        def window_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_defnContext,i)


        def DISTINCT(self):
            return self.getToken(SQLiteParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SQLiteParser.ALL, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def HAVING(self):
            return self.getToken(SQLiteParser.HAVING, 0)

        def VALUES(self):
            return self.getToken(SQLiteParser.VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1326
                self.match(SQLiteParser.SELECT)
                self.state = 1328
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1327
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.ALL or _la==SQLiteParser.DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1330
                self.result_column()
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1331
                    self.match(SQLiteParser.COMMA)
                    self.state = 1332
                    self.result_column()
                    self.state = 1337
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.FROM:
                    self.state = 1338
                    self.match(SQLiteParser.FROM)
                    self.state = 1348
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                    if la_ == 1:
                        self.state = 1339
                        self.table_or_subquery()
                        self.state = 1344
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1340
                            self.match(SQLiteParser.COMMA)
                            self.state = 1341
                            self.table_or_subquery()
                            self.state = 1346
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1347
                        self.join_clause()
                        pass




                self.state = 1354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE:
                    self.state = 1352
                    self.match(SQLiteParser.WHERE)
                    self.state = 1353
                    self.expr(0)


                self.state = 1370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.GROUP:
                    self.state = 1356
                    self.match(SQLiteParser.GROUP)
                    self.state = 1357
                    self.match(SQLiteParser.BY)
                    self.state = 1358
                    self.expr(0)
                    self.state = 1363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1359
                        self.match(SQLiteParser.COMMA)
                        self.state = 1360
                        self.expr(0)
                        self.state = 1365
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1368
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.HAVING:
                        self.state = 1366
                        self.match(SQLiteParser.HAVING)
                        self.state = 1367
                        self.expr(0)




                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WINDOW:
                    self.state = 1372
                    self.match(SQLiteParser.WINDOW)
                    self.state = 1373
                    self.window_name()
                    self.state = 1374
                    self.match(SQLiteParser.AS)
                    self.state = 1375
                    self.window_defn()
                    self.state = 1383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1376
                        self.match(SQLiteParser.COMMA)
                        self.state = 1377
                        self.window_name()
                        self.state = 1378
                        self.match(SQLiteParser.AS)
                        self.state = 1379
                        self.window_defn()
                        self.state = 1385
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [SQLiteParser.VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1388
                self.match(SQLiteParser.VALUES)
                self.state = 1389
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1390
                self.expr(0)
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1391
                    self.match(SQLiteParser.COMMA)
                    self.state = 1392
                    self.expr(0)
                    self.state = 1397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1398
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1399
                    self.match(SQLiteParser.COMMA)
                    self.state = 1400
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1401
                    self.expr(0)
                    self.state = 1406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1402
                        self.match(SQLiteParser.COMMA)
                        self.state = 1403
                        self.expr(0)
                        self.state = 1408
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1409
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_factored_select_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1418
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext,0)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1420
                self.common_table_stmt()


            self.state = 1423
            self.select_core()
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER:
                self.state = 1424
                self.order_by_stmt()


            self.state = 1428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT:
                self.state = 1427
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def INTERSECT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.INTERSECT)
            else:
                return self.getToken(SQLiteParser.INTERSECT, i)

        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.EXCEPT)
            else:
                return self.getToken(SQLiteParser.EXCEPT, i)

        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UNION)
            else:
                return self.getToken(SQLiteParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ALL)
            else:
                return self.getToken(SQLiteParser.ALL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1430
                self.common_table_stmt()


            self.state = 1433
            self.select_core()
            self.state = 1443 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1440
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.UNION]:
                    self.state = 1434
                    self.match(SQLiteParser.UNION)
                    self.state = 1436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.ALL:
                        self.state = 1435
                        self.match(SQLiteParser.ALL)


                    pass
                elif token in [SQLiteParser.INTERSECT]:
                    self.state = 1438
                    self.match(SQLiteParser.INTERSECT)
                    pass
                elif token in [SQLiteParser.EXCEPT]:
                    self.state = 1439
                    self.match(SQLiteParser.EXCEPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1442
                self.select_core()
                self.state = 1445 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.EXCEPT or _la==SQLiteParser.INTERSECT or _la==SQLiteParser.UNION):
                    break

            self.state = 1448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER:
                self.state = 1447
                self.order_by_stmt()


            self.state = 1451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT:
                self.state = 1450
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def INDEXED(self):
            return self.getToken(SQLiteParser.INDEXED, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1453
                    self.schema_name()
                    self.state = 1454
                    self.match(SQLiteParser.DOT)


                self.state = 1458
                self.table_name()
                self.state = 1463
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1460
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                    if la_ == 1:
                        self.state = 1459
                        self.match(SQLiteParser.AS)


                    self.state = 1462
                    self.table_alias()


                self.state = 1470
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.INDEXED]:
                    self.state = 1465
                    self.match(SQLiteParser.INDEXED)
                    self.state = 1466
                    self.match(SQLiteParser.BY)
                    self.state = 1467
                    self.index_name()
                    pass
                elif token in [SQLiteParser.NOT]:
                    self.state = 1468
                    self.match(SQLiteParser.NOT)
                    self.state = 1469
                    self.match(SQLiteParser.INDEXED)
                    pass
                elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA, SQLiteParser.RBRACE, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.ATTACH, SQLiteParser.BEGIN, SQLiteParser.COMMIT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.DEFAULT, SQLiteParser.DELETE, SQLiteParser.DETACH, SQLiteParser.DROP, SQLiteParser.END, SQLiteParser.EXCEPT, SQLiteParser.EXPLAIN, SQLiteParser.GROUP, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INTERSECT, SQLiteParser.JOIN, SQLiteParser.LEFT, SQLiteParser.LIMIT, SQLiteParser.NATURAL, SQLiteParser.ON, SQLiteParser.ORDER, SQLiteParser.PRAGMA, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.REPLACE, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.UNION, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WINDOW, SQLiteParser.UNEXPECTED_CHAR]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1475
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1472
                    self.schema_name()
                    self.state = 1473
                    self.match(SQLiteParser.DOT)


                self.state = 1477
                self.table_function_name()
                self.state = 1478
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1479
                self.expr(0)
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1480
                    self.match(SQLiteParser.COMMA)
                    self.state = 1481
                    self.expr(0)
                    self.state = 1486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1487
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1489
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                    if la_ == 1:
                        self.state = 1488
                        self.match(SQLiteParser.AS)


                    self.state = 1491
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1494
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1504
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                if la_ == 1:
                    self.state = 1495
                    self.table_or_subquery()
                    self.state = 1500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1496
                        self.match(SQLiteParser.COMMA)
                        self.state = 1497
                        self.table_or_subquery()
                        self.state = 1502
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1503
                    self.join_clause()
                    pass


                self.state = 1506
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1508
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1509
                self.select_stmt()
                self.state = 1510
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1512
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                    if la_ == 1:
                        self.state = 1511
                        self.match(SQLiteParser.AS)


                    self.state = 1514
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1519
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1520
                self.table_name()
                self.state = 1521
                self.match(SQLiteParser.DOT)
                self.state = 1522
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1524
                self.expr(0)
                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AS or _la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL:
                    self.state = 1526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.AS:
                        self.state = 1525
                        self.match(SQLiteParser.AS)


                    self.state = 1528
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def JOIN(self):
            return self.getToken(SQLiteParser.JOIN, 0)

        def NATURAL(self):
            return self.getToken(SQLiteParser.NATURAL, 0)

        def INNER(self):
            return self.getToken(SQLiteParser.INNER, 0)

        def CROSS(self):
            return self.getToken(SQLiteParser.CROSS, 0)

        def RIGHT(self):
            return self.getToken(SQLiteParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(SQLiteParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SQLiteParser.OUTER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1533
                self.match(SQLiteParser.COMMA)
                pass
            elif token in [SQLiteParser.CROSS, SQLiteParser.INNER, SQLiteParser.JOIN, SQLiteParser.LEFT, SQLiteParser.NATURAL, SQLiteParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.NATURAL:
                    self.state = 1534
                    self.match(SQLiteParser.NATURAL)


                self.state = 1547
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.RIGHT]:
                    self.state = 1537
                    self.match(SQLiteParser.RIGHT)
                    self.state = 1539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.OUTER:
                        self.state = 1538
                        self.match(SQLiteParser.OUTER)


                    pass
                elif token in [SQLiteParser.LEFT]:
                    self.state = 1541
                    self.match(SQLiteParser.LEFT)
                    self.state = 1543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.OUTER:
                        self.state = 1542
                        self.match(SQLiteParser.OUTER)


                    pass
                elif token in [SQLiteParser.INNER]:
                    self.state = 1545
                    self.match(SQLiteParser.INNER)
                    pass
                elif token in [SQLiteParser.CROSS]:
                    self.state = 1546
                    self.match(SQLiteParser.CROSS)
                    pass
                elif token in [SQLiteParser.JOIN]:
                    pass
                else:
                    pass
                self.state = 1549
                self.match(SQLiteParser.JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def USING(self):
            return self.getToken(SQLiteParser.USING, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.state = 1566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1552
                self.match(SQLiteParser.ON)
                self.state = 1553
                self.expr(0)
                pass
            elif token in [SQLiteParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1554
                self.match(SQLiteParser.USING)
                self.state = 1555
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1556
                self.column_name()
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1557
                    self.match(SQLiteParser.COMMA)
                    self.state = 1558
                    self.column_name()
                    self.state = 1563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1564
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(SQLiteParser.UNION, 0)

        def ALL(self):
            return self.getToken(SQLiteParser.ALL, 0)

        def INTERSECT(self):
            return self.getToken(SQLiteParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(SQLiteParser.EXCEPT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_compound_operator)
        self._la = 0 # Token type
        try:
            self.state = 1574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.UNION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1568
                self.match(SQLiteParser.UNION)
                self.state = 1570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ALL:
                    self.state = 1569
                    self.match(SQLiteParser.ALL)


                pass
            elif token in [SQLiteParser.INTERSECT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1572
                self.match(SQLiteParser.INTERSECT)
                pass
            elif token in [SQLiteParser.EXCEPT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1573
                self.match(SQLiteParser.EXCEPT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET(self):
            return self.getToken(SQLiteParser.SET, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1576
                self.with_clause()


            self.state = 1579
            self.match(SQLiteParser.UPDATE)
            self.state = 1582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1580
                self.match(SQLiteParser.OR)
                self.state = 1581
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (SQLiteParser.FAIL - 74)) | (1 << (SQLiteParser.IGNORE - 74)) | (1 << (SQLiteParser.REPLACE - 74)) | (1 << (SQLiteParser.ROLLBACK - 74)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1584
            self.qualified_table_name()
            self.state = 1585
            self.match(SQLiteParser.SET)
            self.state = 1588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.state = 1586
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1587
                self.column_name_list()
                pass


            self.state = 1590
            self.match(SQLiteParser.ASSIGN)
            self.state = 1591
            self.expr(0)
            self.state = 1602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1592
                self.match(SQLiteParser.COMMA)
                self.state = 1595
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1593
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1594
                    self.column_name_list()
                    pass


                self.state = 1597
                self.match(SQLiteParser.ASSIGN)
                self.state = 1598
                self.expr(0)
                self.state = 1604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 1605
                self.match(SQLiteParser.WHERE)
                self.state = 1606
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)




    def column_name_list(self):

        localctx = SQLiteParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1609
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1610
            self.column_name()
            self.state = 1615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1611
                self.match(SQLiteParser.COMMA)
                self.state = 1612
                self.column_name()
                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1618
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET(self):
            return self.getToken(SQLiteParser.SET, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)




    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1620
                self.with_clause()


            self.state = 1623
            self.match(SQLiteParser.UPDATE)
            self.state = 1626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 1624
                self.match(SQLiteParser.OR)
                self.state = 1625
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (SQLiteParser.FAIL - 74)) | (1 << (SQLiteParser.IGNORE - 74)) | (1 << (SQLiteParser.REPLACE - 74)) | (1 << (SQLiteParser.ROLLBACK - 74)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1628
            self.qualified_table_name()
            self.state = 1629
            self.match(SQLiteParser.SET)
            self.state = 1632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 1630
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1631
                self.column_name_list()
                pass


            self.state = 1634
            self.match(SQLiteParser.ASSIGN)
            self.state = 1635
            self.expr(0)
            self.state = 1646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1636
                self.match(SQLiteParser.COMMA)
                self.state = 1639
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 1637
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1638
                    self.column_name_list()
                    pass


                self.state = 1641
                self.match(SQLiteParser.ASSIGN)
                self.state = 1642
                self.expr(0)
                self.state = 1648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 1649
                self.match(SQLiteParser.WHERE)
                self.state = 1650
                self.expr(0)


            self.state = 1657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT or _la==SQLiteParser.ORDER:
                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER:
                    self.state = 1653
                    self.order_by_stmt()


                self.state = 1656
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def alias(self):
            return self.getTypedRuleContext(SQLiteParser.AliasContext,0)


        def INDEXED(self):
            return self.getToken(SQLiteParser.INDEXED, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_qualified_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 1659
                self.schema_name()
                self.state = 1660
                self.match(SQLiteParser.DOT)


            self.state = 1664
            self.table_name()
            self.state = 1667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.AS:
                self.state = 1665
                self.match(SQLiteParser.AS)
                self.state = 1666
                self.alias()


            self.state = 1674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.INDEXED]:
                self.state = 1669
                self.match(SQLiteParser.INDEXED)
                self.state = 1670
                self.match(SQLiteParser.BY)
                self.state = 1671
                self.index_name()
                pass
            elif token in [SQLiteParser.NOT]:
                self.state = 1672
                self.match(SQLiteParser.NOT)
                self.state = 1673
                self.match(SQLiteParser.INDEXED)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.ATTACH, SQLiteParser.BEGIN, SQLiteParser.COMMIT, SQLiteParser.CREATE, SQLiteParser.DEFAULT, SQLiteParser.DELETE, SQLiteParser.DETACH, SQLiteParser.DROP, SQLiteParser.END, SQLiteParser.EXPLAIN, SQLiteParser.INSERT, SQLiteParser.LIMIT, SQLiteParser.ORDER, SQLiteParser.PRAGMA, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.REPLACE, SQLiteParser.ROLLBACK, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.UPDATE, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VACUUM(self):
            return self.getToken(SQLiteParser.VACUUM, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def INTO(self):
            return self.getToken(SQLiteParser.INTO, 0)

        def filename(self):
            return self.getTypedRuleContext(SQLiteParser.FilenameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)




    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vacuum_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1676
            self.match(SQLiteParser.VACUUM)
            self.state = 1678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.state = 1677
                self.schema_name()


            self.state = 1682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.INTO:
                self.state = 1680
                self.match(SQLiteParser.INTO)
                self.state = 1681
                self.filename()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(SQLiteParser.FILTER, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_filter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_clause" ):
                listener.enterFilter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_clause" ):
                listener.exitFilter_clause(self)




    def filter_clause(self):

        localctx = SQLiteParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self.match(SQLiteParser.FILTER)
            self.state = 1685
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1686
            self.match(SQLiteParser.WHERE)
            self.state = 1687
            self.expr(0)
            self.state = 1688
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY)
            else:
                return self.getToken(SQLiteParser.BY, i)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION(self):
            return self.getToken(SQLiteParser.PARTITION, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_defn" ):
                listener.enterWindow_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_defn" ):
                listener.exitWindow_defn(self)




    def window_defn(self):

        localctx = SQLiteParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_window_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 1691
                self.base_window_name()


            self.state = 1704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.PARTITION:
                self.state = 1694
                self.match(SQLiteParser.PARTITION)
                self.state = 1695
                self.match(SQLiteParser.BY)
                self.state = 1696
                self.expr(0)
                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1697
                    self.match(SQLiteParser.COMMA)
                    self.state = 1698
                    self.expr(0)
                    self.state = 1703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1706
            self.match(SQLiteParser.ORDER)
            self.state = 1707
            self.match(SQLiteParser.BY)
            self.state = 1708
            self.ordering_term()
            self.state = 1713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1709
                self.match(SQLiteParser.COMMA)
                self.state = 1710
                self.ordering_term()
                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SQLiteParser.ROWS - 129)) | (1 << (SQLiteParser.RANGE - 129)) | (1 << (SQLiteParser.GROUPS - 129)))) != 0):
                self.state = 1716
                self.frame_spec()


            self.state = 1719
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(SQLiteParser.OVER, 0)

        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION(self):
            return self.getToken(SQLiteParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY)
            else:
                return self.getToken(SQLiteParser.BY, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = SQLiteParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1721
            self.match(SQLiteParser.OVER)
            self.state = 1755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.state = 1722
                self.window_name()
                pass

            elif la_ == 2:
                self.state = 1723
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 1724
                    self.base_window_name()


                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1727
                    self.match(SQLiteParser.PARTITION)
                    self.state = 1728
                    self.match(SQLiteParser.BY)
                    self.state = 1729
                    self.expr(0)
                    self.state = 1734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1730
                        self.match(SQLiteParser.COMMA)
                        self.state = 1731
                        self.expr(0)
                        self.state = 1736
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER:
                    self.state = 1739
                    self.match(SQLiteParser.ORDER)
                    self.state = 1740
                    self.match(SQLiteParser.BY)
                    self.state = 1741
                    self.ordering_term()
                    self.state = 1746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1742
                        self.match(SQLiteParser.COMMA)
                        self.state = 1743
                        self.ordering_term()
                        self.state = 1748
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SQLiteParser.ROWS - 129)) | (1 << (SQLiteParser.RANGE - 129)) | (1 << (SQLiteParser.GROUPS - 129)))) != 0):
                    self.state = 1751
                    self.frame_spec()


                self.state = 1754
                self.match(SQLiteParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def EXCLUDE(self):
            return self.getToken(SQLiteParser.EXCLUDE, 0)

        def GROUP(self):
            return self.getToken(SQLiteParser.GROUP, 0)

        def TIES(self):
            return self.getToken(SQLiteParser.TIES, 0)

        def NO(self):
            return self.getToken(SQLiteParser.NO, 0)

        def OTHERS(self):
            return self.getToken(SQLiteParser.OTHERS, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_spec" ):
                listener.enterFrame_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_spec" ):
                listener.exitFrame_spec(self)




    def frame_spec(self):

        localctx = SQLiteParser.Frame_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_frame_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            self.frame_clause()
            self.state = 1765
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.EXCLUDE]:
                self.state = 1758
                self.match(SQLiteParser.EXCLUDE)

                self.state = 1759
                self.match(SQLiteParser.NO)
                self.state = 1760
                self.match(SQLiteParser.OTHERS)
                pass
            elif token in [SQLiteParser.CURRENT]:
                self.state = 1761
                self.match(SQLiteParser.CURRENT)
                self.state = 1762
                self.match(SQLiteParser.ROW)
                pass
            elif token in [SQLiteParser.GROUP]:
                self.state = 1763
                self.match(SQLiteParser.GROUP)
                pass
            elif token in [SQLiteParser.TIES]:
                self.state = 1764
                self.match(SQLiteParser.TIES)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(SQLiteParser.RANGE, 0)

        def ROWS(self):
            return self.getToken(SQLiteParser.ROWS, 0)

        def GROUPS(self):
            return self.getToken(SQLiteParser.GROUPS, 0)

        def frame_single(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_singleContext,0)


        def BETWEEN(self):
            return self.getToken(SQLiteParser.BETWEEN, 0)

        def frame_left(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_leftContext,0)


        def AND(self):
            return self.getToken(SQLiteParser.AND, 0)

        def frame_right(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_rightContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_clause" ):
                listener.enterFrame_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_clause" ):
                listener.exitFrame_clause(self)




    def frame_clause(self):

        localctx = SQLiteParser.Frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_frame_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1767
            _la = self._input.LA(1)
            if not(((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SQLiteParser.ROWS - 129)) | (1 << (SQLiteParser.RANGE - 129)) | (1 << (SQLiteParser.GROUPS - 129)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 1768
                self.frame_single()
                pass

            elif la_ == 2:
                self.state = 1769
                self.match(SQLiteParser.BETWEEN)
                self.state = 1770
                self.frame_left()
                self.state = 1771
                self.match(SQLiteParser.AND)
                self.state = 1772
                self.frame_right()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_func(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_function_invocation" ):
                listener.enterSimple_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_function_invocation" ):
                listener.exitSimple_function_invocation(self)




    def simple_function_invocation(self):

        localctx = SQLiteParser.Simple_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_simple_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1776
            self.simple_func()
            self.state = 1777
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.TRIM, SQLiteParser.EXTRACT, SQLiteParser.YEAR, SQLiteParser.MONTH, SQLiteParser.DAY, SQLiteParser.HOUR, SQLiteParser.MINUTE, SQLiteParser.SECOND, SQLiteParser.POSITION, SQLiteParser.SUBSTRING, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1778
                self.expr(0)
                self.state = 1783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1779
                    self.match(SQLiteParser.COMMA)
                    self.state = 1780
                    self.expr(0)
                    self.state = 1785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1786
                self.match(SQLiteParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1789
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_func(self):
            return self.getTypedRuleContext(SQLiteParser.Aggregate_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def DISTINCT(self):
            return self.getToken(SQLiteParser.DISTINCT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_invocation" ):
                listener.enterAggregate_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_invocation" ):
                listener.exitAggregate_function_invocation(self)




    def aggregate_function_invocation(self):

        localctx = SQLiteParser.Aggregate_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_aggregate_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1791
            self.aggregate_func()
            self.state = 1792
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.TRIM, SQLiteParser.EXTRACT, SQLiteParser.YEAR, SQLiteParser.MONTH, SQLiteParser.DAY, SQLiteParser.HOUR, SQLiteParser.MINUTE, SQLiteParser.SECOND, SQLiteParser.POSITION, SQLiteParser.SUBSTRING, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1794
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 1793
                    self.match(SQLiteParser.DISTINCT)


                self.state = 1796
                self.expr(0)
                self.state = 1801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1797
                    self.match(SQLiteParser.COMMA)
                    self.state = 1798
                    self.expr(0)
                    self.state = 1803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1804
                self.match(SQLiteParser.STAR)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
            self.state = 1807
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FILTER:
                self.state = 1808
                self.filter_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_function(self):
            return self.getTypedRuleContext(SQLiteParser.Window_functionContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def OVER(self):
            return self.getToken(SQLiteParser.OVER, 0)

        def window_defn(self):
            return self.getTypedRuleContext(SQLiteParser.Window_defnContext,0)


        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function_invocation" ):
                listener.enterWindow_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function_invocation" ):
                listener.exitWindow_function_invocation(self)




    def window_function_invocation(self):

        localctx = SQLiteParser.Window_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_window_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            self.window_function()
            self.state = 1812
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.TRIM, SQLiteParser.EXTRACT, SQLiteParser.YEAR, SQLiteParser.MONTH, SQLiteParser.DAY, SQLiteParser.HOUR, SQLiteParser.MINUTE, SQLiteParser.SECOND, SQLiteParser.POSITION, SQLiteParser.SUBSTRING, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1813
                self.expr(0)
                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1814
                    self.match(SQLiteParser.COMMA)
                    self.state = 1815
                    self.expr(0)
                    self.state = 1820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1821
                self.match(SQLiteParser.STAR)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
            self.state = 1824
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FILTER:
                self.state = 1825
                self.filter_clause()


            self.state = 1828
            self.match(SQLiteParser.OVER)
            self.state = 1831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.state = 1829
                self.window_defn()
                pass

            elif la_ == 2:
                self.state = 1830
                self.window_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SQLiteParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def RECURSIVE(self):
            return self.getToken(SQLiteParser.RECURSIVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_stmt" ):
                listener.enterCommon_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_stmt" ):
                listener.exitCommon_table_stmt(self)




    def common_table_stmt(self):

        localctx = SQLiteParser.Common_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_common_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            self.match(SQLiteParser.WITH)
            self.state = 1835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.state = 1834
                self.match(SQLiteParser.RECURSIVE)


            self.state = 1837
            self.common_table_expression()
            self.state = 1842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1838
                self.match(SQLiteParser.COMMA)
                self.state = 1839
                self.common_table_expression()
                self.state = 1844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_stmt" ):
                listener.enterOrder_by_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_stmt" ):
                listener.exitOrder_by_stmt(self)




    def order_by_stmt(self):

        localctx = SQLiteParser.Order_by_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_order_by_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.match(SQLiteParser.ORDER)
            self.state = 1846
            self.match(SQLiteParser.BY)
            self.state = 1847
            self.ordering_term()
            self.state = 1852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1848
                self.match(SQLiteParser.COMMA)
                self.state = 1849
                self.ordering_term()
                self.state = 1854
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(SQLiteParser.LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def OFFSET(self):
            return self.getToken(SQLiteParser.OFFSET, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_limit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_stmt" ):
                listener.enterLimit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_stmt" ):
                listener.exitLimit_stmt(self)




    def limit_stmt(self):

        localctx = SQLiteParser.Limit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_limit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            self.match(SQLiteParser.LIMIT)
            self.state = 1856
            self.expr(0)
            self.state = 1859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COMMA or _la==SQLiteParser.OFFSET:
                self.state = 1857
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.OFFSET):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1858
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def NULLS(self):
            return self.getToken(SQLiteParser.NULLS, 0)

        def FIRST(self):
            return self.getToken(SQLiteParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SQLiteParser.LAST, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self.expr(0)
            self.state = 1864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COLLATE:
                self.state = 1862
                self.match(SQLiteParser.COLLATE)
                self.state = 1863
                self.collation_name()


            self.state = 1867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                self.state = 1866
                self.asc_desc()


            self.state = 1871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.NULLS:
                self.state = 1869
                self.match(SQLiteParser.NULLS)
                self.state = 1870
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.FIRST or _la==SQLiteParser.LAST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(SQLiteParser.ASC, 0)

        def DESC(self):
            return self.getToken(SQLiteParser.DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc" ):
                listener.enterAsc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc" ):
                listener.exitAsc_desc(self)




    def asc_desc(self):

        localctx = SQLiteParser.Asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1873
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.ASC or _la==SQLiteParser.DESC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_leftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING(self):
            return self.getToken(SQLiteParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SQLiteParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(SQLiteParser.UNBOUNDED, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_left

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_left" ):
                listener.enterFrame_left(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_left" ):
                listener.exitFrame_left(self)




    def frame_left(self):

        localctx = SQLiteParser.Frame_leftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_frame_left)
        try:
            self.state = 1885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1875
                self.expr(0)
                self.state = 1876
                self.match(SQLiteParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1878
                self.expr(0)
                self.state = 1879
                self.match(SQLiteParser.FOLLOWING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1881
                self.match(SQLiteParser.CURRENT)
                self.state = 1882
                self.match(SQLiteParser.ROW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1883
                self.match(SQLiteParser.UNBOUNDED)
                self.state = 1884
                self.match(SQLiteParser.PRECEDING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_rightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING(self):
            return self.getToken(SQLiteParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SQLiteParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(SQLiteParser.UNBOUNDED, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_right

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_right" ):
                listener.enterFrame_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_right" ):
                listener.exitFrame_right(self)




    def frame_right(self):

        localctx = SQLiteParser.Frame_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_frame_right)
        try:
            self.state = 1897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1887
                self.expr(0)
                self.state = 1888
                self.match(SQLiteParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1890
                self.expr(0)
                self.state = 1891
                self.match(SQLiteParser.FOLLOWING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1893
                self.match(SQLiteParser.CURRENT)
                self.state = 1894
                self.match(SQLiteParser.ROW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1895
                self.match(SQLiteParser.UNBOUNDED)
                self.state = 1896
                self.match(SQLiteParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING(self):
            return self.getToken(SQLiteParser.PRECEDING, 0)

        def UNBOUNDED(self):
            return self.getToken(SQLiteParser.UNBOUNDED, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_single" ):
                listener.enterFrame_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_single" ):
                listener.exitFrame_single(self)




    def frame_single(self):

        localctx = SQLiteParser.Frame_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_frame_single)
        try:
            self.state = 1906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1899
                self.expr(0)
                self.state = 1900
                self.match(SQLiteParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1902
                self.match(SQLiteParser.UNBOUNDED)
                self.state = 1903
                self.match(SQLiteParser.PRECEDING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1904
                self.match(SQLiteParser.CURRENT)
                self.state = 1905
                self.match(SQLiteParser.ROW)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def OVER(self):
            return self.getToken(SQLiteParser.OVER, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_expr_asc_descContext,0)


        def FIRST_VALUE(self):
            return self.getToken(SQLiteParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(SQLiteParser.LAST_VALUE, 0)

        def partition_by(self):
            return self.getTypedRuleContext(SQLiteParser.Partition_byContext,0)


        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def CUME_DIST(self):
            return self.getToken(SQLiteParser.CUME_DIST, 0)

        def PERCENT_RANK(self):
            return self.getToken(SQLiteParser.PERCENT_RANK, 0)

        def order_by_expr(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_exprContext,0)


        def DENSE_RANK(self):
            return self.getToken(SQLiteParser.DENSE_RANK, 0)

        def RANK(self):
            return self.getToken(SQLiteParser.RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(SQLiteParser.ROW_NUMBER, 0)

        def LAG(self):
            return self.getToken(SQLiteParser.LAG, 0)

        def LEAD(self):
            return self.getToken(SQLiteParser.LEAD, 0)

        def offset(self):
            return self.getTypedRuleContext(SQLiteParser.OffsetContext,0)


        def default_value(self):
            return self.getTypedRuleContext(SQLiteParser.Default_valueContext,0)


        def NTH_VALUE(self):
            return self.getToken(SQLiteParser.NTH_VALUE, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def NTILE(self):
            return self.getToken(SQLiteParser.NTILE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function" ):
                listener.enterWindow_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function" ):
                listener.exitWindow_function(self)




    def window_function(self):

        localctx = SQLiteParser.Window_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_window_function)
        self._la = 0 # Token type
        try:
            self.state = 1993
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.FIRST_VALUE, SQLiteParser.LAST_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1908
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.FIRST_VALUE or _la==SQLiteParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1909
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1910
                self.expr(0)
                self.state = 1911
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1912
                self.match(SQLiteParser.OVER)
                self.state = 1913
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1914
                    self.partition_by()


                self.state = 1917
                self.order_by_expr_asc_desc()
                self.state = 1919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SQLiteParser.ROWS - 129)) | (1 << (SQLiteParser.RANGE - 129)) | (1 << (SQLiteParser.GROUPS - 129)))) != 0):
                    self.state = 1918
                    self.frame_clause()


                self.state = 1921
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.CUME_DIST, SQLiteParser.PERCENT_RANK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1923
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.CUME_DIST or _la==SQLiteParser.PERCENT_RANK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1924
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1925
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1926
                self.match(SQLiteParser.OVER)
                self.state = 1927
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1928
                    self.partition_by()


                self.state = 1932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER:
                    self.state = 1931
                    self.order_by_expr()


                self.state = 1934
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.DENSE_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1935
                _la = self._input.LA(1)
                if not(((((_la - 161)) & ~0x3f) == 0 and ((1 << (_la - 161)) & ((1 << (SQLiteParser.DENSE_RANK - 161)) | (1 << (SQLiteParser.RANK - 161)) | (1 << (SQLiteParser.ROW_NUMBER - 161)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1936
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1937
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1938
                self.match(SQLiteParser.OVER)
                self.state = 1939
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1940
                    self.partition_by()


                self.state = 1943
                self.order_by_expr_asc_desc()
                self.state = 1944
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.LAG, SQLiteParser.LEAD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1946
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.LAG or _la==SQLiteParser.LEAD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1947
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1948
                self.expr(0)
                self.state = 1950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                if la_ == 1:
                    self.state = 1949
                    self.offset()


                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA:
                    self.state = 1952
                    self.default_value()


                self.state = 1955
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1956
                self.match(SQLiteParser.OVER)
                self.state = 1957
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1958
                    self.partition_by()


                self.state = 1961
                self.order_by_expr_asc_desc()
                self.state = 1962
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.NTH_VALUE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1964
                self.match(SQLiteParser.NTH_VALUE)
                self.state = 1965
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1966
                self.expr(0)
                self.state = 1967
                self.match(SQLiteParser.COMMA)
                self.state = 1968
                self.signed_number()
                self.state = 1969
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1970
                self.match(SQLiteParser.OVER)
                self.state = 1971
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1972
                    self.partition_by()


                self.state = 1975
                self.order_by_expr_asc_desc()
                self.state = 1977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SQLiteParser.ROWS - 129)) | (1 << (SQLiteParser.RANGE - 129)) | (1 << (SQLiteParser.GROUPS - 129)))) != 0):
                    self.state = 1976
                    self.frame_clause()


                self.state = 1979
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.NTILE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1981
                self.match(SQLiteParser.NTILE)
                self.state = 1982
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1983
                self.expr(0)
                self.state = 1984
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1985
                self.match(SQLiteParser.OVER)
                self.state = 1986
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1987
                    self.partition_by()


                self.state = 1990
                self.order_by_expr_asc_desc()
                self.state = 1991
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = SQLiteParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1995
            self.match(SQLiteParser.COMMA)
            self.state = 1996
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = SQLiteParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_default_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self.match(SQLiteParser.COMMA)
            self.state = 1999
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SQLiteParser.PARTITION, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by" ):
                listener.enterPartition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by" ):
                listener.exitPartition_by(self)




    def partition_by(self):

        localctx = SQLiteParser.Partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_partition_by)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self.match(SQLiteParser.PARTITION)
            self.state = 2002
            self.match(SQLiteParser.BY)
            self.state = 2004 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2003
                    self.expr(0)

                else:
                    raise NoViableAltException(self)
                self.state = 2006 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,287,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr" ):
                listener.enterOrder_by_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr" ):
                listener.exitOrder_by_expr(self)




    def order_by_expr(self):

        localctx = SQLiteParser.Order_by_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_order_by_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.match(SQLiteParser.ORDER)
            self.state = 2009
            self.match(SQLiteParser.BY)
            self.state = 2011 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2010
                self.expr(0)
                self.state = 2013 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.ABORT) | (1 << SQLiteParser.ACTION) | (1 << SQLiteParser.ADD) | (1 << SQLiteParser.AFTER) | (1 << SQLiteParser.ALL) | (1 << SQLiteParser.ALTER) | (1 << SQLiteParser.ANALYZE) | (1 << SQLiteParser.AND) | (1 << SQLiteParser.AS) | (1 << SQLiteParser.ASC) | (1 << SQLiteParser.ATTACH) | (1 << SQLiteParser.AUTOINCREMENT) | (1 << SQLiteParser.BEFORE) | (1 << SQLiteParser.BEGIN) | (1 << SQLiteParser.BETWEEN) | (1 << SQLiteParser.BY) | (1 << SQLiteParser.CASCADE) | (1 << SQLiteParser.CASE) | (1 << SQLiteParser.CAST) | (1 << SQLiteParser.CHECK) | (1 << SQLiteParser.COLLATE) | (1 << SQLiteParser.COLUMN) | (1 << SQLiteParser.COMMIT) | (1 << SQLiteParser.CONFLICT) | (1 << SQLiteParser.CONSTRAINT) | (1 << SQLiteParser.CREATE) | (1 << SQLiteParser.CROSS) | (1 << SQLiteParser.CURRENT_DATE) | (1 << SQLiteParser.CURRENT_TIME) | (1 << SQLiteParser.CURRENT_TIMESTAMP) | (1 << SQLiteParser.DATABASE) | (1 << SQLiteParser.DEFAULT) | (1 << SQLiteParser.DEFERRABLE) | (1 << SQLiteParser.DEFERRED) | (1 << SQLiteParser.DELETE) | (1 << SQLiteParser.DESC) | (1 << SQLiteParser.DETACH))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.DISTINCT - 64)) | (1 << (SQLiteParser.DROP - 64)) | (1 << (SQLiteParser.EACH - 64)) | (1 << (SQLiteParser.ELSE - 64)) | (1 << (SQLiteParser.END - 64)) | (1 << (SQLiteParser.ESCAPE - 64)) | (1 << (SQLiteParser.EXCEPT - 64)) | (1 << (SQLiteParser.EXCLUSIVE - 64)) | (1 << (SQLiteParser.EXISTS - 64)) | (1 << (SQLiteParser.EXPLAIN - 64)) | (1 << (SQLiteParser.FAIL - 64)) | (1 << (SQLiteParser.FOR - 64)) | (1 << (SQLiteParser.FOREIGN - 64)) | (1 << (SQLiteParser.FROM - 64)) | (1 << (SQLiteParser.FULL - 64)) | (1 << (SQLiteParser.GLOB - 64)) | (1 << (SQLiteParser.GROUP - 64)) | (1 << (SQLiteParser.HAVING - 64)) | (1 << (SQLiteParser.IF - 64)) | (1 << (SQLiteParser.IGNORE - 64)) | (1 << (SQLiteParser.IMMEDIATE - 64)) | (1 << (SQLiteParser.IN - 64)) | (1 << (SQLiteParser.INDEX - 64)) | (1 << (SQLiteParser.INDEXED - 64)) | (1 << (SQLiteParser.INITIALLY - 64)) | (1 << (SQLiteParser.INNER - 64)) | (1 << (SQLiteParser.INSERT - 64)) | (1 << (SQLiteParser.INSTEAD - 64)) | (1 << (SQLiteParser.INTERSECT - 64)) | (1 << (SQLiteParser.INTO - 64)) | (1 << (SQLiteParser.IS - 64)) | (1 << (SQLiteParser.ISNULL - 64)) | (1 << (SQLiteParser.JOIN - 64)) | (1 << (SQLiteParser.KEY - 64)) | (1 << (SQLiteParser.LEFT - 64)) | (1 << (SQLiteParser.LIKE - 64)) | (1 << (SQLiteParser.LIMIT - 64)) | (1 << (SQLiteParser.MATCH - 64)) | (1 << (SQLiteParser.NATURAL - 64)) | (1 << (SQLiteParser.NO - 64)) | (1 << (SQLiteParser.NOT - 64)) | (1 << (SQLiteParser.NOTNULL - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF - 64)) | (1 << (SQLiteParser.OFFSET - 64)) | (1 << (SQLiteParser.ON - 64)) | (1 << (SQLiteParser.OR - 64)) | (1 << (SQLiteParser.ORDER - 64)) | (1 << (SQLiteParser.OUTER - 64)) | (1 << (SQLiteParser.PLAN - 64)) | (1 << (SQLiteParser.PRAGMA - 64)) | (1 << (SQLiteParser.PRIMARY - 64)) | (1 << (SQLiteParser.QUERY - 64)) | (1 << (SQLiteParser.RAISE - 64)) | (1 << (SQLiteParser.RECURSIVE - 64)) | (1 << (SQLiteParser.REFERENCES - 64)) | (1 << (SQLiteParser.REGEXP - 64)) | (1 << (SQLiteParser.REINDEX - 64)) | (1 << (SQLiteParser.RELEASE - 64)) | (1 << (SQLiteParser.RENAME - 64)) | (1 << (SQLiteParser.REPLACE - 64)) | (1 << (SQLiteParser.RESTRICT - 64)) | (1 << (SQLiteParser.RIGHT - 64)) | (1 << (SQLiteParser.ROLLBACK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.ROW - 128)) | (1 << (SQLiteParser.ROWS - 128)) | (1 << (SQLiteParser.SAVEPOINT - 128)) | (1 << (SQLiteParser.SELECT - 128)) | (1 << (SQLiteParser.SET - 128)) | (1 << (SQLiteParser.TABLE - 128)) | (1 << (SQLiteParser.TEMP - 128)) | (1 << (SQLiteParser.TEMPORARY - 128)) | (1 << (SQLiteParser.THEN - 128)) | (1 << (SQLiteParser.TO - 128)) | (1 << (SQLiteParser.TRANSACTION - 128)) | (1 << (SQLiteParser.TRIGGER - 128)) | (1 << (SQLiteParser.UNION - 128)) | (1 << (SQLiteParser.UNIQUE - 128)) | (1 << (SQLiteParser.UPDATE - 128)) | (1 << (SQLiteParser.USING - 128)) | (1 << (SQLiteParser.VACUUM - 128)) | (1 << (SQLiteParser.VALUES - 128)) | (1 << (SQLiteParser.VIEW - 128)) | (1 << (SQLiteParser.VIRTUAL - 128)) | (1 << (SQLiteParser.WHEN - 128)) | (1 << (SQLiteParser.WHERE - 128)) | (1 << (SQLiteParser.WITH - 128)) | (1 << (SQLiteParser.WITHOUT - 128)) | (1 << (SQLiteParser.FIRST_VALUE - 128)) | (1 << (SQLiteParser.OVER - 128)) | (1 << (SQLiteParser.PARTITION - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.PRECEDING - 128)) | (1 << (SQLiteParser.UNBOUNDED - 128)) | (1 << (SQLiteParser.CURRENT - 128)) | (1 << (SQLiteParser.FOLLOWING - 128)) | (1 << (SQLiteParser.CUME_DIST - 128)) | (1 << (SQLiteParser.DENSE_RANK - 128)) | (1 << (SQLiteParser.LAG - 128)) | (1 << (SQLiteParser.LAST_VALUE - 128)) | (1 << (SQLiteParser.LEAD - 128)) | (1 << (SQLiteParser.NTH_VALUE - 128)) | (1 << (SQLiteParser.NTILE - 128)) | (1 << (SQLiteParser.PERCENT_RANK - 128)) | (1 << (SQLiteParser.RANK - 128)) | (1 << (SQLiteParser.ROW_NUMBER - 128)) | (1 << (SQLiteParser.GENERATED - 128)) | (1 << (SQLiteParser.ALWAYS - 128)) | (1 << (SQLiteParser.STORED - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW - 128)) | (1 << (SQLiteParser.NULLS - 128)) | (1 << (SQLiteParser.FIRST - 128)) | (1 << (SQLiteParser.LAST - 128)) | (1 << (SQLiteParser.FILTER - 128)) | (1 << (SQLiteParser.GROUPS - 128)) | (1 << (SQLiteParser.EXCLUDE - 128)) | (1 << (SQLiteParser.TRIM - 128)) | (1 << (SQLiteParser.EXTRACT - 128)) | (1 << (SQLiteParser.YEAR - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SQLiteParser.MONTH - 192)) | (1 << (SQLiteParser.DAY - 192)) | (1 << (SQLiteParser.HOUR - 192)) | (1 << (SQLiteParser.MINUTE - 192)) | (1 << (SQLiteParser.SECOND - 192)) | (1 << (SQLiteParser.POSITION - 192)) | (1 << (SQLiteParser.SUBSTRING - 192)) | (1 << (SQLiteParser.IDENTIFIER - 192)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 192)) | (1 << (SQLiteParser.BIND_PARAMETER - 192)) | (1 << (SQLiteParser.STRING_LITERAL - 192)) | (1 << (SQLiteParser.BLOB_LITERAL - 192)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_expr_asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr_asc_desc" ):
                listener.enterOrder_by_expr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr_asc_desc" ):
                listener.exitOrder_by_expr_asc_desc(self)




    def order_by_expr_asc_desc(self):

        localctx = SQLiteParser.Order_by_expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_order_by_expr_asc_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2015
            self.match(SQLiteParser.ORDER)
            self.state = 2016
            self.match(SQLiteParser.BY)
            self.state = 2017
            self.order_by_expr_asc_desc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def asc_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Asc_descContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Asc_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_asc_desc" ):
                listener.enterExpr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_asc_desc" ):
                listener.exitExpr_asc_desc(self)




    def expr_asc_desc(self):

        localctx = SQLiteParser.Expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expr_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2019
            self.expr(0)
            self.state = 2021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                self.state = 2020
                self.asc_desc()


            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 2023
                self.match(SQLiteParser.COMMA)
                self.state = 2024
                self.expr(0)
                self.state = 2026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                    self.state = 2025
                    self.asc_desc()


                self.state = 2032
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initial_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_initial_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial_select" ):
                listener.enterInitial_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial_select" ):
                listener.exitInitial_select(self)




    def initial_select(self):

        localctx = SQLiteParser.Initial_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_initial_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2033
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_select" ):
                listener.enterRecursive_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_select" ):
                listener.exitRecursive_select(self)




    def recursive_select(self):

        localctx = SQLiteParser.Recursive_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_recursive_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SQLiteParser.TILDE, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2037
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE))) != 0) or _la==SQLiteParser.NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_messageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_message" ):
                listener.enterError_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_message" ):
                listener.exitError_message(self)




    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2039
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_argument" ):
                listener.enterModule_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_argument" ):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = SQLiteParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_module_argument)
        try:
            self.state = 2043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2041
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2042
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2045
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def ACTION(self):
            return self.getToken(SQLiteParser.ACTION, 0)

        def ADD(self):
            return self.getToken(SQLiteParser.ADD, 0)

        def AFTER(self):
            return self.getToken(SQLiteParser.AFTER, 0)

        def ALL(self):
            return self.getToken(SQLiteParser.ALL, 0)

        def ALTER(self):
            return self.getToken(SQLiteParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(SQLiteParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(SQLiteParser.AND, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def ASC(self):
            return self.getToken(SQLiteParser.ASC, 0)

        def ATTACH(self):
            return self.getToken(SQLiteParser.ATTACH, 0)

        def AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT, 0)

        def BEFORE(self):
            return self.getToken(SQLiteParser.BEFORE, 0)

        def BEGIN(self):
            return self.getToken(SQLiteParser.BEGIN, 0)

        def BETWEEN(self):
            return self.getToken(SQLiteParser.BETWEEN, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def CASCADE(self):
            return self.getToken(SQLiteParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(SQLiteParser.CASE, 0)

        def CAST(self):
            return self.getToken(SQLiteParser.CAST, 0)

        def CHECK(self):
            return self.getToken(SQLiteParser.CHECK, 0)

        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(SQLiteParser.COLUMN, 0)

        def COMMIT(self):
            return self.getToken(SQLiteParser.COMMIT, 0)

        def CONFLICT(self):
            return self.getToken(SQLiteParser.CONFLICT, 0)

        def CONSTRAINT(self):
            return self.getToken(SQLiteParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(SQLiteParser.CROSS, 0)

        def CURRENT_DATE(self):
            return self.getToken(SQLiteParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(SQLiteParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP, 0)

        def DATABASE(self):
            return self.getToken(SQLiteParser.DATABASE, 0)

        def DEFAULT(self):
            return self.getToken(SQLiteParser.DEFAULT, 0)

        def DEFERRABLE(self):
            return self.getToken(SQLiteParser.DEFERRABLE, 0)

        def DEFERRED(self):
            return self.getToken(SQLiteParser.DEFERRED, 0)

        def DELETE(self):
            return self.getToken(SQLiteParser.DELETE, 0)

        def DESC(self):
            return self.getToken(SQLiteParser.DESC, 0)

        def DETACH(self):
            return self.getToken(SQLiteParser.DETACH, 0)

        def DISTINCT(self):
            return self.getToken(SQLiteParser.DISTINCT, 0)

        def DROP(self):
            return self.getToken(SQLiteParser.DROP, 0)

        def EACH(self):
            return self.getToken(SQLiteParser.EACH, 0)

        def ELSE(self):
            return self.getToken(SQLiteParser.ELSE, 0)

        def END(self):
            return self.getToken(SQLiteParser.END, 0)

        def ESCAPE(self):
            return self.getToken(SQLiteParser.ESCAPE, 0)

        def EXCEPT(self):
            return self.getToken(SQLiteParser.EXCEPT, 0)

        def EXCLUSIVE(self):
            return self.getToken(SQLiteParser.EXCLUSIVE, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(SQLiteParser.EXPLAIN, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def FOR(self):
            return self.getToken(SQLiteParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(SQLiteParser.FOREIGN, 0)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def FULL(self):
            return self.getToken(SQLiteParser.FULL, 0)

        def GLOB(self):
            return self.getToken(SQLiteParser.GLOB, 0)

        def GROUP(self):
            return self.getToken(SQLiteParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(SQLiteParser.HAVING, 0)

        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(SQLiteParser.IMMEDIATE, 0)

        def IN(self):
            return self.getToken(SQLiteParser.IN, 0)

        def INDEX(self):
            return self.getToken(SQLiteParser.INDEX, 0)

        def INDEXED(self):
            return self.getToken(SQLiteParser.INDEXED, 0)

        def INITIALLY(self):
            return self.getToken(SQLiteParser.INITIALLY, 0)

        def INNER(self):
            return self.getToken(SQLiteParser.INNER, 0)

        def INSERT(self):
            return self.getToken(SQLiteParser.INSERT, 0)

        def INSTEAD(self):
            return self.getToken(SQLiteParser.INSTEAD, 0)

        def INTERSECT(self):
            return self.getToken(SQLiteParser.INTERSECT, 0)

        def INTO(self):
            return self.getToken(SQLiteParser.INTO, 0)

        def IS(self):
            return self.getToken(SQLiteParser.IS, 0)

        def ISNULL(self):
            return self.getToken(SQLiteParser.ISNULL, 0)

        def JOIN(self):
            return self.getToken(SQLiteParser.JOIN, 0)

        def KEY(self):
            return self.getToken(SQLiteParser.KEY, 0)

        def LEFT(self):
            return self.getToken(SQLiteParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(SQLiteParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(SQLiteParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(SQLiteParser.MATCH, 0)

        def NATURAL(self):
            return self.getToken(SQLiteParser.NATURAL, 0)

        def NO(self):
            return self.getToken(SQLiteParser.NO, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def NOTNULL(self):
            return self.getToken(SQLiteParser.NOTNULL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def OF(self):
            return self.getToken(SQLiteParser.OF, 0)

        def OFFSET(self):
            return self.getToken(SQLiteParser.OFFSET, 0)

        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(SQLiteParser.OUTER, 0)

        def PLAN(self):
            return self.getToken(SQLiteParser.PLAN, 0)

        def PRAGMA(self):
            return self.getToken(SQLiteParser.PRAGMA, 0)

        def PRIMARY(self):
            return self.getToken(SQLiteParser.PRIMARY, 0)

        def QUERY(self):
            return self.getToken(SQLiteParser.QUERY, 0)

        def RAISE(self):
            return self.getToken(SQLiteParser.RAISE, 0)

        def RECURSIVE(self):
            return self.getToken(SQLiteParser.RECURSIVE, 0)

        def REFERENCES(self):
            return self.getToken(SQLiteParser.REFERENCES, 0)

        def REGEXP(self):
            return self.getToken(SQLiteParser.REGEXP, 0)

        def REINDEX(self):
            return self.getToken(SQLiteParser.REINDEX, 0)

        def RELEASE(self):
            return self.getToken(SQLiteParser.RELEASE, 0)

        def RENAME(self):
            return self.getToken(SQLiteParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def RESTRICT(self):
            return self.getToken(SQLiteParser.RESTRICT, 0)

        def RIGHT(self):
            return self.getToken(SQLiteParser.RIGHT, 0)

        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SQLiteParser.ROWS, 0)

        def SAVEPOINT(self):
            return self.getToken(SQLiteParser.SAVEPOINT, 0)

        def SELECT(self):
            return self.getToken(SQLiteParser.SELECT, 0)

        def SET(self):
            return self.getToken(SQLiteParser.SET, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def TEMP(self):
            return self.getToken(SQLiteParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SQLiteParser.TEMPORARY, 0)

        def THEN(self):
            return self.getToken(SQLiteParser.THEN, 0)

        def TO(self):
            return self.getToken(SQLiteParser.TO, 0)

        def TRANSACTION(self):
            return self.getToken(SQLiteParser.TRANSACTION, 0)

        def TRIGGER(self):
            return self.getToken(SQLiteParser.TRIGGER, 0)

        def UNION(self):
            return self.getToken(SQLiteParser.UNION, 0)

        def UNIQUE(self):
            return self.getToken(SQLiteParser.UNIQUE, 0)

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def USING(self):
            return self.getToken(SQLiteParser.USING, 0)

        def VACUUM(self):
            return self.getToken(SQLiteParser.VACUUM, 0)

        def VALUES(self):
            return self.getToken(SQLiteParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(SQLiteParser.VIEW, 0)

        def VIRTUAL(self):
            return self.getToken(SQLiteParser.VIRTUAL, 0)

        def WHEN(self):
            return self.getToken(SQLiteParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def WITH(self):
            return self.getToken(SQLiteParser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(SQLiteParser.WITHOUT, 0)

        def FIRST_VALUE(self):
            return self.getToken(SQLiteParser.FIRST_VALUE, 0)

        def OVER(self):
            return self.getToken(SQLiteParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SQLiteParser.PARTITION, 0)

        def RANGE(self):
            return self.getToken(SQLiteParser.RANGE, 0)

        def PRECEDING(self):
            return self.getToken(SQLiteParser.PRECEDING, 0)

        def UNBOUNDED(self):
            return self.getToken(SQLiteParser.UNBOUNDED, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def FOLLOWING(self):
            return self.getToken(SQLiteParser.FOLLOWING, 0)

        def CUME_DIST(self):
            return self.getToken(SQLiteParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(SQLiteParser.DENSE_RANK, 0)

        def LAG(self):
            return self.getToken(SQLiteParser.LAG, 0)

        def LAST_VALUE(self):
            return self.getToken(SQLiteParser.LAST_VALUE, 0)

        def LEAD(self):
            return self.getToken(SQLiteParser.LEAD, 0)

        def NTH_VALUE(self):
            return self.getToken(SQLiteParser.NTH_VALUE, 0)

        def NTILE(self):
            return self.getToken(SQLiteParser.NTILE, 0)

        def PERCENT_RANK(self):
            return self.getToken(SQLiteParser.PERCENT_RANK, 0)

        def RANK(self):
            return self.getToken(SQLiteParser.RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(SQLiteParser.ROW_NUMBER, 0)

        def GENERATED(self):
            return self.getToken(SQLiteParser.GENERATED, 0)

        def ALWAYS(self):
            return self.getToken(SQLiteParser.ALWAYS, 0)

        def STORED(self):
            return self.getToken(SQLiteParser.STORED, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def WINDOW(self):
            return self.getToken(SQLiteParser.WINDOW, 0)

        def NULLS(self):
            return self.getToken(SQLiteParser.NULLS, 0)

        def FIRST(self):
            return self.getToken(SQLiteParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SQLiteParser.LAST, 0)

        def FILTER(self):
            return self.getToken(SQLiteParser.FILTER, 0)

        def GROUPS(self):
            return self.getToken(SQLiteParser.GROUPS, 0)

        def EXCLUDE(self):
            return self.getToken(SQLiteParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2047
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.ABORT) | (1 << SQLiteParser.ACTION) | (1 << SQLiteParser.ADD) | (1 << SQLiteParser.AFTER) | (1 << SQLiteParser.ALL) | (1 << SQLiteParser.ALTER) | (1 << SQLiteParser.ANALYZE) | (1 << SQLiteParser.AND) | (1 << SQLiteParser.AS) | (1 << SQLiteParser.ASC) | (1 << SQLiteParser.ATTACH) | (1 << SQLiteParser.AUTOINCREMENT) | (1 << SQLiteParser.BEFORE) | (1 << SQLiteParser.BEGIN) | (1 << SQLiteParser.BETWEEN) | (1 << SQLiteParser.BY) | (1 << SQLiteParser.CASCADE) | (1 << SQLiteParser.CASE) | (1 << SQLiteParser.CAST) | (1 << SQLiteParser.CHECK) | (1 << SQLiteParser.COLLATE) | (1 << SQLiteParser.COLUMN) | (1 << SQLiteParser.COMMIT) | (1 << SQLiteParser.CONFLICT) | (1 << SQLiteParser.CONSTRAINT) | (1 << SQLiteParser.CREATE) | (1 << SQLiteParser.CROSS) | (1 << SQLiteParser.CURRENT_DATE) | (1 << SQLiteParser.CURRENT_TIME) | (1 << SQLiteParser.CURRENT_TIMESTAMP) | (1 << SQLiteParser.DATABASE) | (1 << SQLiteParser.DEFAULT) | (1 << SQLiteParser.DEFERRABLE) | (1 << SQLiteParser.DEFERRED) | (1 << SQLiteParser.DELETE) | (1 << SQLiteParser.DESC) | (1 << SQLiteParser.DETACH))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.DISTINCT - 64)) | (1 << (SQLiteParser.DROP - 64)) | (1 << (SQLiteParser.EACH - 64)) | (1 << (SQLiteParser.ELSE - 64)) | (1 << (SQLiteParser.END - 64)) | (1 << (SQLiteParser.ESCAPE - 64)) | (1 << (SQLiteParser.EXCEPT - 64)) | (1 << (SQLiteParser.EXCLUSIVE - 64)) | (1 << (SQLiteParser.EXISTS - 64)) | (1 << (SQLiteParser.EXPLAIN - 64)) | (1 << (SQLiteParser.FAIL - 64)) | (1 << (SQLiteParser.FOR - 64)) | (1 << (SQLiteParser.FOREIGN - 64)) | (1 << (SQLiteParser.FROM - 64)) | (1 << (SQLiteParser.FULL - 64)) | (1 << (SQLiteParser.GLOB - 64)) | (1 << (SQLiteParser.GROUP - 64)) | (1 << (SQLiteParser.HAVING - 64)) | (1 << (SQLiteParser.IF - 64)) | (1 << (SQLiteParser.IGNORE - 64)) | (1 << (SQLiteParser.IMMEDIATE - 64)) | (1 << (SQLiteParser.IN - 64)) | (1 << (SQLiteParser.INDEX - 64)) | (1 << (SQLiteParser.INDEXED - 64)) | (1 << (SQLiteParser.INITIALLY - 64)) | (1 << (SQLiteParser.INNER - 64)) | (1 << (SQLiteParser.INSERT - 64)) | (1 << (SQLiteParser.INSTEAD - 64)) | (1 << (SQLiteParser.INTERSECT - 64)) | (1 << (SQLiteParser.INTO - 64)) | (1 << (SQLiteParser.IS - 64)) | (1 << (SQLiteParser.ISNULL - 64)) | (1 << (SQLiteParser.JOIN - 64)) | (1 << (SQLiteParser.KEY - 64)) | (1 << (SQLiteParser.LEFT - 64)) | (1 << (SQLiteParser.LIKE - 64)) | (1 << (SQLiteParser.LIMIT - 64)) | (1 << (SQLiteParser.MATCH - 64)) | (1 << (SQLiteParser.NATURAL - 64)) | (1 << (SQLiteParser.NO - 64)) | (1 << (SQLiteParser.NOT - 64)) | (1 << (SQLiteParser.NOTNULL - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF - 64)) | (1 << (SQLiteParser.OFFSET - 64)) | (1 << (SQLiteParser.ON - 64)) | (1 << (SQLiteParser.OR - 64)) | (1 << (SQLiteParser.ORDER - 64)) | (1 << (SQLiteParser.OUTER - 64)) | (1 << (SQLiteParser.PLAN - 64)) | (1 << (SQLiteParser.PRAGMA - 64)) | (1 << (SQLiteParser.PRIMARY - 64)) | (1 << (SQLiteParser.QUERY - 64)) | (1 << (SQLiteParser.RAISE - 64)) | (1 << (SQLiteParser.RECURSIVE - 64)) | (1 << (SQLiteParser.REFERENCES - 64)) | (1 << (SQLiteParser.REGEXP - 64)) | (1 << (SQLiteParser.REINDEX - 64)) | (1 << (SQLiteParser.RELEASE - 64)) | (1 << (SQLiteParser.RENAME - 64)) | (1 << (SQLiteParser.REPLACE - 64)) | (1 << (SQLiteParser.RESTRICT - 64)) | (1 << (SQLiteParser.RIGHT - 64)) | (1 << (SQLiteParser.ROLLBACK - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.ROW - 128)) | (1 << (SQLiteParser.ROWS - 128)) | (1 << (SQLiteParser.SAVEPOINT - 128)) | (1 << (SQLiteParser.SELECT - 128)) | (1 << (SQLiteParser.SET - 128)) | (1 << (SQLiteParser.TABLE - 128)) | (1 << (SQLiteParser.TEMP - 128)) | (1 << (SQLiteParser.TEMPORARY - 128)) | (1 << (SQLiteParser.THEN - 128)) | (1 << (SQLiteParser.TO - 128)) | (1 << (SQLiteParser.TRANSACTION - 128)) | (1 << (SQLiteParser.TRIGGER - 128)) | (1 << (SQLiteParser.UNION - 128)) | (1 << (SQLiteParser.UNIQUE - 128)) | (1 << (SQLiteParser.UPDATE - 128)) | (1 << (SQLiteParser.USING - 128)) | (1 << (SQLiteParser.VACUUM - 128)) | (1 << (SQLiteParser.VALUES - 128)) | (1 << (SQLiteParser.VIEW - 128)) | (1 << (SQLiteParser.VIRTUAL - 128)) | (1 << (SQLiteParser.WHEN - 128)) | (1 << (SQLiteParser.WHERE - 128)) | (1 << (SQLiteParser.WITH - 128)) | (1 << (SQLiteParser.WITHOUT - 128)) | (1 << (SQLiteParser.FIRST_VALUE - 128)) | (1 << (SQLiteParser.OVER - 128)) | (1 << (SQLiteParser.PARTITION - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.PRECEDING - 128)) | (1 << (SQLiteParser.UNBOUNDED - 128)) | (1 << (SQLiteParser.CURRENT - 128)) | (1 << (SQLiteParser.FOLLOWING - 128)) | (1 << (SQLiteParser.CUME_DIST - 128)) | (1 << (SQLiteParser.DENSE_RANK - 128)) | (1 << (SQLiteParser.LAG - 128)) | (1 << (SQLiteParser.LAST_VALUE - 128)) | (1 << (SQLiteParser.LEAD - 128)) | (1 << (SQLiteParser.NTH_VALUE - 128)) | (1 << (SQLiteParser.NTILE - 128)) | (1 << (SQLiteParser.PERCENT_RANK - 128)) | (1 << (SQLiteParser.RANK - 128)) | (1 << (SQLiteParser.ROW_NUMBER - 128)) | (1 << (SQLiteParser.GENERATED - 128)) | (1 << (SQLiteParser.ALWAYS - 128)) | (1 << (SQLiteParser.STORED - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW - 128)) | (1 << (SQLiteParser.NULLS - 128)) | (1 << (SQLiteParser.FIRST - 128)) | (1 << (SQLiteParser.LAST - 128)) | (1 << (SQLiteParser.FILTER - 128)) | (1 << (SQLiteParser.GROUPS - 128)) | (1 << (SQLiteParser.EXCLUDE - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2051
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = SQLiteParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2053
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_index_name" ):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_index_name" ):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_new_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_table_name" ):
                listener.enterNew_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_table_name" ):
                listener.exitNew_table_name(self)




    def new_table_name(self):

        localctx = SQLiteParser.New_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_new_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2059
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = SQLiteParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = SQLiteParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2069
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = SQLiteParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_name" ):
                listener.enterModule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_name" ):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = SQLiteParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_name" ):
                listener.enterPragma_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_name" ):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2079
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_name" ):
                listener.enterTransaction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_name" ):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_name" ):
                listener.enterWindow_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_name" ):
                listener.exitWindow_name(self)




    def window_name(self):

        localctx = SQLiteParser.Window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2083
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = SQLiteParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2085
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_filename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilename" ):
                listener.enterFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilename" ):
                listener.exitFilename(self)




    def filename(self):

        localctx = SQLiteParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_base_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_window_name" ):
                listener.enterBase_window_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_window_name" ):
                listener.exitBase_window_name(self)




    def base_window_name(self):

        localctx = SQLiteParser.Base_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_base_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_func" ):
                listener.enterSimple_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_func" ):
                listener.exitSimple_func(self)




    def simple_func(self):

        localctx = SQLiteParser.Simple_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_simple_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2091
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_func" ):
                listener.enterAggregate_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_func" ):
                listener.exitAggregate_func(self)




    def aggregate_func(self):

        localctx = SQLiteParser.Aggregate_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_aggregate_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2093
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)




    def table_function_name(self):

        localctx = SQLiteParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2095
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_any_name)
        try:
            self.state = 2104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2097
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2098
                self.keyword()
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2099
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2100
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 2101
                self.any_name()
                self.state = 2102
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[33] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




