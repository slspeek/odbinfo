# Generated from SQLiteParser.g4 by ANTLR 4.9.2
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *

if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00cf")
        buf.write("\u0833\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\3\2\3\2\7\2\u00e5\n\2\f\2\16\2\u00e8\13\2\3\2\3\2")
        buf.write("\3\3\3\3\3\3\3\4\7\4\u00f0\n\4\f\4\16\4\u00f3\13\4\3\4")
        buf.write("\3\4\6\4\u00f7\n\4\r\4\16\4\u00f8\3\4\7\4\u00fc\n\4\f")
        buf.write("\4\16\4\u00ff\13\4\3\4\7\4\u0102\n\4\f\4\16\4\u0105\13")
        buf.write("\4\3\5\3\5\3\5\5\5\u010a\n\5\5\5\u010c\n\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0126\n\5\3\6\3\6\3")
        buf.write("\6\3\6\3\6\5\6\u012d\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u0134")
        buf.write("\n\6\3\6\3\6\3\6\3\6\5\6\u013a\n\6\3\6\3\6\5\6\u013e\n")
        buf.write("\6\3\6\5\6\u0141\n\6\3\7\3\7\3\7\3\7\3\7\5\7\u0148\n\7")
        buf.write("\3\7\5\7\u014b\n\7\3\b\3\b\5\b\u014f\n\b\3\b\3\b\3\b\3")
        buf.write("\b\3\t\3\t\5\t\u0157\n\t\3\t\3\t\5\t\u015b\n\t\5\t\u015d")
        buf.write("\n\t\3\n\3\n\5\n\u0161\n\n\3\13\3\13\5\13\u0165\n\13\3")
        buf.write("\13\3\13\5\13\u0169\n\13\3\13\5\13\u016c\n\13\3\f\3\f")
        buf.write("\3\f\3\r\3\r\5\r\u0173\n\r\3\r\3\r\3\16\3\16\5\16\u0179")
        buf.write("\n\16\3\16\3\16\3\16\3\16\5\16\u017f\n\16\3\16\3\16\3")
        buf.write("\16\5\16\u0184\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\7\16\u018d\n\16\f\16\16\16\u0190\13\16\3\16\3\16\3\16")
        buf.write("\5\16\u0195\n\16\3\17\3\17\5\17\u0199\n\17\3\17\3\17\5")
        buf.write("\17\u019d\n\17\3\17\5\17\u01a0\n\17\3\20\3\20\5\20\u01a4")
        buf.write("\n\20\3\20\3\20\3\20\3\20\5\20\u01aa\n\20\3\20\3\20\3")
        buf.write("\20\5\20\u01af\n\20\3\20\3\20\3\20\3\20\3\20\7\20\u01b6")
        buf.write("\n\20\f\20\16\20\u01b9\13\20\3\20\3\20\7\20\u01bd\n\20")
        buf.write("\f\20\16\20\u01c0\13\20\3\20\3\20\3\20\5\20\u01c5\n\20")
        buf.write("\3\20\3\20\5\20\u01c9\n\20\3\21\3\21\5\21\u01cd\n\21\3")
        buf.write("\21\7\21\u01d0\n\21\f\21\16\21\u01d3\13\21\3\22\6\22\u01d6")
        buf.write("\n\22\r\22\16\22\u01d7\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\5\22\u01e4\n\22\3\23\3\23\5\23\u01e8")
        buf.write("\n\23\3\23\3\23\3\23\5\23\u01ed\n\23\3\23\5\23\u01f0\n")
        buf.write("\23\3\23\5\23\u01f3\n\23\3\23\3\23\3\23\5\23\u01f8\n\23")
        buf.write("\3\23\5\23\u01fb\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\5\23\u0209\n\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\5\23\u0210\n\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\5\23\u0217\n\23\5\23\u0219\n\23\3\24\5\24\u021c\n")
        buf.write("\24\3\24\3\24\3\25\3\25\5\25\u0222\n\25\3\25\3\25\3\25")
        buf.write("\5\25\u0227\n\25\3\25\3\25\3\25\3\25\7\25\u022d\n\25\f")
        buf.write("\25\16\25\u0230\13\25\3\25\3\25\5\25\u0234\n\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25")
        buf.write("\u0241\n\25\f\25\16\25\u0244\13\25\3\25\3\25\3\25\5\25")
        buf.write("\u0249\n\25\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u0251\n")
        buf.write("\26\f\26\16\26\u0254\13\26\3\26\3\26\5\26\u0258\n\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0262\n\26")
        buf.write("\3\26\3\26\7\26\u0266\n\26\f\26\16\26\u0269\13\26\3\26")
        buf.write("\5\26\u026c\n\26\3\26\3\26\3\26\5\26\u0271\n\26\5\26\u0273")
        buf.write("\n\26\3\27\3\27\3\27\3\27\3\30\3\30\5\30\u027b\n\30\3")
        buf.write("\30\3\30\3\30\3\30\5\30\u0281\n\30\3\30\3\30\3\30\5\30")
        buf.write("\u0286\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u028d\n\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u0296\n\30\f\30")
        buf.write("\16\30\u0299\13\30\5\30\u029b\n\30\5\30\u029d\n\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u02a4\n\30\3\30\3\30\5\30\u02a8")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u02af\n\30\3\30\3")
        buf.write("\30\6\30\u02b3\n\30\r\30\16\30\u02b4\3\30\3\30\3\31\3")
        buf.write("\31\5\31\u02bb\n\31\3\31\3\31\3\31\3\31\5\31\u02c1\n\31")
        buf.write("\3\31\3\31\3\31\5\31\u02c6\n\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\7\31\u02cd\n\31\f\31\16\31\u02d0\13\31\3\31\3\31\5")
        buf.write("\31\u02d4\n\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\5\32\u02df\n\32\3\32\3\32\3\32\5\32\u02e4\n\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u02ed\n\32\f\32")
        buf.write("\16\32\u02f0\13\32\3\32\3\32\5\32\u02f4\n\32\3\33\3\33")
        buf.write("\5\33\u02f8\n\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\7\33\u0306\n\33\f\33\16\33\u0309")
        buf.write("\13\33\3\34\3\34\3\34\3\34\3\34\7\34\u0310\n\34\f\34\16")
        buf.write("\34\u0313\13\34\3\34\3\34\5\34\u0317\n\34\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\5\35\u031f\n\35\3\35\3\35\3\35\3\36")
        buf.write("\3\36\3\36\3\36\3\36\7\36\u0329\n\36\f\36\16\36\u032c")
        buf.write("\13\36\3\36\3\36\5\36\u0330\n\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\3\37\5\37\u0338\n\37\3\37\3\37\3\37\3\37\3\37\5\37")
        buf.write("\u033f\n\37\3 \5 \u0342\n \3 \3 \3 \3 \3 \5 \u0349\n ")
        buf.write("\3 \5 \u034c\n \3 \5 \u034f\n \3!\3!\5!\u0353\n!\3!\3")
        buf.write("!\3\"\3\"\3\"\3\"\5\"\u035b\n\"\3\"\3\"\3\"\5\"\u0360")
        buf.write("\n\"\3\"\3\"\3#\3#\3#\3#\3#\3#\5#\u036a\n#\3#\3#\3#\5")
        buf.write("#\u036f\n#\3#\3#\3#\3#\3#\3#\3#\5#\u0378\n#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\7#\u0391\n#\f#\16#\u0394\13#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\5#\u039f\n#\3#\3#\3#\3#\3#\5#\u03a6\n#\3#\3#\3")
        buf.write("#\7#\u03ab\n#\f#\16#\u03ae\13#\3#\5#\u03b1\n#\3#\3#\5")
        buf.write("#\u03b5\n#\3#\5#\u03b8\n#\3#\3#\3#\3#\7#\u03be\n#\f#\16")
        buf.write("#\u03c1\13#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u03cd\n#")
        buf.write("\3#\5#\u03d0\n#\3#\3#\3#\3#\3#\3#\5#\u03d8\n#\3#\3#\3")
        buf.write("#\3#\3#\6#\u03df\n#\r#\16#\u03e0\3#\3#\5#\u03e5\n#\3#")
        buf.write("\3#\3#\5#\u03ea\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0408")
        buf.write("\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0414\n#\3#\3#\3")
        buf.write("#\5#\u0419\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0425\n")
        buf.write("#\3#\3#\3#\3#\5#\u042b\n#\3#\3#\3#\3#\3#\5#\u0432\n#\3")
        buf.write("#\3#\5#\u0436\n#\3#\3#\3#\3#\3#\3#\7#\u043e\n#\f#\16#")
        buf.write("\u0441\13#\5#\u0443\n#\3#\3#\3#\3#\5#\u0449\n#\3#\3#\3")
        buf.write("#\3#\5#\u044f\n#\3#\3#\3#\3#\3#\7#\u0456\n#\f#\16#\u0459")
        buf.write("\13#\5#\u045b\n#\3#\3#\5#\u045f\n#\7#\u0461\n#\f#\16#")
        buf.write("\u0464\13#\3$\3$\3$\3$\3$\3$\5$\u046c\n$\3$\3$\3%\3%\3")
        buf.write("&\5&\u0473\n&\3&\3&\3&\3&\3&\5&\u047a\n&\3&\3&\3&\3&\5")
        buf.write("&\u0480\n&\3&\3&\3&\5&\u0485\n&\3&\3&\3&\3&\7&\u048b\n")
        buf.write("&\f&\16&\u048e\13&\3&\3&\5&\u0492\n&\3&\3&\3&\3&\3&\7")
        buf.write("&\u0499\n&\f&\16&\u049c\13&\3&\3&\3&\3&\3&\3&\7&\u04a4")
        buf.write("\n&\f&\16&\u04a7\13&\3&\3&\7&\u04ab\n&\f&\16&\u04ae\13")
        buf.write("&\3&\5&\u04b1\n&\3&\5&\u04b4\n&\3&\3&\5&\u04b8\n&\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\7\'\u04c0\n\'\f\'\16\'\u04c3\13\'")
        buf.write("\3\'\3\'\3\'\5\'\u04c8\n\'\5\'\u04ca\n\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\5\'\u04d2\n\'\3\'\3\'\3\'\3\'\3\'\5\'\u04d9")
        buf.write("\n\'\3\'\3\'\3\'\7\'\u04de\n\'\f\'\16\'\u04e1\13\'\3\'")
        buf.write("\3\'\5\'\u04e5\n\'\5\'\u04e7\n\'\3(\3(\3(\3(\5(\u04ed")
        buf.write("\n(\3(\3(\3(\3(\3(\3(\3(\5(\u04f6\n(\3)\3)\3)\5)\u04fb")
        buf.write("\n)\3*\3*\3*\3*\3*\5*\u0502\n*\3*\3*\5*\u0506\n*\5*\u0508")
        buf.write("\n*\3+\5+\u050b\n+\3+\3+\3+\3+\7+\u0511\n+\f+\16+\u0514")
        buf.write("\13+\3+\5+\u0517\n+\3+\5+\u051a\n+\3,\3,\3,\3,\5,\u0520")
        buf.write("\n,\7,\u0522\n,\f,\16,\u0525\13,\3-\3-\5-\u0529\n-\3-")
        buf.write("\3-\3-\7-\u052e\n-\f-\16-\u0531\13-\3-\3-\3-\3-\7-\u0537")
        buf.write("\n-\f-\16-\u053a\13-\3-\5-\u053d\n-\5-\u053f\n-\3-\3-")
        buf.write("\5-\u0543\n-\3-\3-\3-\3-\3-\7-\u054a\n-\f-\16-\u054d\13")
        buf.write("-\3-\3-\5-\u0551\n-\5-\u0553\n-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\7-\u055e\n-\f-\16-\u0561\13-\5-\u0563\n-\3-\3-\3")
        buf.write("-\3-\3-\7-\u056a\n-\f-\16-\u056d\13-\3-\3-\3-\3-\3-\3")
        buf.write("-\7-\u0575\n-\f-\16-\u0578\13-\3-\3-\7-\u057c\n-\f-\16")
        buf.write("-\u057f\13-\5-\u0581\n-\3.\3.\3/\5/\u0586\n/\3/\3/\5/")
        buf.write("\u058a\n/\3/\5/\u058d\n/\3\60\5\60\u0590\n\60\3\60\3\60")
        buf.write("\3\60\5\60\u0595\n\60\3\60\3\60\5\60\u0599\n\60\3\60\6")
        buf.write("\60\u059c\n\60\r\60\16\60\u059d\3\60\5\60\u05a1\n\60\3")
        buf.write("\60\5\60\u05a4\n\60\3\61\3\61\3\61\5\61\u05a9\n\61\3\61")
        buf.write("\3\61\5\61\u05ad\n\61\3\61\5\61\u05b0\n\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\5\61\u05b7\n\61\3\61\3\61\3\61\5\61\u05bc")
        buf.write("\n\61\3\61\3\61\3\61\3\61\3\61\7\61\u05c3\n\61\f\61\16")
        buf.write("\61\u05c6\13\61\3\61\3\61\5\61\u05ca\n\61\3\61\5\61\u05cd")
        buf.write("\n\61\3\61\3\61\3\61\3\61\7\61\u05d3\n\61\f\61\16\61\u05d6")
        buf.write("\13\61\3\61\5\61\u05d9\n\61\3\61\3\61\3\61\3\61\3\61\3")
        buf.write("\61\5\61\u05e1\n\61\3\61\5\61\u05e4\n\61\5\61\u05e6\n")
        buf.write("\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u05ef\n\62")
        buf.write("\3\62\5\62\u05f2\n\62\5\62\u05f4\n\62\3\63\3\63\5\63\u05f8")
        buf.write("\n\63\3\63\3\63\5\63\u05fc\n\63\3\63\3\63\5\63\u0600\n")
        buf.write("\63\3\63\3\63\5\63\u0604\n\63\3\63\5\63\u0607\n\63\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u0610\n\64\f\64\16")
        buf.write("\64\u0613\13\64\3\64\3\64\5\64\u0617\n\64\3\65\3\65\5")
        buf.write("\65\u061b\n\65\3\65\3\65\5\65\u061f\n\65\3\66\5\66\u0622")
        buf.write("\n\66\3\66\3\66\3\66\5\66\u0627\n\66\3\66\3\66\3\66\3")
        buf.write("\66\5\66\u062d\n\66\3\66\3\66\3\66\3\66\3\66\5\66\u0634")
        buf.write("\n\66\3\66\3\66\3\66\7\66\u0639\n\66\f\66\16\66\u063c")
        buf.write("\13\66\3\66\3\66\5\66\u0640\n\66\3\67\3\67\3\67\3\67\7")
        buf.write("\67\u0646\n\67\f\67\16\67\u0649\13\67\3\67\3\67\38\58")
        buf.write("\u064e\n8\38\38\38\58\u0653\n8\38\38\38\38\58\u0659\n")
        buf.write("8\38\38\38\38\38\58\u0660\n8\38\38\38\78\u0665\n8\f8\16")
        buf.write("8\u0668\138\38\38\58\u066c\n8\38\58\u066f\n8\38\58\u0672")
        buf.write("\n8\39\39\39\59\u0677\n9\39\39\39\59\u067c\n9\39\39\3")
        buf.write("9\39\39\59\u0683\n9\3:\3:\5:\u0687\n:\3:\3:\5:\u068b\n")
        buf.write(":\3;\3;\3;\3;\3;\3;\3<\3<\5<\u0695\n<\3<\3<\3<\3<\3<\7")
        buf.write("<\u069c\n<\f<\16<\u069f\13<\5<\u06a1\n<\3<\3<\3<\3<\3")
        buf.write("<\7<\u06a8\n<\f<\16<\u06ab\13<\3<\5<\u06ae\n<\3<\3<\3")
        buf.write("=\3=\3=\3=\5=\u06b6\n=\3=\3=\3=\3=\3=\7=\u06bd\n=\f=\16")
        buf.write("=\u06c0\13=\5=\u06c2\n=\3=\3=\3=\3=\3=\7=\u06c9\n=\f=")
        buf.write("\16=\u06cc\13=\5=\u06ce\n=\3=\5=\u06d1\n=\3=\5=\u06d4")
        buf.write("\n=\3>\3>\3>\3>\3>\3>\3>\3>\5>\u06de\n>\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\5?\u06e7\n?\3@\3@\3@\3@\3@\7@\u06ee\n@\f@\16@")
        buf.write("\u06f1\13@\3@\5@\u06f4\n@\3@\3@\3A\3A\3A\5A\u06fb\nA\3")
        buf.write("A\3A\3A\7A\u0700\nA\fA\16A\u0703\13A\3A\5A\u0706\nA\3")
        buf.write("A\3A\5A\u070a\nA\3B\3B\3B\3B\3B\7B\u0711\nB\fB\16B\u0714")
        buf.write("\13B\3B\5B\u0717\nB\3B\3B\5B\u071b\nB\3B\3B\3B\5B\u0720")
        buf.write("\nB\3C\3C\5C\u0724\nC\3C\3C\3C\7C\u0729\nC\fC\16C\u072c")
        buf.write("\13C\3D\3D\3D\3D\3D\7D\u0733\nD\fD\16D\u0736\13D\3E\3")
        buf.write("E\3E\3E\5E\u073c\nE\3F\3F\3F\5F\u0741\nF\3F\5F\u0744\n")
        buf.write("F\3F\3F\5F\u0748\nF\3G\3G\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\5H\u0756\nH\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u0762\n")
        buf.write("I\3J\3J\3J\3J\3J\3J\3J\5J\u076b\nJ\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\5K\u0774\nK\3K\3K\5K\u0778\nK\3K\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\5K\u0782\nK\3K\5K\u0785\nK\3K\3K\3K\3K\3K\3K\3K\5K\u078e")
        buf.write("\nK\3K\3K\3K\3K\3K\3K\3K\5K\u0797\nK\3K\5K\u079a\nK\3")
        buf.write("K\3K\3K\3K\5K\u07a0\nK\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\5K\u07ae\nK\3K\3K\5K\u07b2\nK\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\3K\5K\u07bd\nK\3K\3K\3K\5K\u07c2\nK\3L\3L\3L\3M\3")
        buf.write("M\3M\3N\3N\3N\6N\u07cd\nN\rN\16N\u07ce\3O\3O\3O\6O\u07d4")
        buf.write("\nO\rO\16O\u07d5\3P\3P\3P\3P\3Q\3Q\5Q\u07de\nQ\3Q\3Q\3")
        buf.write("Q\5Q\u07e3\nQ\7Q\u07e5\nQ\fQ\16Q\u07e8\13Q\3R\3R\3S\3")
        buf.write("S\3T\3T\3U\3U\3V\3V\5V\u07f4\nV\3W\3W\3X\3X\3Y\3Y\3Z\3")
        buf.write("Z\3[\3[\3\\\3\\\3]\3]\3^\3^\3_\3_\3`\3`\3a\3a\3b\3b\3")
        buf.write("c\3c\3d\3d\3e\3e\3f\3f\3g\3g\3h\3h\3i\3i\3j\3j\3k\3k\3")
        buf.write("l\3l\3m\3m\3n\3n\3o\3o\3p\3p\3q\3q\3q\3q\3q\3q\3q\5q\u0831")
        buf.write("\nq\3q\2\3Dr\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz")
        buf.write("|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8")
        buf.write("\u00da\u00dc\u00de\u00e0\2!\5\2<<GGTT\4\2\61\61DD\3\2")
        buf.write("\u0086\u0087\4\2\u0093\u0093\u00ac\u00ac\3\2\n\13\4\2")
        buf.write("==\u008e\u008e\4\2::jj\4\2<<TT\7\2\33\33JJSS||\177\177")
        buf.write("\6\2VV\u0085\u0085\u008b\u008b\u0092\u0092\3\2\u00bb\u00bd")
        buf.write("\3\2\u00bf\u00c4\4\2\u00bf\u00c4\u00c6\u00c6\4\2\t\t\16")
        buf.write("\17\3\2\20\23\3\2\24\27\6\2OOcceexx\5\2\33\33JJ\177\177")
        buf.write("\7\2\668jj\u00ad\u00ae\u00c8\u00c8\u00ca\u00cb\4\2\37")
        buf.write("\37@@\5\2\u0081\u0081\u009b\u009b\u00b4\u00b4\4\2\7\7")
        buf.write("ll\3\2\u00b1\u00b2\4\2$$>>\4\2\u0098\u0098\u00a3\u00a3")
        buf.write("\4\2\u00a0\u00a0\u00a7\u00a7\4\2\u00a1\u00a1\u00a8\u00a9")
        buf.write("\4\2\u00a2\u00a2\u00a4\u00a4\4\2\n\fhh\4\2\u00c7\u00c7")
        buf.write("\u00ca\u00ca\3\2\33\u00b5\2\u0951\2\u00e6\3\2\2\2\4\u00eb")
        buf.write("\3\2\2\2\6\u00f1\3\2\2\2\b\u010b\3\2\2\2\n\u0127\3\2\2")
        buf.write("\2\f\u0142\3\2\2\2\16\u014c\3\2\2\2\20\u0154\3\2\2\2\22")
        buf.write("\u015e\3\2\2\2\24\u0162\3\2\2\2\26\u016d\3\2\2\2\30\u0170")
        buf.write("\3\2\2\2\32\u0176\3\2\2\2\34\u0198\3\2\2\2\36\u01a1\3")
        buf.write("\2\2\2 \u01ca\3\2\2\2\"\u01d5\3\2\2\2$\u01e7\3\2\2\2&")
        buf.write("\u021b\3\2\2\2(\u0221\3\2\2\2*\u024a\3\2\2\2,\u0274\3")
        buf.write("\2\2\2.\u0278\3\2\2\2\60\u02b8\3\2\2\2\62\u02d8\3\2\2")
        buf.write("\2\64\u02f5\3\2\2\2\66\u030a\3\2\2\28\u0318\3\2\2\2:\u0323")
        buf.write("\3\2\2\2<\u0337\3\2\2\2>\u0341\3\2\2\2@\u0350\3\2\2\2")
        buf.write("B\u0356\3\2\2\2D\u03e9\3\2\2\2F\u0465\3\2\2\2H\u046f\3")
        buf.write("\2\2\2J\u04b7\3\2\2\2L\u04b9\3\2\2\2N\u04e8\3\2\2\2P\u04fa")
        buf.write("\3\2\2\2R\u04fc\3\2\2\2T\u050a\3\2\2\2V\u051b\3\2\2\2")
        buf.write("X\u0580\3\2\2\2Z\u0582\3\2\2\2\\\u0585\3\2\2\2^\u058f")
        buf.write("\3\2\2\2`\u05e5\3\2\2\2b\u05f3\3\2\2\2d\u0606\3\2\2\2")
        buf.write("f\u0616\3\2\2\2h\u061e\3\2\2\2j\u0621\3\2\2\2l\u0641\3")
        buf.write("\2\2\2n\u064d\3\2\2\2p\u0676\3\2\2\2r\u0684\3\2\2\2t\u068c")
        buf.write("\3\2\2\2v\u0692\3\2\2\2x\u06b1\3\2\2\2z\u06d5\3\2\2\2")
        buf.write("|\u06df\3\2\2\2~\u06e8\3\2\2\2\u0080\u06f7\3\2\2\2\u0082")
        buf.write("\u070b\3\2\2\2\u0084\u0721\3\2\2\2\u0086\u072d\3\2\2\2")
        buf.write("\u0088\u0737\3\2\2\2\u008a\u073d\3\2\2\2\u008c\u0749\3")
        buf.write("\2\2\2\u008e\u0755\3\2\2\2\u0090\u0761\3\2\2\2\u0092\u076a")
        buf.write("\3\2\2\2\u0094\u07c1\3\2\2\2\u0096\u07c3\3\2\2\2\u0098")
        buf.write("\u07c6\3\2\2\2\u009a\u07c9\3\2\2\2\u009c\u07d0\3\2\2\2")
        buf.write("\u009e\u07d7\3\2\2\2\u00a0\u07db\3\2\2\2\u00a2\u07e9\3")
        buf.write("\2\2\2\u00a4\u07eb\3\2\2\2\u00a6\u07ed\3\2\2\2\u00a8\u07ef")
        buf.write("\3\2\2\2\u00aa\u07f3\3\2\2\2\u00ac\u07f5\3\2\2\2\u00ae")
        buf.write("\u07f7\3\2\2\2\u00b0\u07f9\3\2\2\2\u00b2\u07fb\3\2\2\2")
        buf.write("\u00b4\u07fd\3\2\2\2\u00b6\u07ff\3\2\2\2\u00b8\u0801\3")
        buf.write("\2\2\2\u00ba\u0803\3\2\2\2\u00bc\u0805\3\2\2\2\u00be\u0807")
        buf.write("\3\2\2\2\u00c0\u0809\3\2\2\2\u00c2\u080b\3\2\2\2\u00c4")
        buf.write("\u080d\3\2\2\2\u00c6\u080f\3\2\2\2\u00c8\u0811\3\2\2\2")
        buf.write("\u00ca\u0813\3\2\2\2\u00cc\u0815\3\2\2\2\u00ce\u0817\3")
        buf.write("\2\2\2\u00d0\u0819\3\2\2\2\u00d2\u081b\3\2\2\2\u00d4\u081d")
        buf.write("\3\2\2\2\u00d6\u081f\3\2\2\2\u00d8\u0821\3\2\2\2\u00da")
        buf.write("\u0823\3\2\2\2\u00dc\u0825\3\2\2\2\u00de\u0827\3\2\2\2")
        buf.write("\u00e0\u0830\3\2\2\2\u00e2\u00e5\5\6\4\2\u00e3\u00e5\5")
        buf.write("\4\3\2\u00e4\u00e2\3\2\2\2\u00e4\u00e3\3\2\2\2\u00e5\u00e8")
        buf.write("\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7")
        buf.write("\u00e9\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e9\u00ea\7\2\2\3")
        buf.write("\u00ea\3\3\2\2\2\u00eb\u00ec\7\u00cf\2\2\u00ec\u00ed\b")
        buf.write("\3\1\2\u00ed\5\3\2\2\2\u00ee\u00f0\7\3\2\2\u00ef\u00ee")
        buf.write("\3\2\2\2\u00f0\u00f3\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f1")
        buf.write("\u00f2\3\2\2\2\u00f2\u00f4\3\2\2\2\u00f3\u00f1\3\2\2\2")
        buf.write("\u00f4\u00fd\5\b\5\2\u00f5\u00f7\7\3\2\2\u00f6\u00f5\3")
        buf.write("\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f8\u00f9")
        buf.write("\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fc\5\b\5\2\u00fb")
        buf.write("\u00f6\3\2\2\2\u00fc\u00ff\3\2\2\2\u00fd\u00fb\3\2\2\2")
        buf.write("\u00fd\u00fe\3\2\2\2\u00fe\u0103\3\2\2\2\u00ff\u00fd\3")
        buf.write("\2\2\2\u0100\u0102\7\3\2\2\u0101\u0100\3\2\2\2\u0102\u0105")
        buf.write("\3\2\2\2\u0103\u0101\3\2\2\2\u0103\u0104\3\2\2\2\u0104")
        buf.write("\7\3\2\2\2\u0105\u0103\3\2\2\2\u0106\u0109\7I\2\2\u0107")
        buf.write("\u0108\7t\2\2\u0108\u010a\7q\2\2\u0109\u0107\3\2\2\2\u0109")
        buf.write("\u010a\3\2\2\2\u010a\u010c\3\2\2\2\u010b\u0106\3\2\2\2")
        buf.write("\u010b\u010c\3\2\2\2\u010c\u0125\3\2\2\2\u010d\u0126\5")
        buf.write("\n\6\2\u010e\u0126\5\f\7\2\u010f\u0126\5\16\b\2\u0110")
        buf.write("\u0126\5\20\t\2\u0111\u0126\5\22\n\2\u0112\u0126\5\32")
        buf.write("\16\2\u0113\u0126\5\36\20\2\u0114\u0126\5.\30\2\u0115")
        buf.write("\u0126\5\60\31\2\u0116\u0126\5\62\32\2\u0117\u0126\5<")
        buf.write("\37\2\u0118\u0126\5> \2\u0119\u0126\5@!\2\u011a\u0126")
        buf.write("\5B\"\2\u011b\u0126\5J&\2\u011c\u0126\5N(\2\u011d\u0126")
        buf.write("\5R*\2\u011e\u0126\5\30\r\2\u011f\u0126\5\24\13\2\u0120")
        buf.write("\u0126\5\26\f\2\u0121\u0126\5T+\2\u0122\u0126\5j\66\2")
        buf.write("\u0123\u0126\5n8\2\u0124\u0126\5r:\2\u0125\u010d\3\2\2")
        buf.write("\2\u0125\u010e\3\2\2\2\u0125\u010f\3\2\2\2\u0125\u0110")
        buf.write("\3\2\2\2\u0125\u0111\3\2\2\2\u0125\u0112\3\2\2\2\u0125")
        buf.write("\u0113\3\2\2\2\u0125\u0114\3\2\2\2\u0125\u0115\3\2\2\2")
        buf.write("\u0125\u0116\3\2\2\2\u0125\u0117\3\2\2\2\u0125\u0118\3")
        buf.write("\2\2\2\u0125\u0119\3\2\2\2\u0125\u011a\3\2\2\2\u0125\u011b")
        buf.write("\3\2\2\2\u0125\u011c\3\2\2\2\u0125\u011d\3\2\2\2\u0125")
        buf.write("\u011e\3\2\2\2\u0125\u011f\3\2\2\2\u0125\u0120\3\2\2\2")
        buf.write("\u0125\u0121\3\2\2\2\u0125\u0122\3\2\2\2\u0125\u0123\3")
        buf.write("\2\2\2\u0125\u0124\3\2\2\2\u0126\t\3\2\2\2\u0127\u0128")
        buf.write("\7 \2\2\u0128\u012c\7\u0085\2\2\u0129\u012a\5\u00b4[\2")
        buf.write("\u012a\u012b\7\4\2\2\u012b\u012d\3\2\2\2\u012c\u0129\3")
        buf.write("\2\2\2\u012c\u012d\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0140")
        buf.write("\5\u00b6\\\2\u012f\u0139\7{\2\2\u0130\u0131\7\u0089\2")
        buf.write("\2\u0131\u013a\5\u00ba^\2\u0132\u0134\7\60\2\2\u0133\u0132")
        buf.write("\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0135\3\2\2\2\u0135")
        buf.write("\u0136\5\u00bc_\2\u0136\u0137\7\u0089\2\2\u0137\u0138")
        buf.write("\5\u00bc_\2\u0138\u013a\3\2\2\2\u0139\u0130\3\2\2\2\u0139")
        buf.write("\u0133\3\2\2\2\u013a\u0141\3\2\2\2\u013b\u013d\7\35\2")
        buf.write("\2\u013c\u013e\7\60\2\2\u013d\u013c\3\2\2\2\u013d\u013e")
        buf.write("\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0141\5 \21\2\u0140")
        buf.write("\u012f\3\2\2\2\u0140\u013b\3\2\2\2\u0141\13\3\2\2\2\u0142")
        buf.write("\u014a\7!\2\2\u0143\u014b\5\u00b4[\2\u0144\u0145\5\u00b4")
        buf.write("[\2\u0145\u0146\7\4\2\2\u0146\u0148\3\2\2\2\u0147\u0144")
        buf.write("\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u0149\3\2\2\2\u0149")
        buf.write("\u014b\5\u00b8]\2\u014a\u0143\3\2\2\2\u014a\u0147\3\2")
        buf.write("\2\2\u014a\u014b\3\2\2\2\u014b\r\3\2\2\2\u014c\u014e\7")
        buf.write("%\2\2\u014d\u014f\79\2\2\u014e\u014d\3\2\2\2\u014e\u014f")
        buf.write("\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0151\5D#\2\u0151\u0152")
        buf.write("\7#\2\2\u0152\u0153\5\u00b4[\2\u0153\17\3\2\2\2\u0154")
        buf.write("\u0156\7(\2\2\u0155\u0157\t\2\2\2\u0156\u0155\3\2\2\2")
        buf.write("\u0156\u0157\3\2\2\2\u0157\u015c\3\2\2\2\u0158\u015a\7")
        buf.write("\u008a\2\2\u0159\u015b\5\u00d0i\2\u015a\u0159\3\2\2\2")
        buf.write("\u015a\u015b\3\2\2\2\u015b\u015d\3\2\2\2\u015c\u0158\3")
        buf.write("\2\2\2\u015c\u015d\3\2\2\2\u015d\21\3\2\2\2\u015e\u0160")
        buf.write("\t\3\2\2\u015f\u0161\7\u008a\2\2\u0160\u015f\3\2\2\2\u0160")
        buf.write("\u0161\3\2\2\2\u0161\23\3\2\2\2\u0162\u0164\7\177\2\2")
        buf.write("\u0163\u0165\7\u008a\2\2\u0164\u0163\3\2\2\2\u0164\u0165")
        buf.write("\3\2\2\2\u0165\u016b\3\2\2\2\u0166\u0168\7\u0089\2\2\u0167")
        buf.write("\u0169\7\u0082\2\2\u0168\u0167\3\2\2\2\u0168\u0169\3\2")
        buf.write("\2\2\u0169\u016a\3\2\2\2\u016a\u016c\5\u00ccg\2\u016b")
        buf.write("\u0166\3\2\2\2\u016b\u016c\3\2\2\2\u016c\25\3\2\2\2\u016d")
        buf.write("\u016e\7\u0082\2\2\u016e\u016f\5\u00ccg\2\u016f\27\3\2")
        buf.write("\2\2\u0170\u0172\7z\2\2\u0171\u0173\7\u0082\2\2\u0172")
        buf.write("\u0171\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0174\3\2\2\2")
        buf.write("\u0174\u0175\5\u00ccg\2\u0175\31\3\2\2\2\u0176\u0178\7")
        buf.write("\64\2\2\u0177\u0179\7\u008d\2\2\u0178\u0177\3\2\2\2\u0178")
        buf.write("\u0179\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017e\7V\2\2")
        buf.write("\u017b\u017c\7R\2\2\u017c\u017d\7h\2\2\u017d\u017f\7H")
        buf.write("\2\2\u017e\u017b\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0183")
        buf.write("\3\2\2\2\u0180\u0181\5\u00b4[\2\u0181\u0182\7\4\2\2\u0182")
        buf.write("\u0184\3\2\2\2\u0183\u0180\3\2\2\2\u0183\u0184\3\2\2\2")
        buf.write("\u0184\u0185\3\2\2\2\u0185\u0186\5\u00c2b\2\u0186\u0187")
        buf.write("\7m\2\2\u0187\u0188\5\u00b6\\\2\u0188\u0189\7\5\2\2\u0189")
        buf.write("\u018e\5\34\17\2\u018a\u018b\7\7\2\2\u018b\u018d\5\34")
        buf.write("\17\2\u018c\u018a\3\2\2\2\u018d\u0190\3\2\2\2\u018e\u018c")
        buf.write("\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0191\3\2\2\2\u0190")
        buf.write("\u018e\3\2\2\2\u0191\u0194\7\6\2\2\u0192\u0193\7\u0095")
        buf.write("\2\2\u0193\u0195\5D#\2\u0194\u0192\3\2\2\2\u0194\u0195")
        buf.write("\3\2\2\2\u0195\33\3\2\2\2\u0196\u0199\5\u00bc_\2\u0197")
        buf.write("\u0199\5D#\2\u0198\u0196\3\2\2\2\u0198\u0197\3\2\2\2\u0199")
        buf.write("\u019c\3\2\2\2\u019a\u019b\7/\2\2\u019b\u019d\5\u00be")
        buf.write("`\2\u019c\u019a\3\2\2\2\u019c\u019d\3\2\2\2\u019d\u019f")
        buf.write("\3\2\2\2\u019e\u01a0\5\u008cG\2\u019f\u019e\3\2\2\2\u019f")
        buf.write("\u01a0\3\2\2\2\u01a0\35\3\2\2\2\u01a1\u01a3\7\64\2\2\u01a2")
        buf.write("\u01a4\t\4\2\2\u01a3\u01a2\3\2\2\2\u01a3\u01a4\3\2\2\2")
        buf.write("\u01a4\u01a5\3\2\2\2\u01a5\u01a9\7\u0085\2\2\u01a6\u01a7")
        buf.write("\7R\2\2\u01a7\u01a8\7h\2\2\u01a8\u01aa\7H\2\2\u01a9\u01a6")
        buf.write("\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01ae\3\2\2\2\u01ab")
        buf.write("\u01ac\5\u00b4[\2\u01ac\u01ad\7\4\2\2\u01ad\u01af\3\2")
        buf.write("\2\2\u01ae\u01ab\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0")
        buf.write("\3\2\2\2\u01b0\u01c8\5\u00b6\\\2\u01b1\u01b2\7\5\2\2\u01b2")
        buf.write("\u01b7\5 \21\2\u01b3\u01b4\7\7\2\2\u01b4\u01b6\5 \21\2")
        buf.write("\u01b5\u01b3\3\2\2\2\u01b6\u01b9\3\2\2\2\u01b7\u01b5\3")
        buf.write("\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01be\3\2\2\2\u01b9\u01b7")
        buf.write("\3\2\2\2\u01ba\u01bb\7\7\2\2\u01bb\u01bd\5(\25\2\u01bc")
        buf.write("\u01ba\3\2\2\2\u01bd\u01c0\3\2\2\2\u01be\u01bc\3\2\2\2")
        buf.write("\u01be\u01bf\3\2\2\2\u01bf\u01c1\3\2\2\2\u01c0\u01be\3")
        buf.write("\2\2\2\u01c1\u01c4\7\6\2\2\u01c2\u01c3\7\u0097\2\2\u01c3")
        buf.write("\u01c5\7\u00c7\2\2\u01c4\u01c2\3\2\2\2\u01c4\u01c5\3\2")
        buf.write("\2\2\u01c5\u01c9\3\2\2\2\u01c6\u01c7\7#\2\2\u01c7\u01c9")
        buf.write("\5T+\2\u01c8\u01b1\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c9\37")
        buf.write("\3\2\2\2\u01ca\u01cc\5\u00bc_\2\u01cb\u01cd\5\"\22\2\u01cc")
        buf.write("\u01cb\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01d1\3\2\2\2")
        buf.write("\u01ce\u01d0\5$\23\2\u01cf\u01ce\3\2\2\2\u01d0\u01d3\3")
        buf.write("\2\2\2\u01d1\u01cf\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2!")
        buf.write("\3\2\2\2\u01d3\u01d1\3\2\2\2\u01d4\u01d6\5\u00b0Y\2\u01d5")
        buf.write("\u01d4\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01d5\3\2\2\2")
        buf.write("\u01d7\u01d8\3\2\2\2\u01d8\u01e3\3\2\2\2\u01d9\u01da\7")
        buf.write("\5\2\2\u01da\u01db\5&\24\2\u01db\u01dc\7\6\2\2\u01dc\u01e4")
        buf.write("\3\2\2\2\u01dd\u01de\7\5\2\2\u01de\u01df\5&\24\2\u01df")
        buf.write("\u01e0\7\7\2\2\u01e0\u01e1\5&\24\2\u01e1\u01e2\7\6\2\2")
        buf.write("\u01e2\u01e4\3\2\2\2\u01e3\u01d9\3\2\2\2\u01e3\u01dd\3")
        buf.write("\2\2\2\u01e3\u01e4\3\2\2\2\u01e4#\3\2\2\2\u01e5\u01e6")
        buf.write("\7\63\2\2\u01e6\u01e8\5\u00b0Y\2\u01e7\u01e5\3\2\2\2\u01e7")
        buf.write("\u01e8\3\2\2\2\u01e8\u0218\3\2\2\2\u01e9\u01ea\7s\2\2")
        buf.write("\u01ea\u01ec\7a\2\2\u01eb\u01ed\5\u008cG\2\u01ec\u01eb")
        buf.write("\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01ef\3\2\2\2\u01ee")
        buf.write("\u01f0\5,\27\2\u01ef\u01ee\3\2\2\2\u01ef\u01f0\3\2\2\2")
        buf.write("\u01f0\u01f2\3\2\2\2\u01f1\u01f3\7&\2\2\u01f2\u01f1\3")
        buf.write("\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\u0219\3\2\2\2\u01f4\u01f5")
        buf.write("\7h\2\2\u01f5\u01f8\7j\2\2\u01f6\u01f8\7\u008d\2\2\u01f7")
        buf.write("\u01f4\3\2\2\2\u01f7\u01f6\3\2\2\2\u01f8\u01fa\3\2\2\2")
        buf.write("\u01f9\u01fb\5,\27\2\u01fa\u01f9\3\2\2\2\u01fa\u01fb\3")
        buf.write("\2\2\2\u01fb\u0219\3\2\2\2\u01fc\u01fd\7.\2\2\u01fd\u01fe")
        buf.write("\7\5\2\2\u01fe\u01ff\5D#\2\u01ff\u0200\7\6\2\2\u0200\u0219")
        buf.write("\3\2\2\2\u0201\u0208\7:\2\2\u0202\u0209\5&\24\2\u0203")
        buf.write("\u0209\5H%\2\u0204\u0205\7\5\2\2\u0205\u0206\5D#\2\u0206")
        buf.write("\u0207\7\6\2\2\u0207\u0209\3\2\2\2\u0208\u0202\3\2\2\2")
        buf.write("\u0208\u0203\3\2\2\2\u0208\u0204\3\2\2\2\u0209\u0219\3")
        buf.write("\2\2\2\u020a\u020b\7/\2\2\u020b\u0219\5\u00be`\2\u020c")
        buf.write("\u0219\5*\26\2\u020d\u020e\7\u00aa\2\2\u020e\u0210\7\u00ab")
        buf.write("\2\2\u020f\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0211")
        buf.write("\3\2\2\2\u0211\u0212\7#\2\2\u0212\u0213\7\5\2\2\u0213")
        buf.write("\u0214\5D#\2\u0214\u0216\7\6\2\2\u0215\u0217\t\5\2\2\u0216")
        buf.write("\u0215\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0219\3\2\2\2")
        buf.write("\u0218\u01e9\3\2\2\2\u0218\u01f7\3\2\2\2\u0218\u01fc\3")
        buf.write("\2\2\2\u0218\u0201\3\2\2\2\u0218\u020a\3\2\2\2\u0218\u020c")
        buf.write("\3\2\2\2\u0218\u020f\3\2\2\2\u0219%\3\2\2\2\u021a\u021c")
        buf.write("\t\6\2\2\u021b\u021a\3\2\2\2\u021b\u021c\3\2\2\2\u021c")
        buf.write("\u021d\3\2\2\2\u021d\u021e\7\u00c8\2\2\u021e\'\3\2\2\2")
        buf.write("\u021f\u0220\7\63\2\2\u0220\u0222\5\u00b0Y\2\u0221\u021f")
        buf.write("\3\2\2\2\u0221\u0222\3\2\2\2\u0222\u0248\3\2\2\2\u0223")
        buf.write("\u0224\7s\2\2\u0224\u0227\7a\2\2\u0225\u0227\7\u008d\2")
        buf.write("\2\u0226\u0223\3\2\2\2\u0226\u0225\3\2\2\2\u0227\u0228")
        buf.write("\3\2\2\2\u0228\u0229\7\5\2\2\u0229\u022e\5\34\17\2\u022a")
        buf.write("\u022b\7\7\2\2\u022b\u022d\5\34\17\2\u022c\u022a\3\2\2")
        buf.write("\2\u022d\u0230\3\2\2\2\u022e\u022c\3\2\2\2\u022e\u022f")
        buf.write("\3\2\2\2\u022f\u0231\3\2\2\2\u0230\u022e\3\2\2\2\u0231")
        buf.write("\u0233\7\6\2\2\u0232\u0234\5,\27\2\u0233\u0232\3\2\2\2")
        buf.write("\u0233\u0234\3\2\2\2\u0234\u0249\3\2\2\2\u0235\u0236\7")
        buf.write(".\2\2\u0236\u0237\7\5\2\2\u0237\u0238\5D#\2\u0238\u0239")
        buf.write("\7\6\2\2\u0239\u0249\3\2\2\2\u023a\u023b\7L\2\2\u023b")
        buf.write("\u023c\7a\2\2\u023c\u023d\7\5\2\2\u023d\u0242\5\u00bc")
        buf.write("_\2\u023e\u023f\7\7\2\2\u023f\u0241\5\u00bc_\2\u0240\u023e")
        buf.write("\3\2\2\2\u0241\u0244\3\2\2\2\u0242\u0240\3\2\2\2\u0242")
        buf.write("\u0243\3\2\2\2\u0243\u0245\3\2\2\2\u0244\u0242\3\2\2\2")
        buf.write("\u0245\u0246\7\6\2\2\u0246\u0247\5*\26\2\u0247\u0249\3")
        buf.write("\2\2\2\u0248\u0226\3\2\2\2\u0248\u0235\3\2\2\2\u0248\u023a")
        buf.write("\3\2\2\2\u0249)\3\2\2\2\u024a\u024b\7w\2\2\u024b\u0257")
        buf.write("\5\u00c0a\2\u024c\u024d\7\5\2\2\u024d\u0252\5\u00bc_\2")
        buf.write("\u024e\u024f\7\7\2\2\u024f\u0251\5\u00bc_\2\u0250\u024e")
        buf.write("\3\2\2\2\u0251\u0254\3\2\2\2\u0252\u0250\3\2\2\2\u0252")
        buf.write("\u0253\3\2\2\2\u0253\u0255\3\2\2\2\u0254\u0252\3\2\2\2")
        buf.write("\u0255\u0256\7\6\2\2\u0256\u0258\3\2\2\2\u0257\u024c\3")
        buf.write("\2\2\2\u0257\u0258\3\2\2\2\u0258\u0267\3\2\2\2\u0259\u025a")
        buf.write("\7m\2\2\u025a\u0261\t\7\2\2\u025b\u025c\7\u0084\2\2\u025c")
        buf.write("\u0262\t\b\2\2\u025d\u0262\7+\2\2\u025e\u0262\7}\2\2\u025f")
        buf.write("\u0260\7g\2\2\u0260\u0262\7\34\2\2\u0261\u025b\3\2\2\2")
        buf.write("\u0261\u025d\3\2\2\2\u0261\u025e\3\2\2\2\u0261\u025f\3")
        buf.write("\2\2\2\u0262\u0266\3\2\2\2\u0263\u0264\7e\2\2\u0264\u0266")
        buf.write("\5\u00b0Y\2\u0265\u0259\3\2\2\2\u0265\u0263\3\2\2\2\u0266")
        buf.write("\u0269\3\2\2\2\u0267\u0265\3\2\2\2\u0267\u0268\3\2\2\2")
        buf.write("\u0268\u0272\3\2\2\2\u0269\u0267\3\2\2\2\u026a\u026c\7")
        buf.write("h\2\2\u026b\u026a\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026d")
        buf.write("\3\2\2\2\u026d\u0270\7;\2\2\u026e\u026f\7X\2\2\u026f\u0271")
        buf.write("\t\t\2\2\u0270\u026e\3\2\2\2\u0270\u0271\3\2\2\2\u0271")
        buf.write("\u0273\3\2\2\2\u0272\u026b\3\2\2\2\u0272\u0273\3\2\2\2")
        buf.write("\u0273+\3\2\2\2\u0274\u0275\7m\2\2\u0275\u0276\7\62\2")
        buf.write("\2\u0276\u0277\t\n\2\2\u0277-\3\2\2\2\u0278\u027a\7\64")
        buf.write("\2\2\u0279\u027b\t\4\2\2\u027a\u0279\3\2\2\2\u027a\u027b")
        buf.write("\3\2\2\2\u027b\u027c\3\2\2\2\u027c\u0280\7\u008b\2\2\u027d")
        buf.write("\u027e\7R\2\2\u027e\u027f\7h\2\2\u027f\u0281\7H\2\2\u0280")
        buf.write("\u027d\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0285\3\2\2\2")
        buf.write("\u0282\u0283\5\u00b4[\2\u0283\u0284\7\4\2\2\u0284\u0286")
        buf.write("\3\2\2\2\u0285\u0282\3\2\2\2\u0285\u0286\3\2\2\2\u0286")
        buf.write("\u0287\3\2\2\2\u0287\u028c\5\u00c4c\2\u0288\u028d\7\'")
        buf.write("\2\2\u0289\u028d\7\36\2\2\u028a\u028b\7[\2\2\u028b\u028d")
        buf.write("\7k\2\2\u028c\u0288\3\2\2\2\u028c\u0289\3\2\2\2\u028c")
        buf.write("\u028a\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u029c\3\2\2\2")
        buf.write("\u028e\u029d\7=\2\2\u028f\u029d\7Z\2\2\u0290\u029a\7\u008e")
        buf.write("\2\2\u0291\u0292\7k\2\2\u0292\u0297\5\u00bc_\2\u0293\u0294")
        buf.write("\7\7\2\2\u0294\u0296\5\u00bc_\2\u0295\u0293\3\2\2\2\u0296")
        buf.write("\u0299\3\2\2\2\u0297\u0295\3\2\2\2\u0297\u0298\3\2\2\2")
        buf.write("\u0298\u029b\3\2\2\2\u0299\u0297\3\2\2\2\u029a\u0291\3")
        buf.write("\2\2\2\u029a\u029b\3\2\2\2\u029b\u029d\3\2\2\2\u029c\u028e")
        buf.write("\3\2\2\2\u029c\u028f\3\2\2\2\u029c\u0290\3\2\2\2\u029d")
        buf.write("\u029e\3\2\2\2\u029e\u029f\7m\2\2\u029f\u02a3\5\u00b6")
        buf.write("\\\2\u02a0\u02a1\7K\2\2\u02a1\u02a2\7B\2\2\u02a2\u02a4")
        buf.write("\7\u0080\2\2\u02a3\u02a0\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4")
        buf.write("\u02a7\3\2\2\2\u02a5\u02a6\7\u0094\2\2\u02a6\u02a8\5D")
        buf.write("#\2\u02a7\u02a5\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02a9")
        buf.write("\3\2\2\2\u02a9\u02b2\7(\2\2\u02aa\u02af\5j\66\2\u02ab")
        buf.write("\u02af\5J&\2\u02ac\u02af\5<\37\2\u02ad\u02af\5T+\2\u02ae")
        buf.write("\u02aa\3\2\2\2\u02ae\u02ab\3\2\2\2\u02ae\u02ac\3\2\2\2")
        buf.write("\u02ae\u02ad\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1\7")
        buf.write("\3\2\2\u02b1\u02b3\3\2\2\2\u02b2\u02ae\3\2\2\2\u02b3\u02b4")
        buf.write("\3\2\2\2\u02b4\u02b2\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5")
        buf.write("\u02b6\3\2\2\2\u02b6\u02b7\7D\2\2\u02b7/\3\2\2\2\u02b8")
        buf.write("\u02ba\7\64\2\2\u02b9\u02bb\t\4\2\2\u02ba\u02b9\3\2\2")
        buf.write("\2\u02ba\u02bb\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02c0")
        buf.write("\7\u0092\2\2\u02bd\u02be\7R\2\2\u02be\u02bf\7h\2\2\u02bf")
        buf.write("\u02c1\7H\2\2\u02c0\u02bd\3\2\2\2\u02c0\u02c1\3\2\2\2")
        buf.write("\u02c1\u02c5\3\2\2\2\u02c2\u02c3\5\u00b4[\2\u02c3\u02c4")
        buf.write("\7\4\2\2\u02c4\u02c6\3\2\2\2\u02c5\u02c2\3\2\2\2\u02c5")
        buf.write("\u02c6\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02d3\5\u00c6")
        buf.write("d\2\u02c8\u02c9\7\5\2\2\u02c9\u02ce\5\u00bc_\2\u02ca\u02cb")
        buf.write("\7\7\2\2\u02cb\u02cd\5\u00bc_\2\u02cc\u02ca\3\2\2\2\u02cd")
        buf.write("\u02d0\3\2\2\2\u02ce\u02cc\3\2\2\2\u02ce\u02cf\3\2\2\2")
        buf.write("\u02cf\u02d1\3\2\2\2\u02d0\u02ce\3\2\2\2\u02d1\u02d2\7")
        buf.write("\6\2\2\u02d2\u02d4\3\2\2\2\u02d3\u02c8\3\2\2\2\u02d3\u02d4")
        buf.write("\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d6\7#\2\2\u02d6")
        buf.write("\u02d7\5T+\2\u02d7\61\3\2\2\2\u02d8\u02d9\7\64\2\2\u02d9")
        buf.write("\u02da\7\u0093\2\2\u02da\u02de\7\u0085\2\2\u02db\u02dc")
        buf.write("\7R\2\2\u02dc\u02dd\7h\2\2\u02dd\u02df\7H\2\2\u02de\u02db")
        buf.write("\3\2\2\2\u02de\u02df\3\2\2\2\u02df\u02e3\3\2\2\2\u02e0")
        buf.write("\u02e1\5\u00b4[\2\u02e1\u02e2\7\4\2\2\u02e2\u02e4\3\2")
        buf.write("\2\2\u02e3\u02e0\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e5")
        buf.write("\3\2\2\2\u02e5\u02e6\5\u00b6\\\2\u02e6\u02e7\7\u008f\2")
        buf.write("\2\u02e7\u02f3\5\u00c8e\2\u02e8\u02e9\7\5\2\2\u02e9\u02ee")
        buf.write("\5\u00aaV\2\u02ea\u02eb\7\7\2\2\u02eb\u02ed\5\u00aaV\2")
        buf.write("\u02ec\u02ea\3\2\2\2\u02ed\u02f0\3\2\2\2\u02ee\u02ec\3")
        buf.write("\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u02f1\3\2\2\2\u02f0\u02ee")
        buf.write("\3\2\2\2\u02f1\u02f2\7\6\2\2\u02f2\u02f4\3\2\2\2\u02f3")
        buf.write("\u02e8\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\63\3\2\2\2\u02f5")
        buf.write("\u02f7\7\u0096\2\2\u02f6\u02f8\7v\2\2\u02f7\u02f6\3\2")
        buf.write("\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa")
        buf.write("\5\66\34\2\u02fa\u02fb\7#\2\2\u02fb\u02fc\7\5\2\2\u02fc")
        buf.write("\u02fd\5T+\2\u02fd\u0307\7\6\2\2\u02fe\u02ff\7\7\2\2\u02ff")
        buf.write("\u0300\5\66\34\2\u0300\u0301\7#\2\2\u0301\u0302\7\5\2")
        buf.write("\2\u0302\u0303\5T+\2\u0303\u0304\7\6\2\2\u0304\u0306\3")
        buf.write("\2\2\2\u0305\u02fe\3\2\2\2\u0306\u0309\3\2\2\2\u0307\u0305")
        buf.write("\3\2\2\2\u0307\u0308\3\2\2\2\u0308\65\3\2\2\2\u0309\u0307")
        buf.write("\3\2\2\2\u030a\u0316\5\u00b6\\\2\u030b\u030c\7\5\2\2\u030c")
        buf.write("\u0311\5\u00bc_\2\u030d\u030e\7\7\2\2\u030e\u0310\5\u00bc")
        buf.write("_\2\u030f\u030d\3\2\2\2\u0310\u0313\3\2\2\2\u0311\u030f")
        buf.write("\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0314\3\2\2\2\u0313")
        buf.write("\u0311\3\2\2\2\u0314\u0315\7\6\2\2\u0315\u0317\3\2\2\2")
        buf.write("\u0316\u030b\3\2\2\2\u0316\u0317\3\2\2\2\u0317\67\3\2")
        buf.write("\2\2\u0318\u0319\5\66\34\2\u0319\u031a\7#\2\2\u031a\u031b")
        buf.write("\7\5\2\2\u031b\u031c\5\u00a2R\2\u031c\u031e\7\u008c\2")
        buf.write("\2\u031d\u031f\7\37\2\2\u031e\u031d\3\2\2\2\u031e\u031f")
        buf.write("\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0321\5\u00a4S\2\u0321")
        buf.write("\u0322\7\6\2\2\u03229\3\2\2\2\u0323\u032f\5\u00b6\\\2")
        buf.write("\u0324\u0325\7\5\2\2\u0325\u032a\5\u00bc_\2\u0326\u0327")
        buf.write("\7\7\2\2\u0327\u0329\5\u00bc_\2\u0328\u0326\3\2\2\2\u0329")
        buf.write("\u032c\3\2\2\2\u032a\u0328\3\2\2\2\u032a\u032b\3\2\2\2")
        buf.write("\u032b\u032d\3\2\2\2\u032c\u032a\3\2\2\2\u032d\u032e\7")
        buf.write("\6\2\2\u032e\u0330\3\2\2\2\u032f\u0324\3\2\2\2\u032f\u0330")
        buf.write("\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0332\7#\2\2\u0332")
        buf.write("\u0333\7\5\2\2\u0333\u0334\5T+\2\u0334\u0335\7\6\2\2\u0335")
        buf.write(";\3\2\2\2\u0336\u0338\5\64\33\2\u0337\u0336\3\2\2\2\u0337")
        buf.write("\u0338\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033a\7=\2\2")
        buf.write("\u033a\u033b\7M\2\2\u033b\u033e\5p9\2\u033c\u033d\7\u0095")
        buf.write("\2\2\u033d\u033f\5D#\2\u033e\u033c\3\2\2\2\u033e\u033f")
        buf.write("\3\2\2\2\u033f=\3\2\2\2\u0340\u0342\5\64\33\2\u0341\u0340")
        buf.write("\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0343\3\2\2\2\u0343")
        buf.write("\u0344\7=\2\2\u0344\u0345\7M\2\2\u0345\u0348\5p9\2\u0346")
        buf.write("\u0347\7\u0095\2\2\u0347\u0349\5D#\2\u0348\u0346\3\2\2")
        buf.write("\2\u0348\u0349\3\2\2\2\u0349\u034e\3\2\2\2\u034a\u034c")
        buf.write("\5\u0086D\2\u034b\u034a\3\2\2\2\u034b\u034c\3\2\2\2\u034c")
        buf.write("\u034d\3\2\2\2\u034d\u034f\5\u0088E\2\u034e\u034b\3\2")
        buf.write("\2\2\u034e\u034f\3\2\2\2\u034f?\3\2\2\2\u0350\u0352\7")
        buf.write("?\2\2\u0351\u0353\79\2\2\u0352\u0351\3\2\2\2\u0352\u0353")
        buf.write("\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0355\5\u00b4[\2\u0355")
        buf.write("A\3\2\2\2\u0356\u0357\7A\2\2\u0357\u035a\t\13\2\2\u0358")
        buf.write("\u0359\7R\2\2\u0359\u035b\7H\2\2\u035a\u0358\3\2\2\2\u035a")
        buf.write("\u035b\3\2\2\2\u035b\u035f\3\2\2\2\u035c\u035d\5\u00b4")
        buf.write("[\2\u035d\u035e\7\4\2\2\u035e\u0360\3\2\2\2\u035f\u035c")
        buf.write("\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u0361\3\2\2\2\u0361")
        buf.write("\u0362\5\u00e0q\2\u0362C\3\2\2\2\u0363\u0364\b#\1\2\u0364")
        buf.write("\u03ea\5H%\2\u0365\u03ea\7\u00c9\2\2\u0366\u0367\5\u00b4")
        buf.write("[\2\u0367\u0368\7\4\2\2\u0368\u036a\3\2\2\2\u0369\u0366")
        buf.write("\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036b\3\2\2\2\u036b")
        buf.write("\u036c\5\u00b6\\\2\u036c\u036d\7\4\2\2\u036d\u036f\3\2")
        buf.write("\2\2\u036e\u0369\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0370")
        buf.write("\3\2\2\2\u0370\u03ea\5\u00bc_\2\u0371\u0372\5\u00a6T\2")
        buf.write("\u0372\u0373\5D#\34\u0373\u03ea\3\2\2\2\u0374\u0375\7")
        buf.write("\u00ba\2\2\u0375\u0377\7\5\2\2\u0376\u0378\t\f\2\2\u0377")
        buf.write("\u0376\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u0379\3\2\2\2")
        buf.write("\u0379\u037a\7M\2\2\u037a\u037b\5D#\2\u037b\u037c\7\6")
        buf.write("\2\2\u037c\u03ea\3\2\2\2\u037d\u037e\7\u00be\2\2\u037e")
        buf.write("\u037f\7\5\2\2\u037f\u0380\t\r\2\2\u0380\u0381\7M\2\2")
        buf.write("\u0381\u0382\5D#\2\u0382\u0383\7\6\2\2\u0383\u03ea\3\2")
        buf.write("\2\2\u0384\u0385\7\u00c5\2\2\u0385\u0386\7\5\2\2\u0386")
        buf.write("\u0387\5D#\2\u0387\u0388\7U\2\2\u0388\u0389\5D#\2\u0389")
        buf.write("\u038a\7\6\2\2\u038a\u03ea\3\2\2\2\u038b\u038c\t\16\2")
        buf.write("\2\u038c\u038d\7\5\2\2\u038d\u0392\5D#\2\u038e\u038f\7")
        buf.write("\7\2\2\u038f\u0391\5D#\2\u0390\u038e\3\2\2\2\u0391\u0394")
        buf.write("\3\2\2\2\u0392\u0390\3\2\2\2\u0392\u0393\3\2\2\2\u0393")
        buf.write("\u0395\3\2\2\2\u0394\u0392\3\2\2\2\u0395\u0396\7\6\2\2")
        buf.write("\u0396\u03ea\3\2\2\2\u0397\u0398\7\u00c6\2\2\u0398\u0399")
        buf.write("\7\5\2\2\u0399\u039a\5D#\2\u039a\u039b\7M\2\2\u039b\u039e")
        buf.write("\5D#\2\u039c\u039d\7K\2\2\u039d\u039f\5D#\2\u039e\u039c")
        buf.write("\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0")
        buf.write("\u03a1\7\6\2\2\u03a1\u03ea\3\2\2\2\u03a2\u03a3\5\u00b2")
        buf.write("Z\2\u03a3\u03b0\7\5\2\2\u03a4\u03a6\7@\2\2\u03a5\u03a4")
        buf.write("\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7")
        buf.write("\u03ac\5D#\2\u03a8\u03a9\7\7\2\2\u03a9\u03ab\5D#\2\u03aa")
        buf.write("\u03a8\3\2\2\2\u03ab\u03ae\3\2\2\2\u03ac\u03aa\3\2\2\2")
        buf.write("\u03ac\u03ad\3\2\2\2\u03ad\u03b1\3\2\2\2\u03ae\u03ac\3")
        buf.write("\2\2\2\u03af\u03b1\7\t\2\2\u03b0\u03a5\3\2\2\2\u03b0\u03af")
        buf.write("\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2")
        buf.write("\u03b4\7\6\2\2\u03b3\u03b5\5t;\2\u03b4\u03b3\3\2\2\2\u03b4")
        buf.write("\u03b5\3\2\2\2\u03b5\u03b7\3\2\2\2\u03b6\u03b8\5x=\2\u03b7")
        buf.write("\u03b6\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03ea\3\2\2\2")
        buf.write("\u03b9\u03ba\7\5\2\2\u03ba\u03bf\5D#\2\u03bb\u03bc\7\7")
        buf.write("\2\2\u03bc\u03be\5D#\2\u03bd\u03bb\3\2\2\2\u03be\u03c1")
        buf.write("\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0")
        buf.write("\u03c2\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c2\u03c3\7\6\2\2")
        buf.write("\u03c3\u03ea\3\2\2\2\u03c4\u03c5\7-\2\2\u03c5\u03c6\7")
        buf.write("\5\2\2\u03c6\u03c7\5D#\2\u03c7\u03c8\7#\2\2\u03c8\u03c9")
        buf.write("\5\"\22\2\u03c9\u03ca\7\6\2\2\u03ca\u03ea\3\2\2\2\u03cb")
        buf.write("\u03cd\7h\2\2\u03cc\u03cb\3\2\2\2\u03cc\u03cd\3\2\2\2")
        buf.write("\u03cd\u03ce\3\2\2\2\u03ce\u03d0\7H\2\2\u03cf\u03cc\3")
        buf.write("\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2")
        buf.write("\7\5\2\2\u03d2\u03d3\5T+\2\u03d3\u03d4\7\6\2\2\u03d4\u03ea")
        buf.write("\3\2\2\2\u03d5\u03d7\7,\2\2\u03d6\u03d8\5D#\2\u03d7\u03d6")
        buf.write("\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03de\3\2\2\2\u03d9")
        buf.write("\u03da\7\u0094\2\2\u03da\u03db\5D#\2\u03db\u03dc\7\u0088")
        buf.write("\2\2\u03dc\u03dd\5D#\2\u03dd\u03df\3\2\2\2\u03de\u03d9")
        buf.write("\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03de\3\2\2\2\u03e0")
        buf.write("\u03e1\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e3\7C\2\2")
        buf.write("\u03e3\u03e5\5D#\2\u03e4\u03e2\3\2\2\2\u03e4\u03e5\3\2")
        buf.write("\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e7\7D\2\2\u03e7\u03ea")
        buf.write("\3\2\2\2\u03e8\u03ea\5F$\2\u03e9\u0363\3\2\2\2\u03e9\u0365")
        buf.write("\3\2\2\2\u03e9\u036e\3\2\2\2\u03e9\u0371\3\2\2\2\u03e9")
        buf.write("\u0374\3\2\2\2\u03e9\u037d\3\2\2\2\u03e9\u0384\3\2\2\2")
        buf.write("\u03e9\u038b\3\2\2\2\u03e9\u0397\3\2\2\2\u03e9\u03a2\3")
        buf.write("\2\2\2\u03e9\u03b9\3\2\2\2\u03e9\u03c4\3\2\2\2\u03e9\u03cf")
        buf.write("\3\2\2\2\u03e9\u03d5\3\2\2\2\u03e9\u03e8\3\2\2\2\u03ea")
        buf.write("\u0462\3\2\2\2\u03eb\u03ec\f\33\2\2\u03ec\u03ed\7\r\2")
        buf.write("\2\u03ed\u0461\5D#\34\u03ee\u03ef\f\32\2\2\u03ef\u03f0")
        buf.write("\t\17\2\2\u03f0\u0461\5D#\33\u03f1\u03f2\f\31\2\2\u03f2")
        buf.write("\u03f3\t\6\2\2\u03f3\u0461\5D#\32\u03f4\u03f5\f\30\2\2")
        buf.write("\u03f5\u03f6\t\20\2\2\u03f6\u0461\5D#\31\u03f7\u03f8\f")
        buf.write("\27\2\2\u03f8\u03f9\t\21\2\2\u03f9\u0461\5D#\30\u03fa")
        buf.write("\u0407\f\26\2\2\u03fb\u0408\7\b\2\2\u03fc\u0408\7\30\2")
        buf.write("\2\u03fd\u0408\7\31\2\2\u03fe\u0408\7\32\2\2\u03ff\u0408")
        buf.write("\7^\2\2\u0400\u0401\7^\2\2\u0401\u0408\7h\2\2\u0402\u0408")
        buf.write("\7U\2\2\u0403\u0408\7c\2\2\u0404\u0408\7O\2\2\u0405\u0408")
        buf.write("\7e\2\2\u0406\u0408\7x\2\2\u0407\u03fb\3\2\2\2\u0407\u03fc")
        buf.write("\3\2\2\2\u0407\u03fd\3\2\2\2\u0407\u03fe\3\2\2\2\u0407")
        buf.write("\u03ff\3\2\2\2\u0407\u0400\3\2\2\2\u0407\u0402\3\2\2\2")
        buf.write("\u0407\u0403\3\2\2\2\u0407\u0404\3\2\2\2\u0407\u0405\3")
        buf.write("\2\2\2\u0407\u0406\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u0461")
        buf.write("\5D#\27\u040a\u040b\f\25\2\2\u040b\u040c\7\"\2\2\u040c")
        buf.write("\u0461\5D#\26\u040d\u040e\f\24\2\2\u040e\u040f\7n\2\2")
        buf.write("\u040f\u0461\5D#\25\u0410\u0411\f\b\2\2\u0411\u0413\7")
        buf.write("^\2\2\u0412\u0414\7h\2\2\u0413\u0412\3\2\2\2\u0413\u0414")
        buf.write("\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0461\5D#\t\u0416\u0418")
        buf.write("\f\7\2\2\u0417\u0419\7h\2\2\u0418\u0417\3\2\2\2\u0418")
        buf.write("\u0419\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u041b\7)\2\2")
        buf.write("\u041b\u041c\5D#\2\u041c\u041d\7\"\2\2\u041d\u041e\5D")
        buf.write("#\b\u041e\u0461\3\2\2\2\u041f\u0420\f\13\2\2\u0420\u0421")
        buf.write("\7/\2\2\u0421\u0461\5\u00be`\2\u0422\u0424\f\n\2\2\u0423")
        buf.write("\u0425\7h\2\2\u0424\u0423\3\2\2\2\u0424\u0425\3\2\2\2")
        buf.write("\u0425\u0426\3\2\2\2\u0426\u0427\t\22\2\2\u0427\u042a")
        buf.write("\5D#\2\u0428\u0429\7E\2\2\u0429\u042b\5D#\2\u042a\u0428")
        buf.write("\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u0461\3\2\2\2\u042c")
        buf.write("\u0431\f\t\2\2\u042d\u0432\7_\2\2\u042e\u0432\7i\2\2\u042f")
        buf.write("\u0430\7h\2\2\u0430\u0432\7j\2\2\u0431\u042d\3\2\2\2\u0431")
        buf.write("\u042e\3\2\2\2\u0431\u042f\3\2\2\2\u0432\u0461\3\2\2\2")
        buf.write("\u0433\u0435\f\6\2\2\u0434\u0436\7h\2\2\u0435\u0434\3")
        buf.write("\2\2\2\u0435\u0436\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u045e")
        buf.write("\7U\2\2\u0438\u0442\7\5\2\2\u0439\u0443\5T+\2\u043a\u043f")
        buf.write("\5D#\2\u043b\u043c\7\7\2\2\u043c\u043e\5D#\2\u043d\u043b")
        buf.write("\3\2\2\2\u043e\u0441\3\2\2\2\u043f\u043d\3\2\2\2\u043f")
        buf.write("\u0440\3\2\2\2\u0440\u0443\3\2\2\2\u0441\u043f\3\2\2\2")
        buf.write("\u0442\u0439\3\2\2\2\u0442\u043a\3\2\2\2\u0442\u0443\3")
        buf.write("\2\2\2\u0443\u0444\3\2\2\2\u0444\u045f\7\6\2\2\u0445\u0446")
        buf.write("\5\u00b4[\2\u0446\u0447\7\4\2\2\u0447\u0449\3\2\2\2\u0448")
        buf.write("\u0445\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u044a\3\2\2\2")
        buf.write("\u044a\u045f\5\u00b6\\\2\u044b\u044c\5\u00b4[\2\u044c")
        buf.write("\u044d\7\4\2\2\u044d\u044f\3\2\2\2\u044e\u044b\3\2\2\2")
        buf.write("\u044e\u044f\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0451\5")
        buf.write("\u00dep\2\u0451\u045a\7\5\2\2\u0452\u0457\5D#\2\u0453")
        buf.write("\u0454\7\7\2\2\u0454\u0456\5D#\2\u0455\u0453\3\2\2\2\u0456")
        buf.write("\u0459\3\2\2\2\u0457\u0455\3\2\2\2\u0457\u0458\3\2\2\2")
        buf.write("\u0458\u045b\3\2\2\2\u0459\u0457\3\2\2\2\u045a\u0452\3")
        buf.write("\2\2\2\u045a\u045b\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045d")
        buf.write("\7\6\2\2\u045d\u045f\3\2\2\2\u045e\u0438\3\2\2\2\u045e")
        buf.write("\u0448\3\2\2\2\u045e\u044e\3\2\2\2\u045f\u0461\3\2\2\2")
        buf.write("\u0460\u03eb\3\2\2\2\u0460\u03ee\3\2\2\2\u0460\u03f1\3")
        buf.write("\2\2\2\u0460\u03f4\3\2\2\2\u0460\u03f7\3\2\2\2\u0460\u03fa")
        buf.write("\3\2\2\2\u0460\u040a\3\2\2\2\u0460\u040d\3\2\2\2\u0460")
        buf.write("\u0410\3\2\2\2\u0460\u0416\3\2\2\2\u0460\u041f\3\2\2\2")
        buf.write("\u0460\u0422\3\2\2\2\u0460\u042c\3\2\2\2\u0460\u0433\3")
        buf.write("\2\2\2\u0461\u0464\3\2\2\2\u0462\u0460\3\2\2\2\u0462\u0463")
        buf.write("\3\2\2\2\u0463E\3\2\2\2\u0464\u0462\3\2\2\2\u0465\u0466")
        buf.write("\7u\2\2\u0466\u046b\7\5\2\2\u0467\u046c\7S\2\2\u0468\u0469")
        buf.write("\t\23\2\2\u0469\u046a\7\7\2\2\u046a\u046c\5\u00a8U\2\u046b")
        buf.write("\u0467\3\2\2\2\u046b\u0468\3\2\2\2\u046c\u046d\3\2\2\2")
        buf.write("\u046d\u046e\7\6\2\2\u046eG\3\2\2\2\u046f\u0470\t\24\2")
        buf.write("\2\u0470I\3\2\2\2\u0471\u0473\5\64\33\2\u0472\u0471\3")
        buf.write("\2\2\2\u0472\u0473\3\2\2\2\u0473\u0479\3\2\2\2\u0474\u047a")
        buf.write("\7Z\2\2\u0475\u047a\7|\2\2\u0476\u0477\7Z\2\2\u0477\u0478")
        buf.write("\7n\2\2\u0478\u047a\t\n\2\2\u0479\u0474\3\2\2\2\u0479")
        buf.write("\u0475\3\2\2\2\u0479\u0476\3\2\2\2\u047a\u047b\3\2\2\2")
        buf.write("\u047b\u047f\7]\2\2\u047c\u047d\5\u00b4[\2\u047d\u047e")
        buf.write("\7\4\2\2\u047e\u0480\3\2\2\2\u047f\u047c\3\2\2\2\u047f")
        buf.write("\u0480\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0484\5\u00b6")
        buf.write("\\\2\u0482\u0483\7#\2\2\u0483\u0485\5\u00ceh\2\u0484\u0482")
        buf.write("\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0491\3\2\2\2\u0486")
        buf.write("\u0487\7\5\2\2\u0487\u048c\5\u00bc_\2\u0488\u0489\7\7")
        buf.write("\2\2\u0489\u048b\5\u00bc_\2\u048a\u0488\3\2\2\2\u048b")
        buf.write("\u048e\3\2\2\2\u048c\u048a\3\2\2\2\u048c\u048d\3\2\2\2")
        buf.write("\u048d\u048f\3\2\2\2\u048e\u048c\3\2\2\2\u048f\u0490\7")
        buf.write("\6\2\2\u0490\u0492\3\2\2\2\u0491\u0486\3\2\2\2\u0491\u0492")
        buf.write("\3\2\2\2\u0492\u04b0\3\2\2\2\u0493\u0494\7\u0091\2\2\u0494")
        buf.write("\u0495\7\5\2\2\u0495\u049a\5D#\2\u0496\u0497\7\7\2\2\u0497")
        buf.write("\u0499\5D#\2\u0498\u0496\3\2\2\2\u0499\u049c\3\2\2\2\u049a")
        buf.write("\u0498\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049d\3\2\2\2")
        buf.write("\u049c\u049a\3\2\2\2\u049d\u04ac\7\6\2\2\u049e\u049f\7")
        buf.write("\7\2\2\u049f\u04a0\7\5\2\2\u04a0\u04a5\5D#\2\u04a1\u04a2")
        buf.write("\7\7\2\2\u04a2\u04a4\5D#\2\u04a3\u04a1\3\2\2\2\u04a4\u04a7")
        buf.write("\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6")
        buf.write("\u04a8\3\2\2\2\u04a7\u04a5\3\2\2\2\u04a8\u04a9\7\6\2\2")
        buf.write("\u04a9\u04ab\3\2\2\2\u04aa\u049e\3\2\2\2\u04ab\u04ae\3")
        buf.write("\2\2\2\u04ac\u04aa\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04b1")
        buf.write("\3\2\2\2\u04ae\u04ac\3\2\2\2\u04af\u04b1\5T+\2\u04b0\u0493")
        buf.write("\3\2\2\2\u04b0\u04af\3\2\2\2\u04b1\u04b3\3\2\2\2\u04b2")
        buf.write("\u04b4\5L\'\2\u04b3\u04b2\3\2\2\2\u04b3\u04b4\3\2\2\2")
        buf.write("\u04b4\u04b8\3\2\2\2\u04b5\u04b6\7:\2\2\u04b6\u04b8\7")
        buf.write("\u0091\2\2\u04b7\u0472\3\2\2\2\u04b7\u04b5\3\2\2\2\u04b8")
        buf.write("K\3\2\2\2\u04b9\u04ba\7m\2\2\u04ba\u04c9\7\62\2\2\u04bb")
        buf.write("\u04bc\7\5\2\2\u04bc\u04c1\5\34\17\2\u04bd\u04be\7\7\2")
        buf.write("\2\u04be\u04c0\5\34\17\2\u04bf\u04bd\3\2\2\2\u04c0\u04c3")
        buf.write("\3\2\2\2\u04c1\u04bf\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2")
        buf.write("\u04c4\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c4\u04c7\7\6\2\2")
        buf.write("\u04c5\u04c6\7\u0095\2\2\u04c6\u04c8\5D#\2\u04c7\u04c5")
        buf.write("\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04ca\3\2\2\2\u04c9")
        buf.write("\u04bb\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cb\3\2\2\2")
        buf.write("\u04cb\u04e6\7\u00b8\2\2\u04cc\u04e7\7\u00b9\2\2\u04cd")
        buf.write("\u04ce\7\u008e\2\2\u04ce\u04d1\7\u0084\2\2\u04cf\u04d2")
        buf.write("\5\u00bc_\2\u04d0\u04d2\5l\67\2\u04d1\u04cf\3\2\2\2\u04d1")
        buf.write("\u04d0\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d4\7\30\2")
        buf.write("\2\u04d4\u04df\5D#\2\u04d5\u04d8\7\7\2\2\u04d6\u04d9\5")
        buf.write("\u00bc_\2\u04d7\u04d9\5l\67\2\u04d8\u04d6\3\2\2\2\u04d8")
        buf.write("\u04d7\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04db\7\30\2")
        buf.write("\2\u04db\u04dc\5D#\2\u04dc\u04de\3\2\2\2\u04dd\u04d5\3")
        buf.write("\2\2\2\u04de\u04e1\3\2\2\2\u04df\u04dd\3\2\2\2\u04df\u04e0")
        buf.write("\3\2\2\2\u04e0\u04e4\3\2\2\2\u04e1\u04df\3\2\2\2\u04e2")
        buf.write("\u04e3\7\u0095\2\2\u04e3\u04e5\5D#\2\u04e4\u04e2\3\2\2")
        buf.write("\2\u04e4\u04e5\3\2\2\2\u04e5\u04e7\3\2\2\2\u04e6\u04cc")
        buf.write("\3\2\2\2\u04e6\u04cd\3\2\2\2\u04e7M\3\2\2\2\u04e8\u04ec")
        buf.write("\7r\2\2\u04e9\u04ea\5\u00b4[\2\u04ea\u04eb\7\4\2\2\u04eb")
        buf.write("\u04ed\3\2\2\2\u04ec\u04e9\3\2\2\2\u04ec\u04ed\3\2\2\2")
        buf.write("\u04ed\u04ee\3\2\2\2\u04ee\u04f5\5\u00caf\2\u04ef\u04f0")
        buf.write("\7\b\2\2\u04f0\u04f6\5P)\2\u04f1\u04f2\7\5\2\2\u04f2\u04f3")
        buf.write("\5P)\2\u04f3\u04f4\7\6\2\2\u04f4\u04f6\3\2\2\2\u04f5\u04ef")
        buf.write("\3\2\2\2\u04f5\u04f1\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6")
        buf.write("O\3\2\2\2\u04f7\u04fb\5&\24\2\u04f8\u04fb\5\u00b0Y\2\u04f9")
        buf.write("\u04fb\7\u00ca\2\2\u04fa\u04f7\3\2\2\2\u04fa\u04f8\3\2")
        buf.write("\2\2\u04fa\u04f9\3\2\2\2\u04fbQ\3\2\2\2\u04fc\u0507\7")
        buf.write("y\2\2\u04fd\u0508\5\u00be`\2\u04fe\u04ff\5\u00b4[\2\u04ff")
        buf.write("\u0500\7\4\2\2\u0500\u0502\3\2\2\2\u0501\u04fe\3\2\2\2")
        buf.write("\u0501\u0502\3\2\2\2\u0502\u0505\3\2\2\2\u0503\u0506\5")
        buf.write("\u00b6\\\2\u0504\u0506\5\u00c2b\2\u0505\u0503\3\2\2\2")
        buf.write("\u0505\u0504\3\2\2\2\u0506\u0508\3\2\2\2\u0507\u04fd\3")
        buf.write("\2\2\2\u0507\u0501\3\2\2\2\u0507\u0508\3\2\2\2\u0508S")
        buf.write("\3\2\2\2\u0509\u050b\5\u0084C\2\u050a\u0509\3\2\2\2\u050a")
        buf.write("\u050b\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u0512\5X-\2\u050d")
        buf.write("\u050e\5h\65\2\u050e\u050f\5X-\2\u050f\u0511\3\2\2\2\u0510")
        buf.write("\u050d\3\2\2\2\u0511\u0514\3\2\2\2\u0512\u0510\3\2\2\2")
        buf.write("\u0512\u0513\3\2\2\2\u0513\u0516\3\2\2\2\u0514\u0512\3")
        buf.write("\2\2\2\u0515\u0517\5\u0086D\2\u0516\u0515\3\2\2\2\u0516")
        buf.write("\u0517\3\2\2\2\u0517\u0519\3\2\2\2\u0518\u051a\5\u0088")
        buf.write("E\2\u0519\u0518\3\2\2\2\u0519\u051a\3\2\2\2\u051aU\3\2")
        buf.write("\2\2\u051b\u0523\5`\61\2\u051c\u051d\5d\63\2\u051d\u051f")
        buf.write("\5`\61\2\u051e\u0520\5f\64\2\u051f\u051e\3\2\2\2\u051f")
        buf.write("\u0520\3\2\2\2\u0520\u0522\3\2\2\2\u0521\u051c\3\2\2\2")
        buf.write("\u0522\u0525\3\2\2\2\u0523\u0521\3\2\2\2\u0523\u0524\3")
        buf.write("\2\2\2\u0524W\3\2\2\2\u0525\u0523\3\2\2\2\u0526\u0528")
        buf.write("\7\u0083\2\2\u0527\u0529\t\25\2\2\u0528\u0527\3\2\2\2")
        buf.write("\u0528\u0529\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u052f\5")
        buf.write("b\62\2\u052b\u052c\7\7\2\2\u052c\u052e\5b\62\2\u052d\u052b")
        buf.write("\3\2\2\2\u052e\u0531\3\2\2\2\u052f\u052d\3\2\2\2\u052f")
        buf.write("\u0530\3\2\2\2\u0530\u053e\3\2\2\2\u0531\u052f\3\2\2\2")
        buf.write("\u0532\u053c\7M\2\2\u0533\u0538\5`\61\2\u0534\u0535\7")
        buf.write("\7\2\2\u0535\u0537\5`\61\2\u0536\u0534\3\2\2\2\u0537\u053a")
        buf.write("\3\2\2\2\u0538\u0536\3\2\2\2\u0538\u0539\3\2\2\2\u0539")
        buf.write("\u053d\3\2\2\2\u053a\u0538\3\2\2\2\u053b\u053d\5V,\2\u053c")
        buf.write("\u0533\3\2\2\2\u053c\u053b\3\2\2\2\u053d\u053f\3\2\2\2")
        buf.write("\u053e\u0532\3\2\2\2\u053e\u053f\3\2\2\2\u053f\u0542\3")
        buf.write("\2\2\2\u0540\u0541\7\u0095\2\2\u0541\u0543\5D#\2\u0542")
        buf.write("\u0540\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u0552\3\2\2\2")
        buf.write("\u0544\u0545\7P\2\2\u0545\u0546\7*\2\2\u0546\u054b\5D")
        buf.write("#\2\u0547\u0548\7\7\2\2\u0548\u054a\5D#\2\u0549\u0547")
        buf.write("\3\2\2\2\u054a\u054d\3\2\2\2\u054b\u0549\3\2\2\2\u054b")
        buf.write("\u054c\3\2\2\2\u054c\u0550\3\2\2\2\u054d\u054b\3\2\2\2")
        buf.write("\u054e\u054f\7Q\2\2\u054f\u0551\5D#\2\u0550\u054e\3\2")
        buf.write("\2\2\u0550\u0551\3\2\2\2\u0551\u0553\3\2\2\2\u0552\u0544")
        buf.write("\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0562\3\2\2\2\u0554")
        buf.write("\u0555\7\u00af\2\2\u0555\u0556\5\u00d2j\2\u0556\u0557")
        buf.write("\7#\2\2\u0557\u055f\5v<\2\u0558\u0559\7\7\2\2\u0559\u055a")
        buf.write("\5\u00d2j\2\u055a\u055b\7#\2\2\u055b\u055c\5v<\2\u055c")
        buf.write("\u055e\3\2\2\2\u055d\u0558\3\2\2\2\u055e\u0561\3\2\2\2")
        buf.write("\u055f\u055d\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u0563\3")
        buf.write("\2\2\2\u0561\u055f\3\2\2\2\u0562\u0554\3\2\2\2\u0562\u0563")
        buf.write("\3\2\2\2\u0563\u0581\3\2\2\2\u0564\u0565\7\u0091\2\2\u0565")
        buf.write("\u0566\7\5\2\2\u0566\u056b\5D#\2\u0567\u0568\7\7\2\2\u0568")
        buf.write("\u056a\5D#\2\u0569\u0567\3\2\2\2\u056a\u056d\3\2\2\2\u056b")
        buf.write("\u0569\3\2\2\2\u056b\u056c\3\2\2\2\u056c\u056e\3\2\2\2")
        buf.write("\u056d\u056b\3\2\2\2\u056e\u057d\7\6\2\2\u056f\u0570\7")
        buf.write("\7\2\2\u0570\u0571\7\5\2\2\u0571\u0576\5D#\2\u0572\u0573")
        buf.write("\7\7\2\2\u0573\u0575\5D#\2\u0574\u0572\3\2\2\2\u0575\u0578")
        buf.write("\3\2\2\2\u0576\u0574\3\2\2\2\u0576\u0577\3\2\2\2\u0577")
        buf.write("\u0579\3\2\2\2\u0578\u0576\3\2\2\2\u0579\u057a\7\6\2\2")
        buf.write("\u057a\u057c\3\2\2\2\u057b\u056f\3\2\2\2\u057c\u057f\3")
        buf.write("\2\2\2\u057d\u057b\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u0581")
        buf.write("\3\2\2\2\u057f\u057d\3\2\2\2\u0580\u0526\3\2\2\2\u0580")
        buf.write("\u0564\3\2\2\2\u0581Y\3\2\2\2\u0582\u0583\5T+\2\u0583")
        buf.write("[\3\2\2\2\u0584\u0586\5\u0084C\2\u0585\u0584\3\2\2\2\u0585")
        buf.write("\u0586\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0589\5X-\2\u0588")
        buf.write("\u058a\5\u0086D\2\u0589\u0588\3\2\2\2\u0589\u058a\3\2")
        buf.write("\2\2\u058a\u058c\3\2\2\2\u058b\u058d\5\u0088E\2\u058c")
        buf.write("\u058b\3\2\2\2\u058c\u058d\3\2\2\2\u058d]\3\2\2\2\u058e")
        buf.write("\u0590\5\u0084C\2\u058f\u058e\3\2\2\2\u058f\u0590\3\2")
        buf.write("\2\2\u0590\u0591\3\2\2\2\u0591\u059b\5X-\2\u0592\u0594")
        buf.write("\7\u008c\2\2\u0593\u0595\7\37\2\2\u0594\u0593\3\2\2\2")
        buf.write("\u0594\u0595\3\2\2\2\u0595\u0599\3\2\2\2\u0596\u0599\7")
        buf.write("\\\2\2\u0597\u0599\7F\2\2\u0598\u0592\3\2\2\2\u0598\u0596")
        buf.write("\3\2\2\2\u0598\u0597\3\2\2\2\u0599\u059a\3\2\2\2\u059a")
        buf.write("\u059c\5X-\2\u059b\u0598\3\2\2\2\u059c\u059d\3\2\2\2\u059d")
        buf.write("\u059b\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u05a0\3\2\2\2")
        buf.write("\u059f\u05a1\5\u0086D\2\u05a0\u059f\3\2\2\2\u05a0\u05a1")
        buf.write("\3\2\2\2\u05a1\u05a3\3\2\2\2\u05a2\u05a4\5\u0088E\2\u05a3")
        buf.write("\u05a2\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4_\3\2\2\2\u05a5")
        buf.write("\u05a6\5\u00b4[\2\u05a6\u05a7\7\4\2\2\u05a7\u05a9\3\2")
        buf.write("\2\2\u05a8\u05a5\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05aa")
        buf.write("\3\2\2\2\u05aa\u05af\5\u00b6\\\2\u05ab\u05ad\7#\2\2\u05ac")
        buf.write("\u05ab\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05ae\3\2\2\2")
        buf.write("\u05ae\u05b0\5\u00ceh\2\u05af\u05ac\3\2\2\2\u05af\u05b0")
        buf.write("\3\2\2\2\u05b0\u05b6\3\2\2\2\u05b1\u05b2\7W\2\2\u05b2")
        buf.write("\u05b3\7*\2\2\u05b3\u05b7\5\u00c2b\2\u05b4\u05b5\7h\2")
        buf.write("\2\u05b5\u05b7\7W\2\2\u05b6\u05b1\3\2\2\2\u05b6\u05b4")
        buf.write("\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05e6\3\2\2\2\u05b8")
        buf.write("\u05b9\5\u00b4[\2\u05b9\u05ba\7\4\2\2\u05ba\u05bc\3\2")
        buf.write("\2\2\u05bb\u05b8\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc\u05bd")
        buf.write("\3\2\2\2\u05bd\u05be\5\u00dep\2\u05be\u05bf\7\5\2\2\u05bf")
        buf.write("\u05c4\5D#\2\u05c0\u05c1\7\7\2\2\u05c1\u05c3\5D#\2\u05c2")
        buf.write("\u05c0\3\2\2\2\u05c3\u05c6\3\2\2\2\u05c4\u05c2\3\2\2\2")
        buf.write("\u05c4\u05c5\3\2\2\2\u05c5\u05c7\3\2\2\2\u05c6\u05c4\3")
        buf.write("\2\2\2\u05c7\u05cc\7\6\2\2\u05c8\u05ca\7#\2\2\u05c9\u05c8")
        buf.write("\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb")
        buf.write("\u05cd\5\u00ceh\2\u05cc\u05c9\3\2\2\2\u05cc\u05cd\3\2")
        buf.write("\2\2\u05cd\u05e6\3\2\2\2\u05ce\u05d8\7\5\2\2\u05cf\u05d4")
        buf.write("\5`\61\2\u05d0\u05d1\7\7\2\2\u05d1\u05d3\5`\61\2\u05d2")
        buf.write("\u05d0\3\2\2\2\u05d3\u05d6\3\2\2\2\u05d4\u05d2\3\2\2\2")
        buf.write("\u05d4\u05d5\3\2\2\2\u05d5\u05d9\3\2\2\2\u05d6\u05d4\3")
        buf.write("\2\2\2\u05d7\u05d9\5V,\2\u05d8\u05cf\3\2\2\2\u05d8\u05d7")
        buf.write("\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05db\7\6\2\2\u05db")
        buf.write("\u05e6\3\2\2\2\u05dc\u05dd\7\5\2\2\u05dd\u05de\5T+\2\u05de")
        buf.write("\u05e3\7\6\2\2\u05df\u05e1\7#\2\2\u05e0\u05df\3\2\2\2")
        buf.write("\u05e0\u05e1\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u05e4\5")
        buf.write("\u00ceh\2\u05e3\u05e0\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4")
        buf.write("\u05e6\3\2\2\2\u05e5\u05a8\3\2\2\2\u05e5\u05bb\3\2\2\2")
        buf.write("\u05e5\u05ce\3\2\2\2\u05e5\u05dc\3\2\2\2\u05e6a\3\2\2")
        buf.write("\2\u05e7\u05f4\7\t\2\2\u05e8\u05e9\5\u00b6\\\2\u05e9\u05ea")
        buf.write("\7\4\2\2\u05ea\u05eb\7\t\2\2\u05eb\u05f4\3\2\2\2\u05ec")
        buf.write("\u05f1\5D#\2\u05ed\u05ef\7#\2\2\u05ee\u05ed\3\2\2\2\u05ee")
        buf.write("\u05ef\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f2\5\u00ac")
        buf.write("W\2\u05f1\u05ee\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2\u05f4")
        buf.write("\3\2\2\2\u05f3\u05e7\3\2\2\2\u05f3\u05e8\3\2\2\2\u05f3")
        buf.write("\u05ec\3\2\2\2\u05f4c\3\2\2\2\u05f5\u0607\7\7\2\2\u05f6")
        buf.write("\u05f8\7f\2\2\u05f7\u05f6\3\2\2\2\u05f7\u05f8\3\2\2\2")
        buf.write("\u05f8\u0603\3\2\2\2\u05f9\u05fb\7~\2\2\u05fa\u05fc\7")
        buf.write("p\2\2\u05fb\u05fa\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc\u0604")
        buf.write("\3\2\2\2\u05fd\u05ff\7b\2\2\u05fe\u0600\7p\2\2\u05ff\u05fe")
        buf.write("\3\2\2\2\u05ff\u0600\3\2\2\2\u0600\u0604\3\2\2\2\u0601")
        buf.write("\u0604\7Y\2\2\u0602\u0604\7\65\2\2\u0603\u05f9\3\2\2\2")
        buf.write("\u0603\u05fd\3\2\2\2\u0603\u0601\3\2\2\2\u0603\u0602\3")
        buf.write("\2\2\2\u0603\u0604\3\2\2\2\u0604\u0605\3\2\2\2\u0605\u0607")
        buf.write("\7`\2\2\u0606\u05f5\3\2\2\2\u0606\u05f7\3\2\2\2\u0607")
        buf.write("e\3\2\2\2\u0608\u0609\7m\2\2\u0609\u0617\5D#\2\u060a\u060b")
        buf.write("\7\u008f\2\2\u060b\u060c\7\5\2\2\u060c\u0611\5\u00bc_")
        buf.write("\2\u060d\u060e\7\7\2\2\u060e\u0610\5\u00bc_\2\u060f\u060d")
        buf.write("\3\2\2\2\u0610\u0613\3\2\2\2\u0611\u060f\3\2\2\2\u0611")
        buf.write("\u0612\3\2\2\2\u0612\u0614\3\2\2\2\u0613\u0611\3\2\2\2")
        buf.write("\u0614\u0615\7\6\2\2\u0615\u0617\3\2\2\2\u0616\u0608\3")
        buf.write("\2\2\2\u0616\u060a\3\2\2\2\u0617g\3\2\2\2\u0618\u061a")
        buf.write("\7\u008c\2\2\u0619\u061b\7\37\2\2\u061a\u0619\3\2\2\2")
        buf.write("\u061a\u061b\3\2\2\2\u061b\u061f\3\2\2\2\u061c\u061f\7")
        buf.write("\\\2\2\u061d\u061f\7F\2\2\u061e\u0618\3\2\2\2\u061e\u061c")
        buf.write("\3\2\2\2\u061e\u061d\3\2\2\2\u061fi\3\2\2\2\u0620\u0622")
        buf.write("\5\64\33\2\u0621\u0620\3\2\2\2\u0621\u0622\3\2\2\2\u0622")
        buf.write("\u0623\3\2\2\2\u0623\u0626\7\u008e\2\2\u0624\u0625\7n")
        buf.write("\2\2\u0625\u0627\t\n\2\2\u0626\u0624\3\2\2\2\u0626\u0627")
        buf.write("\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u0629\5p9\2\u0629\u062c")
        buf.write("\7\u0084\2\2\u062a\u062d\5\u00bc_\2\u062b\u062d\5l\67")
        buf.write("\2\u062c\u062a\3\2\2\2\u062c\u062b\3\2\2\2\u062d\u062e")
        buf.write("\3\2\2\2\u062e\u062f\7\b\2\2\u062f\u063a\5D#\2\u0630\u0633")
        buf.write("\7\7\2\2\u0631\u0634\5\u00bc_\2\u0632\u0634\5l\67\2\u0633")
        buf.write("\u0631\3\2\2\2\u0633\u0632\3\2\2\2\u0634\u0635\3\2\2\2")
        buf.write("\u0635\u0636\7\b\2\2\u0636\u0637\5D#\2\u0637\u0639\3\2")
        buf.write("\2\2\u0638\u0630\3\2\2\2\u0639\u063c\3\2\2\2\u063a\u0638")
        buf.write("\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u063f\3\2\2\2\u063c")
        buf.write("\u063a\3\2\2\2\u063d\u063e\7\u0095\2\2\u063e\u0640\5D")
        buf.write("#\2\u063f\u063d\3\2\2\2\u063f\u0640\3\2\2\2\u0640k\3\2")
        buf.write("\2\2\u0641\u0642\7\5\2\2\u0642\u0647\5\u00bc_\2\u0643")
        buf.write("\u0644\7\7\2\2\u0644\u0646\5\u00bc_\2\u0645\u0643\3\2")
        buf.write("\2\2\u0646\u0649\3\2\2\2\u0647\u0645\3\2\2\2\u0647\u0648")
        buf.write("\3\2\2\2\u0648\u064a\3\2\2\2\u0649\u0647\3\2\2\2\u064a")
        buf.write("\u064b\7\6\2\2\u064bm\3\2\2\2\u064c\u064e\5\64\33\2\u064d")
        buf.write("\u064c\3\2\2\2\u064d\u064e\3\2\2\2\u064e\u064f\3\2\2\2")
        buf.write("\u064f\u0652\7\u008e\2\2\u0650\u0651\7n\2\2\u0651\u0653")
        buf.write("\t\n\2\2\u0652\u0650\3\2\2\2\u0652\u0653\3\2\2\2\u0653")
        buf.write("\u0654\3\2\2\2\u0654\u0655\5p9\2\u0655\u0658\7\u0084\2")
        buf.write("\2\u0656\u0659\5\u00bc_\2\u0657\u0659\5l\67\2\u0658\u0656")
        buf.write("\3\2\2\2\u0658\u0657\3\2\2\2\u0659\u065a\3\2\2\2\u065a")
        buf.write("\u065b\7\b\2\2\u065b\u0666\5D#\2\u065c\u065f\7\7\2\2\u065d")
        buf.write("\u0660\5\u00bc_\2\u065e\u0660\5l\67\2\u065f\u065d\3\2")
        buf.write("\2\2\u065f\u065e\3\2\2\2\u0660\u0661\3\2\2\2\u0661\u0662")
        buf.write("\7\b\2\2\u0662\u0663\5D#\2\u0663\u0665\3\2\2\2\u0664\u065c")
        buf.write("\3\2\2\2\u0665\u0668\3\2\2\2\u0666\u0664\3\2\2\2\u0666")
        buf.write("\u0667\3\2\2\2\u0667\u066b\3\2\2\2\u0668\u0666\3\2\2\2")
        buf.write("\u0669\u066a\7\u0095\2\2\u066a\u066c\5D#\2\u066b\u0669")
        buf.write("\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u0671\3\2\2\2\u066d")
        buf.write("\u066f\5\u0086D\2\u066e\u066d\3\2\2\2\u066e\u066f\3\2")
        buf.write("\2\2\u066f\u0670\3\2\2\2\u0670\u0672\5\u0088E\2\u0671")
        buf.write("\u066e\3\2\2\2\u0671\u0672\3\2\2\2\u0672o\3\2\2\2\u0673")
        buf.write("\u0674\5\u00b4[\2\u0674\u0675\7\4\2\2\u0675\u0677\3\2")
        buf.write("\2\2\u0676\u0673\3\2\2\2\u0676\u0677\3\2\2\2\u0677\u0678")
        buf.write("\3\2\2\2\u0678\u067b\5\u00b6\\\2\u0679\u067a\7#\2\2\u067a")
        buf.write("\u067c\5\u00d4k\2\u067b\u0679\3\2\2\2\u067b\u067c\3\2")
        buf.write("\2\2\u067c\u0682\3\2\2\2\u067d\u067e\7W\2\2\u067e\u067f")
        buf.write("\7*\2\2\u067f\u0683\5\u00c2b\2\u0680\u0681\7h\2\2\u0681")
        buf.write("\u0683\7W\2\2\u0682\u067d\3\2\2\2\u0682\u0680\3\2\2\2")
        buf.write("\u0682\u0683\3\2\2\2\u0683q\3\2\2\2\u0684\u0686\7\u0090")
        buf.write("\2\2\u0685\u0687\5\u00b4[\2\u0686\u0685\3\2\2\2\u0686")
        buf.write("\u0687\3\2\2\2\u0687\u068a\3\2\2\2\u0688\u0689\7]\2\2")
        buf.write("\u0689\u068b\5\u00d6l\2\u068a\u0688\3\2\2\2\u068a\u068b")
        buf.write("\3\2\2\2\u068bs\3\2\2\2\u068c\u068d\7\u00b3\2\2\u068d")
        buf.write("\u068e\7\5\2\2\u068e\u068f\7\u0095\2\2\u068f\u0690\5D")
        buf.write("#\2\u0690\u0691\7\6\2\2\u0691u\3\2\2\2\u0692\u0694\7\5")
        buf.write("\2\2\u0693\u0695\5\u00d8m\2\u0694\u0693\3\2\2\2\u0694")
        buf.write("\u0695\3\2\2\2\u0695\u06a0\3\2\2\2\u0696\u0697\7\u009a")
        buf.write("\2\2\u0697\u0698\7*\2\2\u0698\u069d\5D#\2\u0699\u069a")
        buf.write("\7\7\2\2\u069a\u069c\5D#\2\u069b\u0699\3\2\2\2\u069c\u069f")
        buf.write("\3\2\2\2\u069d\u069b\3\2\2\2\u069d\u069e\3\2\2\2\u069e")
        buf.write("\u06a1\3\2\2\2\u069f\u069d\3\2\2\2\u06a0\u0696\3\2\2\2")
        buf.write("\u06a0\u06a1\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06a3\7")
        buf.write("o\2\2\u06a3\u06a4\7*\2\2\u06a4\u06a9\5\u008aF\2\u06a5")
        buf.write("\u06a6\7\7\2\2\u06a6\u06a8\5\u008aF\2\u06a7\u06a5\3\2")
        buf.write("\2\2\u06a8\u06ab\3\2\2\2\u06a9\u06a7\3\2\2\2\u06a9\u06aa")
        buf.write("\3\2\2\2\u06aa\u06ad\3\2\2\2\u06ab\u06a9\3\2\2\2\u06ac")
        buf.write("\u06ae\5z>\2\u06ad\u06ac\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae")
        buf.write("\u06af\3\2\2\2\u06af\u06b0\7\6\2\2\u06b0w\3\2\2\2\u06b1")
        buf.write("\u06d3\7\u0099\2\2\u06b2\u06d4\5\u00d2j\2\u06b3\u06b5")
        buf.write("\7\5\2\2\u06b4\u06b6\5\u00d8m\2\u06b5\u06b4\3\2\2\2\u06b5")
        buf.write("\u06b6\3\2\2\2\u06b6\u06c1\3\2\2\2\u06b7\u06b8\7\u009a")
        buf.write("\2\2\u06b8\u06b9\7*\2\2\u06b9\u06be\5D#\2\u06ba\u06bb")
        buf.write("\7\7\2\2\u06bb\u06bd\5D#\2\u06bc\u06ba\3\2\2\2\u06bd\u06c0")
        buf.write("\3\2\2\2\u06be\u06bc\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf")
        buf.write("\u06c2\3\2\2\2\u06c0\u06be\3\2\2\2\u06c1\u06b7\3\2\2\2")
        buf.write("\u06c1\u06c2\3\2\2\2\u06c2\u06cd\3\2\2\2\u06c3\u06c4\7")
        buf.write("o\2\2\u06c4\u06c5\7*\2\2\u06c5\u06ca\5\u008aF\2\u06c6")
        buf.write("\u06c7\7\7\2\2\u06c7\u06c9\5\u008aF\2\u06c8\u06c6\3\2")
        buf.write("\2\2\u06c9\u06cc\3\2\2\2\u06ca\u06c8\3\2\2\2\u06ca\u06cb")
        buf.write("\3\2\2\2\u06cb\u06ce\3\2\2\2\u06cc\u06ca\3\2\2\2\u06cd")
        buf.write("\u06c3\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06d0\3\2\2\2")
        buf.write("\u06cf\u06d1\5z>\2\u06d0\u06cf\3\2\2\2\u06d0\u06d1\3\2")
        buf.write("\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d4\7\6\2\2\u06d3\u06b2")
        buf.write("\3\2\2\2\u06d3\u06b3\3\2\2\2\u06d4y\3\2\2\2\u06d5\u06dd")
        buf.write("\5|?\2\u06d6\u06d7\7\u00b5\2\2\u06d7\u06d8\7g\2\2\u06d8")
        buf.write("\u06de\7\u00b7\2\2\u06d9\u06da\7\u009e\2\2\u06da\u06de")
        buf.write("\7\u0080\2\2\u06db\u06de\7P\2\2\u06dc\u06de\7\u00b6\2")
        buf.write("\2\u06dd\u06d6\3\2\2\2\u06dd\u06d9\3\2\2\2\u06dd\u06db")
        buf.write("\3\2\2\2\u06dd\u06dc\3\2\2\2\u06dd\u06de\3\2\2\2\u06de")
        buf.write("{\3\2\2\2\u06df\u06e6\t\26\2\2\u06e0\u06e7\5\u0092J\2")
        buf.write("\u06e1\u06e2\7)\2\2\u06e2\u06e3\5\u008eH\2\u06e3\u06e4")
        buf.write("\7\"\2\2\u06e4\u06e5\5\u0090I\2\u06e5\u06e7\3\2\2\2\u06e6")
        buf.write("\u06e0\3\2\2\2\u06e6\u06e1\3\2\2\2\u06e7}\3\2\2\2\u06e8")
        buf.write("\u06e9\5\u00dan\2\u06e9\u06f3\7\5\2\2\u06ea\u06ef\5D#")
        buf.write("\2\u06eb\u06ec\7\7\2\2\u06ec\u06ee\5D#\2\u06ed\u06eb\3")
        buf.write("\2\2\2\u06ee\u06f1\3\2\2\2\u06ef\u06ed\3\2\2\2\u06ef\u06f0")
        buf.write("\3\2\2\2\u06f0\u06f4\3\2\2\2\u06f1\u06ef\3\2\2\2\u06f2")
        buf.write("\u06f4\7\t\2\2\u06f3\u06ea\3\2\2\2\u06f3\u06f2\3\2\2\2")
        buf.write("\u06f4\u06f5\3\2\2\2\u06f5\u06f6\7\6\2\2\u06f6\177\3\2")
        buf.write("\2\2\u06f7\u06f8\5\u00dco\2\u06f8\u0705\7\5\2\2\u06f9")
        buf.write("\u06fb\7@\2\2\u06fa\u06f9\3\2\2\2\u06fa\u06fb\3\2\2\2")
        buf.write("\u06fb\u06fc\3\2\2\2\u06fc\u0701\5D#\2\u06fd\u06fe\7\7")
        buf.write("\2\2\u06fe\u0700\5D#\2\u06ff\u06fd\3\2\2\2\u0700\u0703")
        buf.write("\3\2\2\2\u0701\u06ff\3\2\2\2\u0701\u0702\3\2\2\2\u0702")
        buf.write("\u0706\3\2\2\2\u0703\u0701\3\2\2\2\u0704\u0706\7\t\2\2")
        buf.write("\u0705\u06fa\3\2\2\2\u0705\u0704\3\2\2\2\u0705\u0706\3")
        buf.write("\2\2\2\u0706\u0707\3\2\2\2\u0707\u0709\7\6\2\2\u0708\u070a")
        buf.write("\5t;\2\u0709\u0708\3\2\2\2\u0709\u070a\3\2\2\2\u070a\u0081")
        buf.write("\3\2\2\2\u070b\u070c\5\u0094K\2\u070c\u0716\7\5\2\2\u070d")
        buf.write("\u0712\5D#\2\u070e\u070f\7\7\2\2\u070f\u0711\5D#\2\u0710")
        buf.write("\u070e\3\2\2\2\u0711\u0714\3\2\2\2\u0712\u0710\3\2\2\2")
        buf.write("\u0712\u0713\3\2\2\2\u0713\u0717\3\2\2\2\u0714\u0712\3")
        buf.write("\2\2\2\u0715\u0717\7\t\2\2\u0716\u070d\3\2\2\2\u0716\u0715")
        buf.write("\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u0718\3\2\2\2\u0718")
        buf.write("\u071a\7\6\2\2\u0719\u071b\5t;\2\u071a\u0719\3\2\2\2\u071a")
        buf.write("\u071b\3\2\2\2\u071b\u071c\3\2\2\2\u071c\u071f\7\u0099")
        buf.write("\2\2\u071d\u0720\5v<\2\u071e\u0720\5\u00d2j\2\u071f\u071d")
        buf.write("\3\2\2\2\u071f\u071e\3\2\2\2\u0720\u0083\3\2\2\2\u0721")
        buf.write("\u0723\7\u0096\2\2\u0722\u0724\7v\2\2\u0723\u0722\3\2")
        buf.write("\2\2\u0723\u0724\3\2\2\2\u0724\u0725\3\2\2\2\u0725\u072a")
        buf.write("\5:\36\2\u0726\u0727\7\7\2\2\u0727\u0729\5:\36\2\u0728")
        buf.write("\u0726\3\2\2\2\u0729\u072c\3\2\2\2\u072a\u0728\3\2\2\2")
        buf.write("\u072a\u072b\3\2\2\2\u072b\u0085\3\2\2\2\u072c\u072a\3")
        buf.write("\2\2\2\u072d\u072e\7o\2\2\u072e\u072f\7*\2\2\u072f\u0734")
        buf.write("\5\u008aF\2\u0730\u0731\7\7\2\2\u0731\u0733\5\u008aF\2")
        buf.write("\u0732\u0730\3\2\2\2\u0733\u0736\3\2\2\2\u0734\u0732\3")
        buf.write("\2\2\2\u0734\u0735\3\2\2\2\u0735\u0087\3\2\2\2\u0736\u0734")
        buf.write("\3\2\2\2\u0737\u0738\7d\2\2\u0738\u073b\5D#\2\u0739\u073a")
        buf.write("\t\27\2\2\u073a\u073c\5D#\2\u073b\u0739\3\2\2\2\u073b")
        buf.write("\u073c\3\2\2\2\u073c\u0089\3\2\2\2\u073d\u0740\5D#\2\u073e")
        buf.write("\u073f\7/\2\2\u073f\u0741\5\u00be`\2\u0740\u073e\3\2\2")
        buf.write("\2\u0740\u0741\3\2\2\2\u0741\u0743\3\2\2\2\u0742\u0744")
        buf.write("\5\u008cG\2\u0743\u0742\3\2\2\2\u0743\u0744\3\2\2\2\u0744")
        buf.write("\u0747\3\2\2\2\u0745\u0746\7\u00b0\2\2\u0746\u0748\t\30")
        buf.write("\2\2\u0747\u0745\3\2\2\2\u0747\u0748\3\2\2\2\u0748\u008b")
        buf.write("\3\2\2\2\u0749\u074a\t\31\2\2\u074a\u008d\3\2\2\2\u074b")
        buf.write("\u074c\5D#\2\u074c\u074d\7\u009c\2\2\u074d\u0756\3\2\2")
        buf.write("\2\u074e\u074f\5D#\2\u074f\u0750\7\u009f\2\2\u0750\u0756")
        buf.write("\3\2\2\2\u0751\u0752\7\u009e\2\2\u0752\u0756\7\u0080\2")
        buf.write("\2\u0753\u0754\7\u009d\2\2\u0754\u0756\7\u009c\2\2\u0755")
        buf.write("\u074b\3\2\2\2\u0755\u074e\3\2\2\2\u0755\u0751\3\2\2\2")
        buf.write("\u0755\u0753\3\2\2\2\u0756\u008f\3\2\2\2\u0757\u0758\5")
        buf.write("D#\2\u0758\u0759\7\u009c\2\2\u0759\u0762\3\2\2\2\u075a")
        buf.write("\u075b\5D#\2\u075b\u075c\7\u009f\2\2\u075c\u0762\3\2\2")
        buf.write("\2\u075d\u075e\7\u009e\2\2\u075e\u0762\7\u0080\2\2\u075f")
        buf.write("\u0760\7\u009d\2\2\u0760\u0762\7\u009f\2\2\u0761\u0757")
        buf.write("\3\2\2\2\u0761\u075a\3\2\2\2\u0761\u075d\3\2\2\2\u0761")
        buf.write("\u075f\3\2\2\2\u0762\u0091\3\2\2\2\u0763\u0764\5D#\2\u0764")
        buf.write("\u0765\7\u009c\2\2\u0765\u076b\3\2\2\2\u0766\u0767\7\u009d")
        buf.write("\2\2\u0767\u076b\7\u009c\2\2\u0768\u0769\7\u009e\2\2\u0769")
        buf.write("\u076b\7\u0080\2\2\u076a\u0763\3\2\2\2\u076a\u0766\3\2")
        buf.write("\2\2\u076a\u0768\3\2\2\2\u076b\u0093\3\2\2\2\u076c\u076d")
        buf.write("\t\32\2\2\u076d\u076e\7\5\2\2\u076e\u076f\5D#\2\u076f")
        buf.write("\u0770\7\6\2\2\u0770\u0771\7\u0099\2\2\u0771\u0773\7\5")
        buf.write("\2\2\u0772\u0774\5\u009aN\2\u0773\u0772\3\2\2\2\u0773")
        buf.write("\u0774\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u0777\5\u009e")
        buf.write("P\2\u0776\u0778\5|?\2\u0777\u0776\3\2\2\2\u0777\u0778")
        buf.write("\3\2\2\2\u0778\u0779\3\2\2\2\u0779\u077a\7\6\2\2\u077a")
        buf.write("\u07c2\3\2\2\2\u077b\u077c\t\33\2\2\u077c\u077d\7\5\2")
        buf.write("\2\u077d\u077e\7\6\2\2\u077e\u077f\7\u0099\2\2\u077f\u0781")
        buf.write("\7\5\2\2\u0780\u0782\5\u009aN\2\u0781\u0780\3\2\2\2\u0781")
        buf.write("\u0782\3\2\2\2\u0782\u0784\3\2\2\2\u0783\u0785\5\u009c")
        buf.write("O\2\u0784\u0783\3\2\2\2\u0784\u0785\3\2\2\2\u0785\u0786")
        buf.write("\3\2\2\2\u0786\u07c2\7\6\2\2\u0787\u0788\t\34\2\2\u0788")
        buf.write("\u0789\7\5\2\2\u0789\u078a\7\6\2\2\u078a\u078b\7\u0099")
        buf.write("\2\2\u078b\u078d\7\5\2\2\u078c\u078e\5\u009aN\2\u078d")
        buf.write("\u078c\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u078f\3\2\2\2")
        buf.write("\u078f\u0790\5\u009eP\2\u0790\u0791\7\6\2\2\u0791\u07c2")
        buf.write("\3\2\2\2\u0792\u0793\t\35\2\2\u0793\u0794\7\5\2\2\u0794")
        buf.write("\u0796\5D#\2\u0795\u0797\5\u0096L\2\u0796\u0795\3\2\2")
        buf.write("\2\u0796\u0797\3\2\2\2\u0797\u0799\3\2\2\2\u0798\u079a")
        buf.write("\5\u0098M\2\u0799\u0798\3\2\2\2\u0799\u079a\3\2\2\2\u079a")
        buf.write("\u079b\3\2\2\2\u079b\u079c\7\6\2\2\u079c\u079d\7\u0099")
        buf.write("\2\2\u079d\u079f\7\5\2\2\u079e\u07a0\5\u009aN\2\u079f")
        buf.write("\u079e\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a1\3\2\2\2")
        buf.write("\u07a1\u07a2\5\u009eP\2\u07a2\u07a3\7\6\2\2\u07a3\u07c2")
        buf.write("\3\2\2\2\u07a4\u07a5\7\u00a5\2\2\u07a5\u07a6\7\5\2\2\u07a6")
        buf.write("\u07a7\5D#\2\u07a7\u07a8\7\7\2\2\u07a8\u07a9\5&\24\2\u07a9")
        buf.write("\u07aa\7\6\2\2\u07aa\u07ab\7\u0099\2\2\u07ab\u07ad\7\5")
        buf.write("\2\2\u07ac\u07ae\5\u009aN\2\u07ad\u07ac\3\2\2\2\u07ad")
        buf.write("\u07ae\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b1\5\u009e")
        buf.write("P\2\u07b0\u07b2\5|?\2\u07b1\u07b0\3\2\2\2\u07b1\u07b2")
        buf.write("\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07b4\7\6\2\2\u07b4")
        buf.write("\u07c2\3\2\2\2\u07b5\u07b6\7\u00a6\2\2\u07b6\u07b7\7\5")
        buf.write("\2\2\u07b7\u07b8\5D#\2\u07b8\u07b9\7\6\2\2\u07b9\u07ba")
        buf.write("\7\u0099\2\2\u07ba\u07bc\7\5\2\2\u07bb\u07bd\5\u009aN")
        buf.write("\2\u07bc\u07bb\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07be")
        buf.write("\3\2\2\2\u07be\u07bf\5\u009eP\2\u07bf\u07c0\7\6\2\2\u07c0")
        buf.write("\u07c2\3\2\2\2\u07c1\u076c\3\2\2\2\u07c1\u077b\3\2\2\2")
        buf.write("\u07c1\u0787\3\2\2\2\u07c1\u0792\3\2\2\2\u07c1\u07a4\3")
        buf.write("\2\2\2\u07c1\u07b5\3\2\2\2\u07c2\u0095\3\2\2\2\u07c3\u07c4")
        buf.write("\7\7\2\2\u07c4\u07c5\5&\24\2\u07c5\u0097\3\2\2\2\u07c6")
        buf.write("\u07c7\7\7\2\2\u07c7\u07c8\5&\24\2\u07c8\u0099\3\2\2\2")
        buf.write("\u07c9\u07ca\7\u009a\2\2\u07ca\u07cc\7*\2\2\u07cb\u07cd")
        buf.write("\5D#\2\u07cc\u07cb\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07cc")
        buf.write("\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u009b\3\2\2\2\u07d0")
        buf.write("\u07d1\7o\2\2\u07d1\u07d3\7*\2\2\u07d2\u07d4\5D#\2\u07d3")
        buf.write("\u07d2\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5\u07d3\3\2\2\2")
        buf.write("\u07d5\u07d6\3\2\2\2\u07d6\u009d\3\2\2\2\u07d7\u07d8\7")
        buf.write("o\2\2\u07d8\u07d9\7*\2\2\u07d9\u07da\5\u009eP\2\u07da")
        buf.write("\u009f\3\2\2\2\u07db\u07dd\5D#\2\u07dc\u07de\5\u008cG")
        buf.write("\2\u07dd\u07dc\3\2\2\2\u07dd\u07de\3\2\2\2\u07de\u07e6")
        buf.write("\3\2\2\2\u07df\u07e0\7\7\2\2\u07e0\u07e2\5D#\2\u07e1\u07e3")
        buf.write("\5\u008cG\2\u07e2\u07e1\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3")
        buf.write("\u07e5\3\2\2\2\u07e4\u07df\3\2\2\2\u07e5\u07e8\3\2\2\2")
        buf.write("\u07e6\u07e4\3\2\2\2\u07e6\u07e7\3\2\2\2\u07e7\u00a1\3")
        buf.write("\2\2\2\u07e8\u07e6\3\2\2\2\u07e9\u07ea\5T+\2\u07ea\u00a3")
        buf.write("\3\2\2\2\u07eb\u07ec\5T+\2\u07ec\u00a5\3\2\2\2\u07ed\u07ee")
        buf.write("\t\36\2\2\u07ee\u00a7\3\2\2\2\u07ef\u07f0\7\u00ca\2\2")
        buf.write("\u07f0\u00a9\3\2\2\2\u07f1\u07f4\5D#\2\u07f2\u07f4\5 ")
        buf.write("\21\2\u07f3\u07f1\3\2\2\2\u07f3\u07f2\3\2\2\2\u07f4\u00ab")
        buf.write("\3\2\2\2\u07f5\u07f6\t\37\2\2\u07f6\u00ad\3\2\2\2\u07f7")
        buf.write("\u07f8\t \2\2\u07f8\u00af\3\2\2\2\u07f9\u07fa\5\u00e0")
        buf.write("q\2\u07fa\u00b1\3\2\2\2\u07fb\u07fc\5\u00e0q\2\u07fc\u00b3")
        buf.write("\3\2\2\2\u07fd\u07fe\5\u00e0q\2\u07fe\u00b5\3\2\2\2\u07ff")
        buf.write("\u0800\5\u00e0q\2\u0800\u00b7\3\2\2\2\u0801\u0802\5\u00e0")
        buf.write("q\2\u0802\u00b9\3\2\2\2\u0803\u0804\5\u00e0q\2\u0804\u00bb")
        buf.write("\3\2\2\2\u0805\u0806\5\u00e0q\2\u0806\u00bd\3\2\2\2\u0807")
        buf.write("\u0808\5\u00e0q\2\u0808\u00bf\3\2\2\2\u0809\u080a\5\u00e0")
        buf.write("q\2\u080a\u00c1\3\2\2\2\u080b\u080c\5\u00e0q\2\u080c\u00c3")
        buf.write("\3\2\2\2\u080d\u080e\5\u00e0q\2\u080e\u00c5\3\2\2\2\u080f")
        buf.write("\u0810\5\u00e0q\2\u0810\u00c7\3\2\2\2\u0811\u0812\5\u00e0")
        buf.write("q\2\u0812\u00c9\3\2\2\2\u0813\u0814\5\u00e0q\2\u0814\u00cb")
        buf.write("\3\2\2\2\u0815\u0816\5\u00e0q\2\u0816\u00cd\3\2\2\2\u0817")
        buf.write("\u0818\5\u00e0q\2\u0818\u00cf\3\2\2\2\u0819\u081a\5\u00e0")
        buf.write("q\2\u081a\u00d1\3\2\2\2\u081b\u081c\5\u00e0q\2\u081c\u00d3")
        buf.write("\3\2\2\2\u081d\u081e\5\u00e0q\2\u081e\u00d5\3\2\2\2\u081f")
        buf.write("\u0820\5\u00e0q\2\u0820\u00d7\3\2\2\2\u0821\u0822\5\u00e0")
        buf.write("q\2\u0822\u00d9\3\2\2\2\u0823\u0824\5\u00e0q\2\u0824\u00db")
        buf.write("\3\2\2\2\u0825\u0826\5\u00e0q\2\u0826\u00dd\3\2\2\2\u0827")
        buf.write("\u0828\5\u00e0q\2\u0828\u00df\3\2\2\2\u0829\u0831\7\u00c7")
        buf.write("\2\2\u082a\u0831\5\u00aeX\2\u082b\u0831\7\u00ca\2\2\u082c")
        buf.write("\u082d\7\5\2\2\u082d\u082e\5\u00e0q\2\u082e\u082f\7\6")
        buf.write("\2\2\u082f\u0831\3\2\2\2\u0830\u0829\3\2\2\2\u0830\u082a")
        buf.write("\3\2\2\2\u0830\u082b\3\2\2\2\u0830\u082c\3\2\2\2\u0831")
        buf.write("\u00e1\3\2\2\2\u0127\u00e4\u00e6\u00f1\u00f8\u00fd\u0103")
        buf.write("\u0109\u010b\u0125\u012c\u0133\u0139\u013d\u0140\u0147")
        buf.write("\u014a\u014e\u0156\u015a\u015c\u0160\u0164\u0168\u016b")
        buf.write("\u0172\u0178\u017e\u0183\u018e\u0194\u0198\u019c\u019f")
        buf.write("\u01a3\u01a9\u01ae\u01b7\u01be\u01c4\u01c8\u01cc\u01d1")
        buf.write("\u01d7\u01e3\u01e7\u01ec\u01ef\u01f2\u01f7\u01fa\u0208")
        buf.write("\u020f\u0216\u0218\u021b\u0221\u0226\u022e\u0233\u0242")
        buf.write("\u0248\u0252\u0257\u0261\u0265\u0267\u026b\u0270\u0272")
        buf.write("\u027a\u0280\u0285\u028c\u0297\u029a\u029c\u02a3\u02a7")
        buf.write("\u02ae\u02b4\u02ba\u02c0\u02c5\u02ce\u02d3\u02de\u02e3")
        buf.write("\u02ee\u02f3\u02f7\u0307\u0311\u0316\u031e\u032a\u032f")
        buf.write("\u0337\u033e\u0341\u0348\u034b\u034e\u0352\u035a\u035f")
        buf.write("\u0369\u036e\u0377\u0392\u039e\u03a5\u03ac\u03b0\u03b4")
        buf.write("\u03b7\u03bf\u03cc\u03cf\u03d7\u03e0\u03e4\u03e9\u0407")
        buf.write("\u0413\u0418\u0424\u042a\u0431\u0435\u043f\u0442\u0448")
        buf.write("\u044e\u0457\u045a\u045e\u0460\u0462\u046b\u0472\u0479")
        buf.write("\u047f\u0484\u048c\u0491\u049a\u04a5\u04ac\u04b0\u04b3")
        buf.write("\u04b7\u04c1\u04c7\u04c9\u04d1\u04d8\u04df\u04e4\u04e6")
        buf.write("\u04ec\u04f5\u04fa\u0501\u0505\u0507\u050a\u0512\u0516")
        buf.write("\u0519\u051f\u0523\u0528\u052f\u0538\u053c\u053e\u0542")
        buf.write("\u054b\u0550\u0552\u055f\u0562\u056b\u0576\u057d\u0580")
        buf.write("\u0585\u0589\u058c\u058f\u0594\u0598\u059d\u05a0\u05a3")
        buf.write("\u05a8\u05ac\u05af\u05b6\u05bb\u05c4\u05c9\u05cc\u05d4")
        buf.write("\u05d8\u05e0\u05e3\u05e5\u05ee\u05f1\u05f3\u05f7\u05fb")
        buf.write("\u05ff\u0603\u0606\u0611\u0616\u061a\u061e\u0621\u0626")
        buf.write("\u062c\u0633\u063a\u063f\u0647\u064d\u0652\u0658\u065f")
        buf.write("\u0666\u066b\u066e\u0671\u0676\u067b\u0682\u0686\u068a")
        buf.write("\u0694\u069d\u06a0\u06a9\u06ad\u06b5\u06be\u06c1\u06ca")
        buf.write("\u06cd\u06d0\u06d3\u06dd\u06e6\u06ef\u06f3\u06fa\u0701")
        buf.write("\u0705\u0709\u0712\u0716\u071a\u071f\u0723\u072a\u0734")
        buf.write("\u073b\u0740\u0743\u0747\u0755\u0761\u076a\u0773\u0777")
        buf.write("\u0781\u0784\u078d\u0796\u0799\u079f\u07ad\u07b1\u07bc")
        buf.write("\u07c1\u07ce\u07d5\u07dd\u07e2\u07e6\u07f3\u0830")
        return buf.getvalue()


class SQLiteParser ( Parser ):

    grammarFileName = "SQLiteParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "ABORT", "ACTION", "ADD", "AFTER", "ALL", "ALTER", 
                      "ANALYZE", "AND", "AS", "ASC", "ATTACH", "AUTOINCREMENT", 
                      "BEFORE", "BEGIN", "BETWEEN", "BY", "CASCADE", "CASE", 
                      "CAST", "CHECK", "COLLATE", "COLUMN", "COMMIT", "CONFLICT", 
                      "CONSTRAINT", "CREATE", "CROSS", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "DATABASE", "DEFAULT", "DEFERRABLE", 
                      "DEFERRED", "DELETE", "DESC", "DETACH", "DISTINCT", 
                      "DROP", "EACH", "ELSE", "END", "ESCAPE", "EXCEPT", 
                      "EXCLUSIVE", "EXISTS", "EXPLAIN", "FAIL", "FOR", "FOREIGN", 
                      "FROM", "FULL", "GLOB", "GROUP", "HAVING", "IF", "IGNORE", 
                      "IMMEDIATE", "IN", "INDEX", "INDEXED", "INITIALLY", 
                      "INNER", "INSERT", "INSTEAD", "INTERSECT", "INTO", 
                      "IS", "ISNULL", "JOIN", "KEY", "LEFT", "LIKE", "LIMIT", 
                      "MATCH", "NATURAL", "NO", "NOT", "NOTNULL", "NULL_", 
                      "OF", "OFFSET", "ON", "OR", "ORDER", "OUTER", "PLAN", 
                      "PRAGMA", "PRIMARY", "QUERY", "RAISE", "RECURSIVE", 
                      "REFERENCES", "REGEXP", "REINDEX", "RELEASE", "RENAME", 
                      "REPLACE", "RESTRICT", "RIGHT", "ROLLBACK", "ROW", 
                      "ROWS", "SAVEPOINT", "SELECT", "SET", "TABLE", "TEMP", 
                      "TEMPORARY", "THEN", "TO", "TRANSACTION", "TRIGGER", 
                      "UNION", "UNIQUE", "UPDATE", "USING", "VACUUM", "VALUES", 
                      "VIEW", "VIRTUAL", "WHEN", "WHERE", "WITH", "WITHOUT", 
                      "FIRST_VALUE", "OVER", "PARTITION", "RANGE", "PRECEDING", 
                      "UNBOUNDED", "CURRENT", "FOLLOWING", "CUME_DIST", 
                      "DENSE_RANK", "LAG", "LAST_VALUE", "LEAD", "NTH_VALUE", 
                      "NTILE", "PERCENT_RANK", "RANK", "ROW_NUMBER", "GENERATED", 
                      "ALWAYS", "STORED", "TRUE_", "FALSE_", "WINDOW", "NULLS", 
                      "FIRST", "LAST", "FILTER", "GROUPS", "EXCLUDE", "TIES", 
                      "OTHERS", "DO", "NOTHING", "TRIM", "BOTH", "TRAILING", 
                      "LEADING", "EXTRACT", "YEAR", "MONTH", "DAY", "HOUR", 
                      "MINUTE", "SECOND", "POSITION", "SUBSTRING", "IDENTIFIER", 
                      "NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", 
                      "BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", 
                      "SPACES", "UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_error = 1
    RULE_sql_stmt_list = 2
    RULE_sql_stmt = 3
    RULE_alter_table_stmt = 4
    RULE_analyze_stmt = 5
    RULE_attach_stmt = 6
    RULE_begin_stmt = 7
    RULE_commit_stmt = 8
    RULE_rollback_stmt = 9
    RULE_savepoint_stmt = 10
    RULE_release_stmt = 11
    RULE_create_index_stmt = 12
    RULE_indexed_column = 13
    RULE_create_table_stmt = 14
    RULE_column_def = 15
    RULE_type_name = 16
    RULE_column_constraint = 17
    RULE_signed_number = 18
    RULE_table_constraint = 19
    RULE_foreign_key_clause = 20
    RULE_conflict_clause = 21
    RULE_create_trigger_stmt = 22
    RULE_create_view_stmt = 23
    RULE_create_virtual_table_stmt = 24
    RULE_with_clause = 25
    RULE_cte_table_name = 26
    RULE_recursive_cte = 27
    RULE_common_table_expression = 28
    RULE_delete_stmt = 29
    RULE_delete_stmt_limited = 30
    RULE_detach_stmt = 31
    RULE_drop_stmt = 32
    RULE_expr = 33
    RULE_raise_function = 34
    RULE_literal_value = 35
    RULE_insert_stmt = 36
    RULE_upsert_clause = 37
    RULE_pragma_stmt = 38
    RULE_pragma_value = 39
    RULE_reindex_stmt = 40
    RULE_select_stmt = 41
    RULE_join_clause = 42
    RULE_select_core = 43
    RULE_factored_select_stmt = 44
    RULE_simple_select_stmt = 45
    RULE_compound_select_stmt = 46
    RULE_table_or_subquery = 47
    RULE_result_column = 48
    RULE_join_operator = 49
    RULE_join_constraint = 50
    RULE_compound_operator = 51
    RULE_update_stmt = 52
    RULE_column_name_list = 53
    RULE_update_stmt_limited = 54
    RULE_qualified_table_name = 55
    RULE_vacuum_stmt = 56
    RULE_filter_clause = 57
    RULE_window_defn = 58
    RULE_over_clause = 59
    RULE_frame_spec = 60
    RULE_frame_clause = 61
    RULE_simple_function_invocation = 62
    RULE_aggregate_function_invocation = 63
    RULE_window_function_invocation = 64
    RULE_common_table_stmt = 65
    RULE_order_by_stmt = 66
    RULE_limit_stmt = 67
    RULE_ordering_term = 68
    RULE_asc_desc = 69
    RULE_frame_left = 70
    RULE_frame_right = 71
    RULE_frame_single = 72
    RULE_window_function = 73
    RULE_offset = 74
    RULE_default_value = 75
    RULE_partition_by = 76
    RULE_order_by_expr = 77
    RULE_order_by_expr_asc_desc = 78
    RULE_expr_asc_desc = 79
    RULE_initial_select = 80
    RULE_recursive_select = 81
    RULE_unary_operator = 82
    RULE_error_message = 83
    RULE_module_argument = 84
    RULE_column_alias = 85
    RULE_keyword = 86
    RULE_name = 87
    RULE_function_name = 88
    RULE_schema_name = 89
    RULE_table_name = 90
    RULE_table_or_index_name = 91
    RULE_new_table_name = 92
    RULE_column_name = 93
    RULE_collation_name = 94
    RULE_foreign_table = 95
    RULE_index_name = 96
    RULE_trigger_name = 97
    RULE_view_name = 98
    RULE_module_name = 99
    RULE_pragma_name = 100
    RULE_savepoint_name = 101
    RULE_table_alias = 102
    RULE_transaction_name = 103
    RULE_window_name = 104
    RULE_alias = 105
    RULE_filename = 106
    RULE_base_window_name = 107
    RULE_simple_func = 108
    RULE_aggregate_func = 109
    RULE_table_function_name = 110
    RULE_any_name = 111

    ruleNames =  [ "parse", "error", "sql_stmt_list", "sql_stmt", "alter_table_stmt", 
                   "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
                   "rollback_stmt", "savepoint_stmt", "release_stmt", "create_index_stmt", 
                   "indexed_column", "create_table_stmt", "column_def", 
                   "type_name", "column_constraint", "signed_number", "table_constraint", 
                   "foreign_key_clause", "conflict_clause", "create_trigger_stmt", 
                   "create_view_stmt", "create_virtual_table_stmt", "with_clause", 
                   "cte_table_name", "recursive_cte", "common_table_expression", 
                   "delete_stmt", "delete_stmt_limited", "detach_stmt", 
                   "drop_stmt", "expr", "raise_function", "literal_value", 
                   "insert_stmt", "upsert_clause", "pragma_stmt", "pragma_value", 
                   "reindex_stmt", "select_stmt", "join_clause", "select_core", 
                   "factored_select_stmt", "simple_select_stmt", "compound_select_stmt", 
                   "table_or_subquery", "result_column", "join_operator", 
                   "join_constraint", "compound_operator", "update_stmt", 
                   "column_name_list", "update_stmt_limited", "qualified_table_name", 
                   "vacuum_stmt", "filter_clause", "window_defn", "over_clause", 
                   "frame_spec", "frame_clause", "simple_function_invocation", 
                   "aggregate_function_invocation", "window_function_invocation", 
                   "common_table_stmt", "order_by_stmt", "limit_stmt", "ordering_term", 
                   "asc_desc", "frame_left", "frame_right", "frame_single", 
                   "window_function", "offset", "default_value", "partition_by", 
                   "order_by_expr", "order_by_expr_asc_desc", "expr_asc_desc", 
                   "initial_select", "recursive_select", "unary_operator", 
                   "error_message", "module_argument", "column_alias", "keyword", 
                   "name", "function_name", "schema_name", "table_name", 
                   "table_or_index_name", "new_table_name", "column_name", 
                   "collation_name", "foreign_table", "index_name", "trigger_name", 
                   "view_name", "module_name", "pragma_name", "savepoint_name", 
                   "table_alias", "transaction_name", "window_name", "alias", 
                   "filename", "base_window_name", "simple_func", "aggregate_func", 
                   "table_function_name", "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    ABORT=25
    ACTION=26
    ADD=27
    AFTER=28
    ALL=29
    ALTER=30
    ANALYZE=31
    AND=32
    AS=33
    ASC=34
    ATTACH=35
    AUTOINCREMENT=36
    BEFORE=37
    BEGIN=38
    BETWEEN=39
    BY=40
    CASCADE=41
    CASE=42
    CAST=43
    CHECK=44
    COLLATE=45
    COLUMN=46
    COMMIT=47
    CONFLICT=48
    CONSTRAINT=49
    CREATE=50
    CROSS=51
    CURRENT_DATE=52
    CURRENT_TIME=53
    CURRENT_TIMESTAMP=54
    DATABASE=55
    DEFAULT=56
    DEFERRABLE=57
    DEFERRED=58
    DELETE=59
    DESC=60
    DETACH=61
    DISTINCT=62
    DROP=63
    EACH=64
    ELSE=65
    END=66
    ESCAPE=67
    EXCEPT=68
    EXCLUSIVE=69
    EXISTS=70
    EXPLAIN=71
    FAIL=72
    FOR=73
    FOREIGN=74
    FROM=75
    FULL=76
    GLOB=77
    GROUP=78
    HAVING=79
    IF=80
    IGNORE=81
    IMMEDIATE=82
    IN=83
    INDEX=84
    INDEXED=85
    INITIALLY=86
    INNER=87
    INSERT=88
    INSTEAD=89
    INTERSECT=90
    INTO=91
    IS=92
    ISNULL=93
    JOIN=94
    KEY=95
    LEFT=96
    LIKE=97
    LIMIT=98
    MATCH=99
    NATURAL=100
    NO=101
    NOT=102
    NOTNULL=103
    NULL_=104
    OF=105
    OFFSET=106
    ON=107
    OR=108
    ORDER=109
    OUTER=110
    PLAN=111
    PRAGMA=112
    PRIMARY=113
    QUERY=114
    RAISE=115
    RECURSIVE=116
    REFERENCES=117
    REGEXP=118
    REINDEX=119
    RELEASE=120
    RENAME=121
    REPLACE=122
    RESTRICT=123
    RIGHT=124
    ROLLBACK=125
    ROW=126
    ROWS=127
    SAVEPOINT=128
    SELECT=129
    SET=130
    TABLE=131
    TEMP=132
    TEMPORARY=133
    THEN=134
    TO=135
    TRANSACTION=136
    TRIGGER=137
    UNION=138
    UNIQUE=139
    UPDATE=140
    USING=141
    VACUUM=142
    VALUES=143
    VIEW=144
    VIRTUAL=145
    WHEN=146
    WHERE=147
    WITH=148
    WITHOUT=149
    FIRST_VALUE=150
    OVER=151
    PARTITION=152
    RANGE=153
    PRECEDING=154
    UNBOUNDED=155
    CURRENT=156
    FOLLOWING=157
    CUME_DIST=158
    DENSE_RANK=159
    LAG=160
    LAST_VALUE=161
    LEAD=162
    NTH_VALUE=163
    NTILE=164
    PERCENT_RANK=165
    RANK=166
    ROW_NUMBER=167
    GENERATED=168
    ALWAYS=169
    STORED=170
    TRUE_=171
    FALSE_=172
    WINDOW=173
    NULLS=174
    FIRST=175
    LAST=176
    FILTER=177
    GROUPS=178
    EXCLUDE=179
    TIES=180
    OTHERS=181
    DO=182
    NOTHING=183
    TRIM=184
    BOTH=185
    TRAILING=186
    LEADING=187
    EXTRACT=188
    YEAR=189
    MONTH=190
    DAY=191
    HOUR=192
    MINUTE=193
    SECOND=194
    POSITION=195
    SUBSTRING=196
    IDENTIFIER=197
    NUMERIC_LITERAL=198
    BIND_PARAMETER=199
    STRING_LITERAL=200
    BLOB_LITERAL=201
    SINGLE_LINE_COMMENT=202
    MULTILINE_COMMENT=203
    SPACES=204
    UNEXPECTED_CHAR=205

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ParseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext,i)


        def error(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ErrorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ErrorContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)




    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.SCOL) | (1 << SQLiteParser.ALTER) | (1 << SQLiteParser.ANALYZE) | (1 << SQLiteParser.ATTACH) | (1 << SQLiteParser.BEGIN) | (1 << SQLiteParser.COMMIT) | (1 << SQLiteParser.CREATE) | (1 << SQLiteParser.DEFAULT) | (1 << SQLiteParser.DELETE) | (1 << SQLiteParser.DETACH) | (1 << SQLiteParser.DROP))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SQLiteParser.END - 66)) | (1 << (SQLiteParser.EXPLAIN - 66)) | (1 << (SQLiteParser.INSERT - 66)) | (1 << (SQLiteParser.PRAGMA - 66)) | (1 << (SQLiteParser.REINDEX - 66)) | (1 << (SQLiteParser.RELEASE - 66)) | (1 << (SQLiteParser.REPLACE - 66)) | (1 << (SQLiteParser.ROLLBACK - 66)) | (1 << (SQLiteParser.SAVEPOINT - 66)) | (1 << (SQLiteParser.SELECT - 66)))) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (SQLiteParser.UPDATE - 140)) | (1 << (SQLiteParser.VACUUM - 140)) | (1 << (SQLiteParser.VALUES - 140)) | (1 << (SQLiteParser.WITH - 140)))) != 0) or _la==SQLiteParser.UNEXPECTED_CHAR:
                self.state = 226
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.SCOL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.ATTACH, SQLiteParser.BEGIN, SQLiteParser.COMMIT, SQLiteParser.CREATE, SQLiteParser.DEFAULT, SQLiteParser.DELETE, SQLiteParser.DETACH, SQLiteParser.DROP, SQLiteParser.END, SQLiteParser.EXPLAIN, SQLiteParser.INSERT, SQLiteParser.PRAGMA, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.REPLACE, SQLiteParser.ROLLBACK, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.UPDATE, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.WITH]:
                    self.state = 224
                    self.sql_stmt_list()
                    pass
                elif token in [SQLiteParser.UNEXPECTED_CHAR]:
                    self.state = 225
                    self.error()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 231
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._UNEXPECTED_CHAR = None # Token

        def UNEXPECTED_CHAR(self):
            return self.getToken(SQLiteParser.UNEXPECTED_CHAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError" ):
                listener.enterError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError" ):
                listener.exitError(self)




    def error(self):

        localctx = SQLiteParser.ErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_error)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            localctx._UNEXPECTED_CHAR = self.match(SQLiteParser.UNEXPECTED_CHAR)
            raise RuntimeError("UNEXPECTED_CHAR=" + (None if localctx._UNEXPECTED_CHAR is None else localctx._UNEXPECTED_CHAR.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.SCOL:
                self.state = 236
                self.match(SQLiteParser.SCOL)
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 242
            self.sql_stmt()
            self.state = 251
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 244 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 243
                        self.match(SQLiteParser.SCOL)
                        self.state = 246 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SQLiteParser.SCOL):
                            break

                    self.state = 248
                    self.sql_stmt() 
                self.state = 253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 257
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 254
                    self.match(SQLiteParser.SCOL) 
                self.state = 259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext,0)


        def drop_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext,0)


        def EXPLAIN(self):
            return self.getToken(SQLiteParser.EXPLAIN, 0)

        def QUERY(self):
            return self.getToken(SQLiteParser.QUERY, 0)

        def PLAN(self):
            return self.getToken(SQLiteParser.PLAN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.EXPLAIN:
                self.state = 260
                self.match(SQLiteParser.EXPLAIN)
                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.QUERY:
                    self.state = 261
                    self.match(SQLiteParser.QUERY)
                    self.state = 262
                    self.match(SQLiteParser.PLAN)




            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 267
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 268
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 269
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 270
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 271
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 272
                self.create_index_stmt()
                pass

            elif la_ == 7:
                self.state = 273
                self.create_table_stmt()
                pass

            elif la_ == 8:
                self.state = 274
                self.create_trigger_stmt()
                pass

            elif la_ == 9:
                self.state = 275
                self.create_view_stmt()
                pass

            elif la_ == 10:
                self.state = 276
                self.create_virtual_table_stmt()
                pass

            elif la_ == 11:
                self.state = 277
                self.delete_stmt()
                pass

            elif la_ == 12:
                self.state = 278
                self.delete_stmt_limited()
                pass

            elif la_ == 13:
                self.state = 279
                self.detach_stmt()
                pass

            elif la_ == 14:
                self.state = 280
                self.drop_stmt()
                pass

            elif la_ == 15:
                self.state = 281
                self.insert_stmt()
                pass

            elif la_ == 16:
                self.state = 282
                self.pragma_stmt()
                pass

            elif la_ == 17:
                self.state = 283
                self.reindex_stmt()
                pass

            elif la_ == 18:
                self.state = 284
                self.release_stmt()
                pass

            elif la_ == 19:
                self.state = 285
                self.rollback_stmt()
                pass

            elif la_ == 20:
                self.state = 286
                self.savepoint_stmt()
                pass

            elif la_ == 21:
                self.state = 287
                self.select_stmt()
                pass

            elif la_ == 22:
                self.state = 288
                self.update_stmt()
                pass

            elif la_ == 23:
                self.state = 289
                self.update_stmt_limited()
                pass

            elif la_ == 24:
                self.state = 290
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_column_name = None # Column_nameContext
            self.new_column_name = None # Column_nameContext

        def ALTER(self):
            return self.getToken(SQLiteParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def RENAME(self):
            return self.getToken(SQLiteParser.RENAME, 0)

        def ADD(self):
            return self.getToken(SQLiteParser.ADD, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COLUMN(self):
            return self.getToken(SQLiteParser.COLUMN, 0)

        def TO(self):
            return self.getToken(SQLiteParser.TO, 0)

        def new_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.New_table_nameContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = SQLiteParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(SQLiteParser.ALTER)
            self.state = 294
            self.match(SQLiteParser.TABLE)
            self.state = 298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 295
                self.schema_name()
                self.state = 296
                self.match(SQLiteParser.DOT)


            self.state = 300
            self.table_name()
            self.state = 318
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.RENAME]:
                self.state = 301
                self.match(SQLiteParser.RENAME)
                self.state = 311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 302
                    self.match(SQLiteParser.TO)
                    self.state = 303
                    self.new_table_name()
                    pass

                elif la_ == 2:
                    self.state = 305
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                    if la_ == 1:
                        self.state = 304
                        self.match(SQLiteParser.COLUMN)


                    self.state = 307
                    localctx.old_column_name = self.column_name()
                    self.state = 308
                    self.match(SQLiteParser.TO)
                    self.state = 309
                    localctx.new_column_name = self.column_name()
                    pass


                pass
            elif token in [SQLiteParser.ADD]:
                self.state = 313
                self.match(SQLiteParser.ADD)
                self.state = 315
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 314
                    self.match(SQLiteParser.COLUMN)


                self.state = 317
                self.column_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(SQLiteParser.ANALYZE, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_stmt" ):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_stmt" ):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(SQLiteParser.ANALYZE)
            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 321
                self.schema_name()

            elif la_ == 2:
                self.state = 325
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 322
                    self.schema_name()
                    self.state = 323
                    self.match(SQLiteParser.DOT)


                self.state = 327
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH(self):
            return self.getToken(SQLiteParser.ATTACH, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE(self):
            return self.getToken(SQLiteParser.DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttach_stmt" ):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttach_stmt" ):
                listener.exitAttach_stmt(self)




    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(SQLiteParser.ATTACH)
            self.state = 332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 331
                self.match(SQLiteParser.DATABASE)


            self.state = 334
            self.expr(0)
            self.state = 335
            self.match(SQLiteParser.AS)
            self.state = 336
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(SQLiteParser.BEGIN, 0)

        def TRANSACTION(self):
            return self.getToken(SQLiteParser.TRANSACTION, 0)

        def DEFERRED(self):
            return self.getToken(SQLiteParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(SQLiteParser.IMMEDIATE, 0)

        def EXCLUSIVE(self):
            return self.getToken(SQLiteParser.EXCLUSIVE, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_stmt" ):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_stmt" ):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(SQLiteParser.BEGIN)
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (SQLiteParser.DEFERRED - 58)) | (1 << (SQLiteParser.EXCLUSIVE - 58)) | (1 << (SQLiteParser.IMMEDIATE - 58)))) != 0):
                self.state = 339
                _la = self._input.LA(1)
                if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (SQLiteParser.DEFERRED - 58)) | (1 << (SQLiteParser.EXCLUSIVE - 58)) | (1 << (SQLiteParser.IMMEDIATE - 58)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION:
                self.state = 342
                self.match(SQLiteParser.TRANSACTION)
                self.state = 344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 343
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(SQLiteParser.COMMIT, 0)

        def END(self):
            return self.getToken(SQLiteParser.END, 0)

        def TRANSACTION(self):
            return self.getToken(SQLiteParser.TRANSACTION, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stmt" ):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stmt" ):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.COMMIT or _la==SQLiteParser.END):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION:
                self.state = 349
                self.match(SQLiteParser.TRANSACTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def TRANSACTION(self):
            return self.getToken(SQLiteParser.TRANSACTION, 0)

        def TO(self):
            return self.getToken(SQLiteParser.TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT(self):
            return self.getToken(SQLiteParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stmt" ):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stmt" ):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(SQLiteParser.ROLLBACK)
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION:
                self.state = 353
                self.match(SQLiteParser.TRANSACTION)


            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TO:
                self.state = 356
                self.match(SQLiteParser.TO)
                self.state = 358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 357
                    self.match(SQLiteParser.SAVEPOINT)


                self.state = 360
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(SQLiteParser.SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_stmt" ):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_stmt" ):
                listener.exitSavepoint_stmt(self)




    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(SQLiteParser.SAVEPOINT)
            self.state = 364
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Release_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(SQLiteParser.RELEASE, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT(self):
            return self.getToken(SQLiteParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelease_stmt" ):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelease_stmt" ):
                listener.exitRelease_stmt(self)




    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(SQLiteParser.RELEASE)
            self.state = 368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 367
                self.match(SQLiteParser.SAVEPOINT)


            self.state = 370
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(SQLiteParser.INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def UNIQUE(self):
            return self.getToken(SQLiteParser.UNIQUE, 0)

        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = SQLiteParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(SQLiteParser.CREATE)
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.UNIQUE:
                self.state = 373
                self.match(SQLiteParser.UNIQUE)


            self.state = 376
            self.match(SQLiteParser.INDEX)
            self.state = 380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 377
                self.match(SQLiteParser.IF)
                self.state = 378
                self.match(SQLiteParser.NOT)
                self.state = 379
                self.match(SQLiteParser.EXISTS)


            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 382
                self.schema_name()
                self.state = 383
                self.match(SQLiteParser.DOT)


            self.state = 387
            self.index_name()
            self.state = 388
            self.match(SQLiteParser.ON)
            self.state = 389
            self.table_name()
            self.state = 390
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 391
            self.indexed_column()
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 392
                self.match(SQLiteParser.COMMA)
                self.state = 393
                self.indexed_column()
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 399
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 400
                self.match(SQLiteParser.WHERE)
                self.state = 401
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = SQLiteParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 404
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 405
                self.expr(0)
                pass


            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COLLATE:
                self.state = 408
                self.match(SQLiteParser.COLLATE)
                self.state = 409
                self.collation_name()


            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                self.state = 412
                self.asc_desc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rowID = None # Token

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def TEMP(self):
            return self.getToken(SQLiteParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SQLiteParser.TEMPORARY, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_defContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_constraintContext,i)


        def WITHOUT(self):
            return self.getToken(SQLiteParser.WITHOUT, 0)

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = SQLiteParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(SQLiteParser.CREATE)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY:
                self.state = 416
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 419
            self.match(SQLiteParser.TABLE)
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 420
                self.match(SQLiteParser.IF)
                self.state = 421
                self.match(SQLiteParser.NOT)
                self.state = 422
                self.match(SQLiteParser.EXISTS)


            self.state = 428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 425
                self.schema_name()
                self.state = 426
                self.match(SQLiteParser.DOT)


            self.state = 430
            self.table_name()
            self.state = 454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR]:
                self.state = 431
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 432
                self.column_def()
                self.state = 437
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 433
                        self.match(SQLiteParser.COMMA)
                        self.state = 434
                        self.column_def() 
                    self.state = 439
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 440
                    self.match(SQLiteParser.COMMA)
                    self.state = 441
                    self.table_constraint()
                    self.state = 446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 447
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WITHOUT:
                    self.state = 448
                    self.match(SQLiteParser.WITHOUT)
                    self.state = 449
                    localctx.rowID = self.match(SQLiteParser.IDENTIFIER)


                pass
            elif token in [SQLiteParser.AS]:
                self.state = 452
                self.match(SQLiteParser.AS)
                self.state = 453
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = SQLiteParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_column_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.column_name()
            self.state = 458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 457
                self.type_name()


            self.state = 463
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 460
                    self.column_constraint() 
                self.state = 465
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 466
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 469 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 471
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 472
                self.signed_number()
                self.state = 473
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 475
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 476
                self.signed_number()
                self.state = 477
                self.match(SQLiteParser.COMMA)
                self.state = 478
                self.signed_number()
                self.state = 479
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(SQLiteParser.CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def DEFAULT(self):
            return self.getToken(SQLiteParser.DEFAULT, 0)

        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def CONSTRAINT(self):
            return self.getToken(SQLiteParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def PRIMARY(self):
            return self.getToken(SQLiteParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(SQLiteParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(SQLiteParser.UNIQUE, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def GENERATED(self):
            return self.getToken(SQLiteParser.GENERATED, 0)

        def ALWAYS(self):
            return self.getToken(SQLiteParser.ALWAYS, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def STORED(self):
            return self.getToken(SQLiteParser.STORED, 0)

        def VIRTUAL(self):
            return self.getToken(SQLiteParser.VIRTUAL, 0)

        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = SQLiteParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.CONSTRAINT:
                self.state = 483
                self.match(SQLiteParser.CONSTRAINT)
                self.state = 484
                self.name()


            self.state = 534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.PRIMARY]:
                self.state = 487
                self.match(SQLiteParser.PRIMARY)
                self.state = 488
                self.match(SQLiteParser.KEY)
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                    self.state = 489
                    self.asc_desc()


                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON:
                    self.state = 492
                    self.conflict_clause()


                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AUTOINCREMENT:
                    self.state = 495
                    self.match(SQLiteParser.AUTOINCREMENT)


                pass
            elif token in [SQLiteParser.NOT, SQLiteParser.UNIQUE]:
                self.state = 501
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.NOT]:
                    self.state = 498
                    self.match(SQLiteParser.NOT)
                    self.state = 499
                    self.match(SQLiteParser.NULL_)
                    pass
                elif token in [SQLiteParser.UNIQUE]:
                    self.state = 500
                    self.match(SQLiteParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON:
                    self.state = 503
                    self.conflict_clause()


                pass
            elif token in [SQLiteParser.CHECK]:
                self.state = 506
                self.match(SQLiteParser.CHECK)
                self.state = 507
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 508
                self.expr(0)
                self.state = 509
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.DEFAULT]:
                self.state = 511
                self.match(SQLiteParser.DEFAULT)
                self.state = 518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 512
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 513
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 514
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 515
                    self.expr(0)
                    self.state = 516
                    self.match(SQLiteParser.CLOSE_PAR)
                    pass


                pass
            elif token in [SQLiteParser.COLLATE]:
                self.state = 520
                self.match(SQLiteParser.COLLATE)
                self.state = 521
                self.collation_name()
                pass
            elif token in [SQLiteParser.REFERENCES]:
                self.state = 522
                self.foreign_key_clause()
                pass
            elif token in [SQLiteParser.AS, SQLiteParser.GENERATED]:
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.GENERATED:
                    self.state = 523
                    self.match(SQLiteParser.GENERATED)
                    self.state = 524
                    self.match(SQLiteParser.ALWAYS)


                self.state = 527
                self.match(SQLiteParser.AS)
                self.state = 528
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 529
                self.expr(0)
                self.state = 530
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.VIRTUAL or _la==SQLiteParser.STORED:
                    self.state = 531
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.VIRTUAL or _la==SQLiteParser.STORED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS:
                self.state = 536
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 539
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(SQLiteParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def CHECK(self):
            return self.getToken(SQLiteParser.CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def FOREIGN(self):
            return self.getToken(SQLiteParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(SQLiteParser.KEY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def PRIMARY(self):
            return self.getToken(SQLiteParser.PRIMARY, 0)

        def UNIQUE(self):
            return self.getToken(SQLiteParser.UNIQUE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = SQLiteParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.CONSTRAINT:
                self.state = 541
                self.match(SQLiteParser.CONSTRAINT)
                self.state = 542
                self.name()


            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.PRIMARY, SQLiteParser.UNIQUE]:
                self.state = 548
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.PRIMARY]:
                    self.state = 545
                    self.match(SQLiteParser.PRIMARY)
                    self.state = 546
                    self.match(SQLiteParser.KEY)
                    pass
                elif token in [SQLiteParser.UNIQUE]:
                    self.state = 547
                    self.match(SQLiteParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 550
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 551
                self.indexed_column()
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 552
                    self.match(SQLiteParser.COMMA)
                    self.state = 553
                    self.indexed_column()
                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 559
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON:
                    self.state = 560
                    self.conflict_clause()


                pass
            elif token in [SQLiteParser.CHECK]:
                self.state = 563
                self.match(SQLiteParser.CHECK)
                self.state = 564
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 565
                self.expr(0)
                self.state = 566
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.FOREIGN]:
                self.state = 568
                self.match(SQLiteParser.FOREIGN)
                self.state = 569
                self.match(SQLiteParser.KEY)
                self.state = 570
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 571
                self.column_name()
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 572
                    self.match(SQLiteParser.COMMA)
                    self.state = 573
                    self.column_name()
                    self.state = 578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 579
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 580
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCES(self):
            return self.getToken(SQLiteParser.REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def DEFERRABLE(self):
            return self.getToken(SQLiteParser.DEFERRABLE, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ON)
            else:
                return self.getToken(SQLiteParser.ON, i)

        def MATCH(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.MATCH)
            else:
                return self.getToken(SQLiteParser.MATCH, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DELETE)
            else:
                return self.getToken(SQLiteParser.DELETE, i)

        def UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UPDATE)
            else:
                return self.getToken(SQLiteParser.UPDATE, i)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def INITIALLY(self):
            return self.getToken(SQLiteParser.INITIALLY, 0)

        def CASCADE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CASCADE)
            else:
                return self.getToken(SQLiteParser.CASCADE, i)

        def RESTRICT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.RESTRICT)
            else:
                return self.getToken(SQLiteParser.RESTRICT, i)

        def DEFERRED(self):
            return self.getToken(SQLiteParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(SQLiteParser.IMMEDIATE, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SET)
            else:
                return self.getToken(SQLiteParser.SET, i)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NO)
            else:
                return self.getToken(SQLiteParser.NO, i)

        def ACTION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ACTION)
            else:
                return self.getToken(SQLiteParser.ACTION, i)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NULL_)
            else:
                return self.getToken(SQLiteParser.NULL_, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DEFAULT)
            else:
                return self.getToken(SQLiteParser.DEFAULT, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = SQLiteParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(SQLiteParser.REFERENCES)
            self.state = 585
            self.foreign_table()
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 586
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 587
                self.column_name()
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 588
                    self.match(SQLiteParser.COMMA)
                    self.state = 589
                    self.column_name()
                    self.state = 594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 595
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.MATCH or _la==SQLiteParser.ON:
                self.state = 611
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.ON]:
                    self.state = 599
                    self.match(SQLiteParser.ON)
                    self.state = 600
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.DELETE or _la==SQLiteParser.UPDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 607
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SQLiteParser.SET]:
                        self.state = 601
                        self.match(SQLiteParser.SET)
                        self.state = 602
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.DEFAULT or _la==SQLiteParser.NULL_):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [SQLiteParser.CASCADE]:
                        self.state = 603
                        self.match(SQLiteParser.CASCADE)
                        pass
                    elif token in [SQLiteParser.RESTRICT]:
                        self.state = 604
                        self.match(SQLiteParser.RESTRICT)
                        pass
                    elif token in [SQLiteParser.NO]:
                        self.state = 605
                        self.match(SQLiteParser.NO)
                        self.state = 606
                        self.match(SQLiteParser.ACTION)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [SQLiteParser.MATCH]:
                    self.state = 609
                    self.match(SQLiteParser.MATCH)
                    self.state = 610
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.NOT:
                    self.state = 616
                    self.match(SQLiteParser.NOT)


                self.state = 619
                self.match(SQLiteParser.DEFERRABLE)
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.INITIALLY:
                    self.state = 620
                    self.match(SQLiteParser.INITIALLY)
                    self.state = 621
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.DEFERRED or _la==SQLiteParser.IMMEDIATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def CONFLICT(self):
            return self.getToken(SQLiteParser.CONFLICT, 0)

        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = SQLiteParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(SQLiteParser.ON)
            self.state = 627
            self.match(SQLiteParser.CONFLICT)
            self.state = 628
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.ABORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.FAIL - 72)) | (1 << (SQLiteParser.IGNORE - 72)) | (1 << (SQLiteParser.REPLACE - 72)) | (1 << (SQLiteParser.ROLLBACK - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_trigger_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(SQLiteParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def BEGIN(self):
            return self.getToken(SQLiteParser.BEGIN, 0)

        def END(self):
            return self.getToken(SQLiteParser.END, 0)

        def DELETE(self):
            return self.getToken(SQLiteParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(SQLiteParser.INSERT, 0)

        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def BEFORE(self):
            return self.getToken(SQLiteParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(SQLiteParser.AFTER, 0)

        def FOR(self):
            return self.getToken(SQLiteParser.FOR, 0)

        def EACH(self):
            return self.getToken(SQLiteParser.EACH, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def WHEN(self):
            return self.getToken(SQLiteParser.WHEN, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def TEMP(self):
            return self.getToken(SQLiteParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SQLiteParser.TEMPORARY, 0)

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def INSTEAD(self):
            return self.getToken(SQLiteParser.INSTEAD, 0)

        def OF(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OF)
            else:
                return self.getToken(SQLiteParser.OF, i)

        def update_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,i)


        def insert_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,i)


        def delete_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,i)


        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_trigger_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger_stmt" ):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger_stmt" ):
                listener.exitCreate_trigger_stmt(self)




    def create_trigger_stmt(self):

        localctx = SQLiteParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.match(SQLiteParser.CREATE)
            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY:
                self.state = 631
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 634
            self.match(SQLiteParser.TRIGGER)
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 635
                self.match(SQLiteParser.IF)
                self.state = 636
                self.match(SQLiteParser.NOT)
                self.state = 637
                self.match(SQLiteParser.EXISTS)


            self.state = 643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 640
                self.schema_name()
                self.state = 641
                self.match(SQLiteParser.DOT)


            self.state = 645
            self.trigger_name()
            self.state = 650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.BEFORE]:
                self.state = 646
                self.match(SQLiteParser.BEFORE)
                pass
            elif token in [SQLiteParser.AFTER]:
                self.state = 647
                self.match(SQLiteParser.AFTER)
                pass
            elif token in [SQLiteParser.INSTEAD]:
                self.state = 648
                self.match(SQLiteParser.INSTEAD)
                self.state = 649
                self.match(SQLiteParser.OF)
                pass
            elif token in [SQLiteParser.DELETE, SQLiteParser.INSERT, SQLiteParser.UPDATE]:
                pass
            else:
                pass
            self.state = 666
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.DELETE]:
                self.state = 652
                self.match(SQLiteParser.DELETE)
                pass
            elif token in [SQLiteParser.INSERT]:
                self.state = 653
                self.match(SQLiteParser.INSERT)
                pass
            elif token in [SQLiteParser.UPDATE]:
                self.state = 654
                self.match(SQLiteParser.UPDATE)
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OF:
                    self.state = 655
                    self.match(SQLiteParser.OF)
                    self.state = 656
                    self.column_name()
                    self.state = 661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 657
                        self.match(SQLiteParser.COMMA)
                        self.state = 658
                        self.column_name()
                        self.state = 663
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

            self.state = 668
            self.match(SQLiteParser.ON)
            self.state = 669
            self.table_name()
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FOR:
                self.state = 670
                self.match(SQLiteParser.FOR)
                self.state = 671
                self.match(SQLiteParser.EACH)
                self.state = 672
                self.match(SQLiteParser.ROW)


            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHEN:
                self.state = 675
                self.match(SQLiteParser.WHEN)
                self.state = 676
                self.expr(0)


            self.state = 679
            self.match(SQLiteParser.BEGIN)
            self.state = 688 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 680
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 681
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 682
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 683
                    self.select_stmt()
                    pass


                self.state = 686
                self.match(SQLiteParser.SCOL)
                self.state = 690 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.DEFAULT or _la==SQLiteParser.DELETE or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (SQLiteParser.INSERT - 88)) | (1 << (SQLiteParser.REPLACE - 88)) | (1 << (SQLiteParser.SELECT - 88)) | (1 << (SQLiteParser.UPDATE - 88)) | (1 << (SQLiteParser.VALUES - 88)) | (1 << (SQLiteParser.WITH - 88)))) != 0)):
                    break

            self.state = 692
            self.match(SQLiteParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_view_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(SQLiteParser.VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def TEMP(self):
            return self.getToken(SQLiteParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SQLiteParser.TEMPORARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_view_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view_stmt" ):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view_stmt" ):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = SQLiteParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(SQLiteParser.CREATE)
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY:
                self.state = 695
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 698
            self.match(SQLiteParser.VIEW)
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 699
                self.match(SQLiteParser.IF)
                self.state = 700
                self.match(SQLiteParser.NOT)
                self.state = 701
                self.match(SQLiteParser.EXISTS)


            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 704
                self.schema_name()
                self.state = 705
                self.match(SQLiteParser.DOT)


            self.state = 709
            self.view_name()
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 710
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 711
                self.column_name()
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 712
                    self.match(SQLiteParser.COMMA)
                    self.state = 713
                    self.column_name()
                    self.state = 718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 719
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 723
            self.match(SQLiteParser.AS)
            self.state = 724
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_virtual_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def VIRTUAL(self):
            return self.getToken(SQLiteParser.VIRTUAL, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def USING(self):
            return self.getToken(SQLiteParser.USING, 0)

        def module_name(self):
            return self.getTypedRuleContext(SQLiteParser.Module_nameContext,0)


        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def module_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Module_argumentContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_virtual_table_stmt" ):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_virtual_table_stmt" ):
                listener.exitCreate_virtual_table_stmt(self)




    def create_virtual_table_stmt(self):

        localctx = SQLiteParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(SQLiteParser.CREATE)
            self.state = 727
            self.match(SQLiteParser.VIRTUAL)
            self.state = 728
            self.match(SQLiteParser.TABLE)
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 729
                self.match(SQLiteParser.IF)
                self.state = 730
                self.match(SQLiteParser.NOT)
                self.state = 731
                self.match(SQLiteParser.EXISTS)


            self.state = 737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 734
                self.schema_name()
                self.state = 735
                self.match(SQLiteParser.DOT)


            self.state = 739
            self.table_name()
            self.state = 740
            self.match(SQLiteParser.USING)
            self.state = 741
            self.module_name()
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 742
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 743
                self.module_argument()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 744
                    self.match(SQLiteParser.COMMA)
                    self.state = 745
                    self.module_argument()
                    self.state = 750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 751
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SQLiteParser.WITH, 0)

        def cte_table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS)
            else:
                return self.getToken(SQLiteParser.AS, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def RECURSIVE(self):
            return self.getToken(SQLiteParser.RECURSIVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(SQLiteParser.WITH)
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 756
                self.match(SQLiteParser.RECURSIVE)


            self.state = 759
            self.cte_table_name()
            self.state = 760
            self.match(SQLiteParser.AS)
            self.state = 761
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 762
            self.select_stmt()
            self.state = 763
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 764
                self.match(SQLiteParser.COMMA)
                self.state = 765
                self.cte_table_name()
                self.state = 766
                self.match(SQLiteParser.AS)
                self.state = 767
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 768
                self.select_stmt()
                self.state = 769
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_cte_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_table_name" ):
                listener.enterCte_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_table_name" ):
                listener.exitCte_table_name(self)




    def cte_table_name(self):

        localctx = SQLiteParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_cte_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.table_name()
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 777
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 778
                self.column_name()
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 779
                    self.match(SQLiteParser.COMMA)
                    self.state = 780
                    self.column_name()
                    self.state = 785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 786
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cte_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def initial_select(self):
            return self.getTypedRuleContext(SQLiteParser.Initial_selectContext,0)


        def UNION(self):
            return self.getToken(SQLiteParser.UNION, 0)

        def recursive_select(self):
            return self.getTypedRuleContext(SQLiteParser.Recursive_selectContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ALL(self):
            return self.getToken(SQLiteParser.ALL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte" ):
                listener.enterRecursive_cte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte" ):
                listener.exitRecursive_cte(self)




    def recursive_cte(self):

        localctx = SQLiteParser.Recursive_cteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_recursive_cte)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.cte_table_name()
            self.state = 791
            self.match(SQLiteParser.AS)
            self.state = 792
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 793
            self.initial_select()
            self.state = 794
            self.match(SQLiteParser.UNION)
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ALL:
                self.state = 795
                self.match(SQLiteParser.ALL)


            self.state = 798
            self.recursive_select()
            self.state = 799
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.table_name()
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 802
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 803
                self.column_name()
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 804
                    self.match(SQLiteParser.COMMA)
                    self.state = 805
                    self.column_name()
                    self.state = 810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 811
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 815
            self.match(SQLiteParser.AS)
            self.state = 816
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 817
            self.select_stmt()
            self.state = 818
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SQLiteParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 820
                self.with_clause()


            self.state = 823
            self.match(SQLiteParser.DELETE)
            self.state = 824
            self.match(SQLiteParser.FROM)
            self.state = 825
            self.qualified_table_name()
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 826
                self.match(SQLiteParser.WHERE)
                self.state = 827
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SQLiteParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt_limited" ):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt_limited" ):
                listener.exitDelete_stmt_limited(self)




    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 830
                self.with_clause()


            self.state = 833
            self.match(SQLiteParser.DELETE)
            self.state = 834
            self.match(SQLiteParser.FROM)
            self.state = 835
            self.qualified_table_name()
            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 836
                self.match(SQLiteParser.WHERE)
                self.state = 837
                self.expr(0)


            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT or _la==SQLiteParser.ORDER:
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER:
                    self.state = 840
                    self.order_by_stmt()


                self.state = 843
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Detach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETACH(self):
            return self.getToken(SQLiteParser.DETACH, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE(self):
            return self.getToken(SQLiteParser.DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetach_stmt" ):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetach_stmt" ):
                listener.exitDetach_stmt(self)




    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(SQLiteParser.DETACH)
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 847
                self.match(SQLiteParser.DATABASE)


            self.state = 850
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.obj = None # Token

        def DROP(self):
            return self.getToken(SQLiteParser.DROP, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def INDEX(self):
            return self.getToken(SQLiteParser.INDEX, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def TRIGGER(self):
            return self.getToken(SQLiteParser.TRIGGER, 0)

        def VIEW(self):
            return self.getToken(SQLiteParser.VIEW, 0)

        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stmt" ):
                listener.enterDrop_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stmt" ):
                listener.exitDrop_stmt(self)




    def drop_stmt(self):

        localctx = SQLiteParser.Drop_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_drop_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(SQLiteParser.DROP)
            self.state = 853
            localctx.obj = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (SQLiteParser.INDEX - 84)) | (1 << (SQLiteParser.TABLE - 84)) | (1 << (SQLiteParser.TRIGGER - 84)) | (1 << (SQLiteParser.VIEW - 84)))) != 0)):
                localctx.obj = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 854
                self.match(SQLiteParser.IF)
                self.state = 855
                self.match(SQLiteParser.EXISTS)


            self.state = 861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 858
                self.schema_name()
                self.state = 859
                self.match(SQLiteParser.DOT)


            self.state = 863
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def TRIM(self):
            return self.getToken(SQLiteParser.TRIM, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def BOTH(self):
            return self.getToken(SQLiteParser.BOTH, 0)

        def TRAILING(self):
            return self.getToken(SQLiteParser.TRAILING, 0)

        def LEADING(self):
            return self.getToken(SQLiteParser.LEADING, 0)

        def EXTRACT(self):
            return self.getToken(SQLiteParser.EXTRACT, 0)

        def YEAR(self):
            return self.getToken(SQLiteParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(SQLiteParser.MONTH, 0)

        def DAY(self):
            return self.getToken(SQLiteParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SQLiteParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SQLiteParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SQLiteParser.SECOND, 0)

        def POSITION(self):
            return self.getToken(SQLiteParser.POSITION, 0)

        def IN(self):
            return self.getToken(SQLiteParser.IN, 0)

        def SUBSTRING(self):
            return self.getToken(SQLiteParser.SUBSTRING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def FOR(self):
            return self.getToken(SQLiteParser.FOR, 0)

        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext,0)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Over_clauseContext,0)


        def DISTINCT(self):
            return self.getToken(SQLiteParser.DISTINCT, 0)

        def CAST(self):
            return self.getToken(SQLiteParser.CAST, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def CASE(self):
            return self.getToken(SQLiteParser.CASE, 0)

        def END(self):
            return self.getToken(SQLiteParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHEN)
            else:
                return self.getToken(SQLiteParser.WHEN, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.THEN)
            else:
                return self.getToken(SQLiteParser.THEN, i)

        def ELSE(self):
            return self.getToken(SQLiteParser.ELSE, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext,0)


        def PIPE2(self):
            return self.getToken(SQLiteParser.PIPE2, 0)

        def DIV(self):
            return self.getToken(SQLiteParser.DIV, 0)

        def MOD(self):
            return self.getToken(SQLiteParser.MOD, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def LT2(self):
            return self.getToken(SQLiteParser.LT2, 0)

        def GT2(self):
            return self.getToken(SQLiteParser.GT2, 0)

        def AMP(self):
            return self.getToken(SQLiteParser.AMP, 0)

        def PIPE(self):
            return self.getToken(SQLiteParser.PIPE, 0)

        def LT(self):
            return self.getToken(SQLiteParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(SQLiteParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(SQLiteParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(SQLiteParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(SQLiteParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(SQLiteParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(SQLiteParser.NOT_EQ2, 0)

        def IS(self):
            return self.getToken(SQLiteParser.IS, 0)

        def LIKE(self):
            return self.getToken(SQLiteParser.LIKE, 0)

        def GLOB(self):
            return self.getToken(SQLiteParser.GLOB, 0)

        def MATCH(self):
            return self.getToken(SQLiteParser.MATCH, 0)

        def REGEXP(self):
            return self.getToken(SQLiteParser.REGEXP, 0)

        def AND(self):
            return self.getToken(SQLiteParser.AND, 0)

        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def BETWEEN(self):
            return self.getToken(SQLiteParser.BETWEEN, 0)

        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def ESCAPE(self):
            return self.getToken(SQLiteParser.ESCAPE, 0)

        def ISNULL(self):
            return self.getToken(SQLiteParser.ISNULL, 0)

        def NOTNULL(self):
            return self.getToken(SQLiteParser.NOTNULL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 866
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 867
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 876
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 871
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                    if la_ == 1:
                        self.state = 868
                        self.schema_name()
                        self.state = 869
                        self.match(SQLiteParser.DOT)


                    self.state = 873
                    self.table_name()
                    self.state = 874
                    self.match(SQLiteParser.DOT)


                self.state = 878
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 879
                self.unary_operator()
                self.state = 880
                self.expr(26)
                pass

            elif la_ == 5:
                self.state = 882
                self.match(SQLiteParser.TRIM)
                self.state = 883
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (SQLiteParser.BOTH - 185)) | (1 << (SQLiteParser.TRAILING - 185)) | (1 << (SQLiteParser.LEADING - 185)))) != 0):
                    self.state = 884
                    _la = self._input.LA(1)
                    if not(((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (SQLiteParser.BOTH - 185)) | (1 << (SQLiteParser.TRAILING - 185)) | (1 << (SQLiteParser.LEADING - 185)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 887
                self.match(SQLiteParser.FROM)
                self.state = 888
                self.expr(0)
                self.state = 889
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 891
                self.match(SQLiteParser.EXTRACT)
                self.state = 892
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 893
                _la = self._input.LA(1)
                if not(((((_la - 189)) & ~0x3f) == 0 and ((1 << (_la - 189)) & ((1 << (SQLiteParser.YEAR - 189)) | (1 << (SQLiteParser.MONTH - 189)) | (1 << (SQLiteParser.DAY - 189)) | (1 << (SQLiteParser.HOUR - 189)) | (1 << (SQLiteParser.MINUTE - 189)) | (1 << (SQLiteParser.SECOND - 189)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 894
                self.match(SQLiteParser.FROM)
                self.state = 895
                self.expr(0)
                self.state = 896
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 898
                self.match(SQLiteParser.POSITION)
                self.state = 899
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 900
                self.expr(0)
                self.state = 901
                self.match(SQLiteParser.IN)
                self.state = 902
                self.expr(0)
                self.state = 903
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 905
                _la = self._input.LA(1)
                if not(((((_la - 189)) & ~0x3f) == 0 and ((1 << (_la - 189)) & ((1 << (SQLiteParser.YEAR - 189)) | (1 << (SQLiteParser.MONTH - 189)) | (1 << (SQLiteParser.DAY - 189)) | (1 << (SQLiteParser.HOUR - 189)) | (1 << (SQLiteParser.MINUTE - 189)) | (1 << (SQLiteParser.SECOND - 189)) | (1 << (SQLiteParser.SUBSTRING - 189)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 906
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 907
                self.expr(0)
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 908
                    self.match(SQLiteParser.COMMA)
                    self.state = 909
                    self.expr(0)
                    self.state = 914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 915
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 917
                self.match(SQLiteParser.SUBSTRING)
                self.state = 918
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 919
                self.expr(0)
                self.state = 920
                self.match(SQLiteParser.FROM)
                self.state = 921
                self.expr(0)
                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.FOR:
                    self.state = 922
                    self.match(SQLiteParser.FOR)
                    self.state = 923
                    self.expr(0)


                self.state = 926
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.state = 928
                self.function_name()
                self.state = 929
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 942
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.TRIM, SQLiteParser.EXTRACT, SQLiteParser.YEAR, SQLiteParser.MONTH, SQLiteParser.DAY, SQLiteParser.HOUR, SQLiteParser.MINUTE, SQLiteParser.SECOND, SQLiteParser.POSITION, SQLiteParser.SUBSTRING, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                    self.state = 931
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                    if la_ == 1:
                        self.state = 930
                        self.match(SQLiteParser.DISTINCT)


                    self.state = 933
                    self.expr(0)
                    self.state = 938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 934
                        self.match(SQLiteParser.COMMA)
                        self.state = 935
                        self.expr(0)
                        self.state = 940
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SQLiteParser.STAR]:
                    self.state = 941
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [SQLiteParser.CLOSE_PAR]:
                    pass
                else:
                    pass
                self.state = 944
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 945
                    self.filter_clause()


                self.state = 949
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 948
                    self.over_clause()


                pass

            elif la_ == 11:
                self.state = 951
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 952
                self.expr(0)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 953
                    self.match(SQLiteParser.COMMA)
                    self.state = 954
                    self.expr(0)
                    self.state = 959
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 960
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.state = 962
                self.match(SQLiteParser.CAST)
                self.state = 963
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 964
                self.expr(0)
                self.state = 965
                self.match(SQLiteParser.AS)
                self.state = 966
                self.type_name()
                self.state = 967
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.EXISTS or _la==SQLiteParser.NOT:
                    self.state = 970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.NOT:
                        self.state = 969
                        self.match(SQLiteParser.NOT)


                    self.state = 972
                    self.match(SQLiteParser.EXISTS)


                self.state = 975
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 976
                self.select_stmt()
                self.state = 977
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.state = 979
                self.match(SQLiteParser.CASE)
                self.state = 981
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 980
                    self.expr(0)


                self.state = 988 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 983
                    self.match(SQLiteParser.WHEN)
                    self.state = 984
                    self.expr(0)
                    self.state = 985
                    self.match(SQLiteParser.THEN)
                    self.state = 986
                    self.expr(0)
                    self.state = 990 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLiteParser.WHEN):
                        break

                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ELSE:
                    self.state = 992
                    self.match(SQLiteParser.ELSE)
                    self.state = 993
                    self.expr(0)


                self.state = 996
                self.match(SQLiteParser.END)
                pass

            elif la_ == 15:
                self.state = 998
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1120
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1118
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1001
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1002
                        self.match(SQLiteParser.PIPE2)
                        self.state = 1003
                        self.expr(26)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1004
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1005
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1006
                        self.expr(25)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1007
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1008
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1009
                        self.expr(24)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1010
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1011
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (1 << SQLiteParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1012
                        self.expr(23)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1013
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1014
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (1 << SQLiteParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1015
                        self.expr(22)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1016
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1029
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                        if la_ == 1:
                            self.state = 1017
                            self.match(SQLiteParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 1018
                            self.match(SQLiteParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 1019
                            self.match(SQLiteParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 1020
                            self.match(SQLiteParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 1021
                            self.match(SQLiteParser.IS)
                            pass

                        elif la_ == 6:
                            self.state = 1022
                            self.match(SQLiteParser.IS)
                            self.state = 1023
                            self.match(SQLiteParser.NOT)
                            pass

                        elif la_ == 7:
                            self.state = 1024
                            self.match(SQLiteParser.IN)
                            pass

                        elif la_ == 8:
                            self.state = 1025
                            self.match(SQLiteParser.LIKE)
                            pass

                        elif la_ == 9:
                            self.state = 1026
                            self.match(SQLiteParser.GLOB)
                            pass

                        elif la_ == 10:
                            self.state = 1027
                            self.match(SQLiteParser.MATCH)
                            pass

                        elif la_ == 11:
                            self.state = 1028
                            self.match(SQLiteParser.REGEXP)
                            pass


                        self.state = 1031
                        self.expr(21)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1032
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1033
                        self.match(SQLiteParser.AND)
                        self.state = 1034
                        self.expr(20)
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1035
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1036
                        self.match(SQLiteParser.OR)
                        self.state = 1037
                        self.expr(19)
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1038
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1039
                        self.match(SQLiteParser.IS)
                        self.state = 1041
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                        if la_ == 1:
                            self.state = 1040
                            self.match(SQLiteParser.NOT)


                        self.state = 1043
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1044
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1046
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT:
                            self.state = 1045
                            self.match(SQLiteParser.NOT)


                        self.state = 1048
                        self.match(SQLiteParser.BETWEEN)
                        self.state = 1049
                        self.expr(0)
                        self.state = 1050
                        self.match(SQLiteParser.AND)
                        self.state = 1051
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1053
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1054
                        self.match(SQLiteParser.COLLATE)
                        self.state = 1055
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1056
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1058
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT:
                            self.state = 1057
                            self.match(SQLiteParser.NOT)


                        self.state = 1060
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (SQLiteParser.GLOB - 77)) | (1 << (SQLiteParser.LIKE - 77)) | (1 << (SQLiteParser.MATCH - 77)) | (1 << (SQLiteParser.REGEXP - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1061
                        self.expr(0)
                        self.state = 1064
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                        if la_ == 1:
                            self.state = 1062
                            self.match(SQLiteParser.ESCAPE)
                            self.state = 1063
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1066
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1071
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SQLiteParser.ISNULL]:
                            self.state = 1067
                            self.match(SQLiteParser.ISNULL)
                            pass
                        elif token in [SQLiteParser.NOTNULL]:
                            self.state = 1068
                            self.match(SQLiteParser.NOTNULL)
                            pass
                        elif token in [SQLiteParser.NOT]:
                            self.state = 1069
                            self.match(SQLiteParser.NOT)
                            self.state = 1070
                            self.match(SQLiteParser.NULL_)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1073
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import \
                                FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1075
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT:
                            self.state = 1074
                            self.match(SQLiteParser.NOT)


                        self.state = 1077
                        self.match(SQLiteParser.IN)
                        self.state = 1116
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                        if la_ == 1:
                            self.state = 1078
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1088
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                            if la_ == 1:
                                self.state = 1079
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1080
                                self.expr(0)
                                self.state = 1085
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1081
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1082
                                    self.expr(0)
                                    self.state = 1087
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1090
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1094
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                            if la_ == 1:
                                self.state = 1091
                                self.schema_name()
                                self.state = 1092
                                self.match(SQLiteParser.DOT)


                            self.state = 1096
                            self.table_name()
                            pass

                        elif la_ == 3:
                            self.state = 1100
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                            if la_ == 1:
                                self.state = 1097
                                self.schema_name()
                                self.state = 1098
                                self.match(SQLiteParser.DOT)


                            self.state = 1102
                            self.table_function_name()
                            self.state = 1103
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1112
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.ABORT) | (1 << SQLiteParser.ACTION) | (1 << SQLiteParser.ADD) | (1 << SQLiteParser.AFTER) | (1 << SQLiteParser.ALL) | (1 << SQLiteParser.ALTER) | (1 << SQLiteParser.ANALYZE) | (1 << SQLiteParser.AND) | (1 << SQLiteParser.AS) | (1 << SQLiteParser.ASC) | (1 << SQLiteParser.ATTACH) | (1 << SQLiteParser.AUTOINCREMENT) | (1 << SQLiteParser.BEFORE) | (1 << SQLiteParser.BEGIN) | (1 << SQLiteParser.BETWEEN) | (1 << SQLiteParser.BY) | (1 << SQLiteParser.CASCADE) | (1 << SQLiteParser.CASE) | (1 << SQLiteParser.CAST) | (1 << SQLiteParser.CHECK) | (1 << SQLiteParser.COLLATE) | (1 << SQLiteParser.COLUMN) | (1 << SQLiteParser.COMMIT) | (1 << SQLiteParser.CONFLICT) | (1 << SQLiteParser.CONSTRAINT) | (1 << SQLiteParser.CREATE) | (1 << SQLiteParser.CROSS) | (1 << SQLiteParser.CURRENT_DATE) | (1 << SQLiteParser.CURRENT_TIME) | (1 << SQLiteParser.CURRENT_TIMESTAMP) | (1 << SQLiteParser.DATABASE) | (1 << SQLiteParser.DEFAULT) | (1 << SQLiteParser.DEFERRABLE) | (1 << SQLiteParser.DEFERRED) | (1 << SQLiteParser.DELETE) | (1 << SQLiteParser.DESC) | (1 << SQLiteParser.DETACH) | (1 << SQLiteParser.DISTINCT) | (1 << SQLiteParser.DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.EACH - 64)) | (1 << (SQLiteParser.ELSE - 64)) | (1 << (SQLiteParser.END - 64)) | (1 << (SQLiteParser.ESCAPE - 64)) | (1 << (SQLiteParser.EXCEPT - 64)) | (1 << (SQLiteParser.EXCLUSIVE - 64)) | (1 << (SQLiteParser.EXISTS - 64)) | (1 << (SQLiteParser.EXPLAIN - 64)) | (1 << (SQLiteParser.FAIL - 64)) | (1 << (SQLiteParser.FOR - 64)) | (1 << (SQLiteParser.FOREIGN - 64)) | (1 << (SQLiteParser.FROM - 64)) | (1 << (SQLiteParser.FULL - 64)) | (1 << (SQLiteParser.GLOB - 64)) | (1 << (SQLiteParser.GROUP - 64)) | (1 << (SQLiteParser.HAVING - 64)) | (1 << (SQLiteParser.IF - 64)) | (1 << (SQLiteParser.IGNORE - 64)) | (1 << (SQLiteParser.IMMEDIATE - 64)) | (1 << (SQLiteParser.IN - 64)) | (1 << (SQLiteParser.INDEX - 64)) | (1 << (SQLiteParser.INDEXED - 64)) | (1 << (SQLiteParser.INITIALLY - 64)) | (1 << (SQLiteParser.INNER - 64)) | (1 << (SQLiteParser.INSERT - 64)) | (1 << (SQLiteParser.INSTEAD - 64)) | (1 << (SQLiteParser.INTERSECT - 64)) | (1 << (SQLiteParser.INTO - 64)) | (1 << (SQLiteParser.IS - 64)) | (1 << (SQLiteParser.ISNULL - 64)) | (1 << (SQLiteParser.JOIN - 64)) | (1 << (SQLiteParser.KEY - 64)) | (1 << (SQLiteParser.LEFT - 64)) | (1 << (SQLiteParser.LIKE - 64)) | (1 << (SQLiteParser.LIMIT - 64)) | (1 << (SQLiteParser.MATCH - 64)) | (1 << (SQLiteParser.NATURAL - 64)) | (1 << (SQLiteParser.NO - 64)) | (1 << (SQLiteParser.NOT - 64)) | (1 << (SQLiteParser.NOTNULL - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF - 64)) | (1 << (SQLiteParser.OFFSET - 64)) | (1 << (SQLiteParser.ON - 64)) | (1 << (SQLiteParser.OR - 64)) | (1 << (SQLiteParser.ORDER - 64)) | (1 << (SQLiteParser.OUTER - 64)) | (1 << (SQLiteParser.PLAN - 64)) | (1 << (SQLiteParser.PRAGMA - 64)) | (1 << (SQLiteParser.PRIMARY - 64)) | (1 << (SQLiteParser.QUERY - 64)) | (1 << (SQLiteParser.RAISE - 64)) | (1 << (SQLiteParser.RECURSIVE - 64)) | (1 << (SQLiteParser.REFERENCES - 64)) | (1 << (SQLiteParser.REGEXP - 64)) | (1 << (SQLiteParser.REINDEX - 64)) | (1 << (SQLiteParser.RELEASE - 64)) | (1 << (SQLiteParser.RENAME - 64)) | (1 << (SQLiteParser.REPLACE - 64)) | (1 << (SQLiteParser.RESTRICT - 64)) | (1 << (SQLiteParser.RIGHT - 64)) | (1 << (SQLiteParser.ROLLBACK - 64)) | (1 << (SQLiteParser.ROW - 64)) | (1 << (SQLiteParser.ROWS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.SAVEPOINT - 128)) | (1 << (SQLiteParser.SELECT - 128)) | (1 << (SQLiteParser.SET - 128)) | (1 << (SQLiteParser.TABLE - 128)) | (1 << (SQLiteParser.TEMP - 128)) | (1 << (SQLiteParser.TEMPORARY - 128)) | (1 << (SQLiteParser.THEN - 128)) | (1 << (SQLiteParser.TO - 128)) | (1 << (SQLiteParser.TRANSACTION - 128)) | (1 << (SQLiteParser.TRIGGER - 128)) | (1 << (SQLiteParser.UNION - 128)) | (1 << (SQLiteParser.UNIQUE - 128)) | (1 << (SQLiteParser.UPDATE - 128)) | (1 << (SQLiteParser.USING - 128)) | (1 << (SQLiteParser.VACUUM - 128)) | (1 << (SQLiteParser.VALUES - 128)) | (1 << (SQLiteParser.VIEW - 128)) | (1 << (SQLiteParser.VIRTUAL - 128)) | (1 << (SQLiteParser.WHEN - 128)) | (1 << (SQLiteParser.WHERE - 128)) | (1 << (SQLiteParser.WITH - 128)) | (1 << (SQLiteParser.WITHOUT - 128)) | (1 << (SQLiteParser.FIRST_VALUE - 128)) | (1 << (SQLiteParser.OVER - 128)) | (1 << (SQLiteParser.PARTITION - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.PRECEDING - 128)) | (1 << (SQLiteParser.UNBOUNDED - 128)) | (1 << (SQLiteParser.CURRENT - 128)) | (1 << (SQLiteParser.FOLLOWING - 128)) | (1 << (SQLiteParser.CUME_DIST - 128)) | (1 << (SQLiteParser.DENSE_RANK - 128)) | (1 << (SQLiteParser.LAG - 128)) | (1 << (SQLiteParser.LAST_VALUE - 128)) | (1 << (SQLiteParser.LEAD - 128)) | (1 << (SQLiteParser.NTH_VALUE - 128)) | (1 << (SQLiteParser.NTILE - 128)) | (1 << (SQLiteParser.PERCENT_RANK - 128)) | (1 << (SQLiteParser.RANK - 128)) | (1 << (SQLiteParser.ROW_NUMBER - 128)) | (1 << (SQLiteParser.GENERATED - 128)) | (1 << (SQLiteParser.ALWAYS - 128)) | (1 << (SQLiteParser.STORED - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW - 128)) | (1 << (SQLiteParser.NULLS - 128)) | (1 << (SQLiteParser.FIRST - 128)) | (1 << (SQLiteParser.LAST - 128)) | (1 << (SQLiteParser.FILTER - 128)) | (1 << (SQLiteParser.GROUPS - 128)) | (1 << (SQLiteParser.EXCLUDE - 128)) | (1 << (SQLiteParser.TRIM - 128)) | (1 << (SQLiteParser.EXTRACT - 128)) | (1 << (SQLiteParser.YEAR - 128)) | (1 << (SQLiteParser.MONTH - 128)) | (1 << (SQLiteParser.DAY - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SQLiteParser.HOUR - 192)) | (1 << (SQLiteParser.MINUTE - 192)) | (1 << (SQLiteParser.SECOND - 192)) | (1 << (SQLiteParser.POSITION - 192)) | (1 << (SQLiteParser.SUBSTRING - 192)) | (1 << (SQLiteParser.IDENTIFIER - 192)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 192)) | (1 << (SQLiteParser.BIND_PARAMETER - 192)) | (1 << (SQLiteParser.STRING_LITERAL - 192)) | (1 << (SQLiteParser.BLOB_LITERAL - 192)))) != 0):
                                self.state = 1104
                                self.expr(0)
                                self.state = 1109
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1105
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1106
                                    self.expr(0)
                                    self.state = 1111
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1114
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass


                        pass

             
                self.state = 1122
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Raise_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(SQLiteParser.RAISE, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext,0)


        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_function" ):
                listener.enterRaise_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_function" ):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.match(SQLiteParser.RAISE)
            self.state = 1124
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1129
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IGNORE]:
                self.state = 1125
                self.match(SQLiteParser.IGNORE)
                pass
            elif token in [SQLiteParser.ABORT, SQLiteParser.FAIL, SQLiteParser.ROLLBACK]:
                self.state = 1126
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT or _la==SQLiteParser.FAIL or _la==SQLiteParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1127
                self.match(SQLiteParser.COMMA)
                self.state = 1128
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1131
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def CURRENT_TIME(self):
            return self.getToken(SQLiteParser.CURRENT_TIME, 0)

        def CURRENT_DATE(self):
            return self.getToken(SQLiteParser.CURRENT_DATE, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (SQLiteParser.CURRENT_DATE - 52)) | (1 << (SQLiteParser.CURRENT_TIME - 52)) | (1 << (SQLiteParser.CURRENT_TIMESTAMP - 52)) | (1 << (SQLiteParser.NULL_ - 52)))) != 0) or ((((_la - 171)) & ~0x3f) == 0 and ((1 << (_la - 171)) & ((1 << (SQLiteParser.TRUE_ - 171)) | (1 << (SQLiteParser.FALSE_ - 171)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 171)) | (1 << (SQLiteParser.STRING_LITERAL - 171)) | (1 << (SQLiteParser.BLOB_LITERAL - 171)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(SQLiteParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def INSERT(self):
            return self.getToken(SQLiteParser.INSERT, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def upsert_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Upsert_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def VALUES(self):
            return self.getToken(SQLiteParser.VALUES, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def DEFAULT(self):
            return self.getToken(SQLiteParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.INSERT, SQLiteParser.REPLACE, SQLiteParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WITH:
                    self.state = 1135
                    self.with_clause()


                self.state = 1143
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1138
                    self.match(SQLiteParser.INSERT)
                    pass

                elif la_ == 2:
                    self.state = 1139
                    self.match(SQLiteParser.REPLACE)
                    pass

                elif la_ == 3:
                    self.state = 1140
                    self.match(SQLiteParser.INSERT)
                    self.state = 1141
                    self.match(SQLiteParser.OR)
                    self.state = 1142
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.ABORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.FAIL - 72)) | (1 << (SQLiteParser.IGNORE - 72)) | (1 << (SQLiteParser.REPLACE - 72)) | (1 << (SQLiteParser.ROLLBACK - 72)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                self.state = 1145
                self.match(SQLiteParser.INTO)
                self.state = 1149
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1146
                    self.schema_name()
                    self.state = 1147
                    self.match(SQLiteParser.DOT)


                self.state = 1151
                self.table_name()
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AS:
                    self.state = 1152
                    self.match(SQLiteParser.AS)
                    self.state = 1153
                    self.table_alias()


                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR:
                    self.state = 1156
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1157
                    self.column_name()
                    self.state = 1162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1158
                        self.match(SQLiteParser.COMMA)
                        self.state = 1159
                        self.column_name()
                        self.state = 1164
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1165
                    self.match(SQLiteParser.CLOSE_PAR)


                self.state = 1198
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1169
                    self.match(SQLiteParser.VALUES)
                    self.state = 1170
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1171
                    self.expr(0)
                    self.state = 1176
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1172
                        self.match(SQLiteParser.COMMA)
                        self.state = 1173
                        self.expr(0)
                        self.state = 1178
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1179
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1180
                        self.match(SQLiteParser.COMMA)
                        self.state = 1181
                        self.match(SQLiteParser.OPEN_PAR)
                        self.state = 1182
                        self.expr(0)
                        self.state = 1187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1183
                            self.match(SQLiteParser.COMMA)
                            self.state = 1184
                            self.expr(0)
                            self.state = 1189
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1190
                        self.match(SQLiteParser.CLOSE_PAR)
                        self.state = 1196
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1197
                    self.select_stmt()
                    pass


                self.state = 1201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON:
                    self.state = 1200
                    self.upsert_clause()


                pass
            elif token in [SQLiteParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1203
                self.match(SQLiteParser.DEFAULT)
                self.state = 1204
                self.match(SQLiteParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upsert_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def CONFLICT(self):
            return self.getToken(SQLiteParser.CONFLICT, 0)

        def DO(self):
            return self.getToken(SQLiteParser.DO, 0)

        def NOTHING(self):
            return self.getToken(SQLiteParser.NOTHING, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SQLiteParser.SET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHERE)
            else:
                return self.getToken(SQLiteParser.WHERE, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.EQ)
            else:
                return self.getToken(SQLiteParser.EQ, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_upsert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpsert_clause" ):
                listener.enterUpsert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpsert_clause" ):
                listener.exitUpsert_clause(self)




    def upsert_clause(self):

        localctx = SQLiteParser.Upsert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_upsert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(SQLiteParser.ON)
            self.state = 1208
            self.match(SQLiteParser.CONFLICT)
            self.state = 1223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 1209
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1210
                self.indexed_column()
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1211
                    self.match(SQLiteParser.COMMA)
                    self.state = 1212
                    self.indexed_column()
                    self.state = 1217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1218
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE:
                    self.state = 1219
                    self.match(SQLiteParser.WHERE)
                    self.state = 1220
                    self.expr(0)




            self.state = 1225
            self.match(SQLiteParser.DO)
            self.state = 1252
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.NOTHING]:
                self.state = 1226
                self.match(SQLiteParser.NOTHING)
                pass
            elif token in [SQLiteParser.UPDATE]:
                self.state = 1227
                self.match(SQLiteParser.UPDATE)
                self.state = 1228
                self.match(SQLiteParser.SET)

                self.state = 1231
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                if la_ == 1:
                    self.state = 1229
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1230
                    self.column_name_list()
                    pass


                self.state = 1233
                self.match(SQLiteParser.EQ)
                self.state = 1234
                self.expr(0)
                self.state = 1245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1235
                    self.match(SQLiteParser.COMMA)
                    self.state = 1238
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1236
                        self.column_name()
                        pass

                    elif la_ == 2:
                        self.state = 1237
                        self.column_name_list()
                        pass


                    self.state = 1240
                    self.match(SQLiteParser.EQ)
                    self.state = 1241
                    self.expr(0)
                    self.state = 1247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE:
                    self.state = 1248
                    self.match(SQLiteParser.WHERE)
                    self.state = 1249
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(SQLiteParser.PRAGMA, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_stmt" ):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_stmt" ):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.match(SQLiteParser.PRAGMA)
            self.state = 1258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1255
                self.schema_name()
                self.state = 1256
                self.match(SQLiteParser.DOT)


            self.state = 1260
            self.pragma_name()
            self.state = 1267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ASSIGN]:
                self.state = 1261
                self.match(SQLiteParser.ASSIGN)
                self.state = 1262
                self.pragma_value()
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.state = 1263
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1264
                self.pragma_value()
                self.state = 1265
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.ATTACH, SQLiteParser.BEGIN, SQLiteParser.COMMIT, SQLiteParser.CREATE, SQLiteParser.DEFAULT, SQLiteParser.DELETE, SQLiteParser.DETACH, SQLiteParser.DROP, SQLiteParser.END, SQLiteParser.EXPLAIN, SQLiteParser.INSERT, SQLiteParser.PRAGMA, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.REPLACE, SQLiteParser.ROLLBACK, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.UPDATE, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_value" ):
                listener.enterPragma_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_value" ):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pragma_value)
        try:
            self.state = 1272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1269
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1270
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1271
                self.match(SQLiteParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REINDEX(self):
            return self.getToken(SQLiteParser.REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)




    def reindex_stmt(self):

        localctx = SQLiteParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(SQLiteParser.REINDEX)
            self.state = 1285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1275
                self.collation_name()

            elif la_ == 2:
                self.state = 1279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1276
                    self.schema_name()
                    self.state = 1277
                    self.match(SQLiteParser.DOT)


                self.state = 1283
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1281
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 1282
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1287
                self.common_table_stmt()


            self.state = 1290
            self.select_core()
            self.state = 1296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1291
                    self.compound_operator()
                    self.state = 1292
                    self.select_core() 
                self.state = 1298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER:
                self.state = 1299
                self.order_by_stmt()


            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT:
                self.state = 1302
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.table_or_subquery()
            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA or _la==SQLiteParser.CROSS or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (SQLiteParser.INNER - 87)) | (1 << (SQLiteParser.JOIN - 87)) | (1 << (SQLiteParser.LEFT - 87)) | (1 << (SQLiteParser.NATURAL - 87)) | (1 << (SQLiteParser.RIGHT - 87)))) != 0):
                self.state = 1306
                self.join_operator()
                self.state = 1307
                self.table_or_subquery()
                self.state = 1309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                if la_ == 1:
                    self.state = 1308
                    self.join_constraint()


                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SQLiteParser.SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def GROUP(self):
            return self.getToken(SQLiteParser.GROUP, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def WINDOW(self):
            return self.getToken(SQLiteParser.WINDOW, 0)

        def window_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_nameContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS)
            else:
                return self.getToken(SQLiteParser.AS, i)

        def window_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_defnContext,i)


        def DISTINCT(self):
            return self.getToken(SQLiteParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SQLiteParser.ALL, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def HAVING(self):
            return self.getToken(SQLiteParser.HAVING, 0)

        def VALUES(self):
            return self.getToken(SQLiteParser.VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1406
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1316
                self.match(SQLiteParser.SELECT)
                self.state = 1318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1317
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.ALL or _la==SQLiteParser.DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1320
                self.result_column()
                self.state = 1325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1321
                    self.match(SQLiteParser.COMMA)
                    self.state = 1322
                    self.result_column()
                    self.state = 1327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.FROM:
                    self.state = 1328
                    self.match(SQLiteParser.FROM)
                    self.state = 1338
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                    if la_ == 1:
                        self.state = 1329
                        self.table_or_subquery()
                        self.state = 1334
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1330
                            self.match(SQLiteParser.COMMA)
                            self.state = 1331
                            self.table_or_subquery()
                            self.state = 1336
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1337
                        self.join_clause()
                        pass




                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE:
                    self.state = 1342
                    self.match(SQLiteParser.WHERE)
                    self.state = 1343
                    self.expr(0)


                self.state = 1360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.GROUP:
                    self.state = 1346
                    self.match(SQLiteParser.GROUP)
                    self.state = 1347
                    self.match(SQLiteParser.BY)
                    self.state = 1348
                    self.expr(0)
                    self.state = 1353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1349
                        self.match(SQLiteParser.COMMA)
                        self.state = 1350
                        self.expr(0)
                        self.state = 1355
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.HAVING:
                        self.state = 1356
                        self.match(SQLiteParser.HAVING)
                        self.state = 1357
                        self.expr(0)




                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WINDOW:
                    self.state = 1362
                    self.match(SQLiteParser.WINDOW)
                    self.state = 1363
                    self.window_name()
                    self.state = 1364
                    self.match(SQLiteParser.AS)
                    self.state = 1365
                    self.window_defn()
                    self.state = 1373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1366
                        self.match(SQLiteParser.COMMA)
                        self.state = 1367
                        self.window_name()
                        self.state = 1368
                        self.match(SQLiteParser.AS)
                        self.state = 1369
                        self.window_defn()
                        self.state = 1375
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [SQLiteParser.VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1378
                self.match(SQLiteParser.VALUES)
                self.state = 1379
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1380
                self.expr(0)
                self.state = 1385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1381
                    self.match(SQLiteParser.COMMA)
                    self.state = 1382
                    self.expr(0)
                    self.state = 1387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1388
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1389
                    self.match(SQLiteParser.COMMA)
                    self.state = 1390
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1391
                    self.expr(0)
                    self.state = 1396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1392
                        self.match(SQLiteParser.COMMA)
                        self.state = 1393
                        self.expr(0)
                        self.state = 1398
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1399
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_factored_select_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext,0)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1410
                self.common_table_stmt()


            self.state = 1413
            self.select_core()
            self.state = 1415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER:
                self.state = 1414
                self.order_by_stmt()


            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT:
                self.state = 1417
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def INTERSECT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.INTERSECT)
            else:
                return self.getToken(SQLiteParser.INTERSECT, i)

        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.EXCEPT)
            else:
                return self.getToken(SQLiteParser.EXCEPT, i)

        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UNION)
            else:
                return self.getToken(SQLiteParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ALL)
            else:
                return self.getToken(SQLiteParser.ALL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1420
                self.common_table_stmt()


            self.state = 1423
            self.select_core()
            self.state = 1433 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1430
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.UNION]:
                    self.state = 1424
                    self.match(SQLiteParser.UNION)
                    self.state = 1426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.ALL:
                        self.state = 1425
                        self.match(SQLiteParser.ALL)


                    pass
                elif token in [SQLiteParser.INTERSECT]:
                    self.state = 1428
                    self.match(SQLiteParser.INTERSECT)
                    pass
                elif token in [SQLiteParser.EXCEPT]:
                    self.state = 1429
                    self.match(SQLiteParser.EXCEPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1432
                self.select_core()
                self.state = 1435 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.EXCEPT or _la==SQLiteParser.INTERSECT or _la==SQLiteParser.UNION):
                    break

            self.state = 1438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER:
                self.state = 1437
                self.order_by_stmt()


            self.state = 1441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT:
                self.state = 1440
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def INDEXED(self):
            return self.getToken(SQLiteParser.INDEXED, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1443
                    self.schema_name()
                    self.state = 1444
                    self.match(SQLiteParser.DOT)


                self.state = 1448
                self.table_name()
                self.state = 1453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1450
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                    if la_ == 1:
                        self.state = 1449
                        self.match(SQLiteParser.AS)


                    self.state = 1452
                    self.table_alias()


                self.state = 1460
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.INDEXED]:
                    self.state = 1455
                    self.match(SQLiteParser.INDEXED)
                    self.state = 1456
                    self.match(SQLiteParser.BY)
                    self.state = 1457
                    self.index_name()
                    pass
                elif token in [SQLiteParser.NOT]:
                    self.state = 1458
                    self.match(SQLiteParser.NOT)
                    self.state = 1459
                    self.match(SQLiteParser.INDEXED)
                    pass
                elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.ATTACH, SQLiteParser.BEGIN, SQLiteParser.COMMIT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.DEFAULT, SQLiteParser.DELETE, SQLiteParser.DETACH, SQLiteParser.DROP, SQLiteParser.END, SQLiteParser.EXCEPT, SQLiteParser.EXPLAIN, SQLiteParser.GROUP, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INTERSECT, SQLiteParser.JOIN, SQLiteParser.LEFT, SQLiteParser.LIMIT, SQLiteParser.NATURAL, SQLiteParser.ON, SQLiteParser.ORDER, SQLiteParser.PRAGMA, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.REPLACE, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.UNION, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WINDOW, SQLiteParser.UNEXPECTED_CHAR]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1462
                    self.schema_name()
                    self.state = 1463
                    self.match(SQLiteParser.DOT)


                self.state = 1467
                self.table_function_name()
                self.state = 1468
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1469
                self.expr(0)
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1470
                    self.match(SQLiteParser.COMMA)
                    self.state = 1471
                    self.expr(0)
                    self.state = 1476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1477
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1479
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                    if la_ == 1:
                        self.state = 1478
                        self.match(SQLiteParser.AS)


                    self.state = 1481
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1484
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1494
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1485
                    self.table_or_subquery()
                    self.state = 1490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1486
                        self.match(SQLiteParser.COMMA)
                        self.state = 1487
                        self.table_or_subquery()
                        self.state = 1492
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1493
                    self.join_clause()
                    pass


                self.state = 1496
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1498
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1499
                self.select_stmt()
                self.state = 1500
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1505
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                if la_ == 1:
                    self.state = 1502
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                    if la_ == 1:
                        self.state = 1501
                        self.match(SQLiteParser.AS)


                    self.state = 1504
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1509
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1510
                self.table_name()
                self.state = 1511
                self.match(SQLiteParser.DOT)
                self.state = 1512
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1514
                self.expr(0)
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AS or _la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL:
                    self.state = 1516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.AS:
                        self.state = 1515
                        self.match(SQLiteParser.AS)


                    self.state = 1518
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def JOIN(self):
            return self.getToken(SQLiteParser.JOIN, 0)

        def NATURAL(self):
            return self.getToken(SQLiteParser.NATURAL, 0)

        def INNER(self):
            return self.getToken(SQLiteParser.INNER, 0)

        def CROSS(self):
            return self.getToken(SQLiteParser.CROSS, 0)

        def RIGHT(self):
            return self.getToken(SQLiteParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(SQLiteParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SQLiteParser.OUTER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1523
                self.match(SQLiteParser.COMMA)
                pass
            elif token in [SQLiteParser.CROSS, SQLiteParser.INNER, SQLiteParser.JOIN, SQLiteParser.LEFT, SQLiteParser.NATURAL, SQLiteParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.NATURAL:
                    self.state = 1524
                    self.match(SQLiteParser.NATURAL)


                self.state = 1537
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.RIGHT]:
                    self.state = 1527
                    self.match(SQLiteParser.RIGHT)
                    self.state = 1529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.OUTER:
                        self.state = 1528
                        self.match(SQLiteParser.OUTER)


                    pass
                elif token in [SQLiteParser.LEFT]:
                    self.state = 1531
                    self.match(SQLiteParser.LEFT)
                    self.state = 1533
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.OUTER:
                        self.state = 1532
                        self.match(SQLiteParser.OUTER)


                    pass
                elif token in [SQLiteParser.INNER]:
                    self.state = 1535
                    self.match(SQLiteParser.INNER)
                    pass
                elif token in [SQLiteParser.CROSS]:
                    self.state = 1536
                    self.match(SQLiteParser.CROSS)
                    pass
                elif token in [SQLiteParser.JOIN]:
                    pass
                else:
                    pass
                self.state = 1539
                self.match(SQLiteParser.JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def USING(self):
            return self.getToken(SQLiteParser.USING, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.state = 1556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1542
                self.match(SQLiteParser.ON)
                self.state = 1543
                self.expr(0)
                pass
            elif token in [SQLiteParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1544
                self.match(SQLiteParser.USING)
                self.state = 1545
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1546
                self.column_name()
                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1547
                    self.match(SQLiteParser.COMMA)
                    self.state = 1548
                    self.column_name()
                    self.state = 1553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1554
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(SQLiteParser.UNION, 0)

        def ALL(self):
            return self.getToken(SQLiteParser.ALL, 0)

        def INTERSECT(self):
            return self.getToken(SQLiteParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(SQLiteParser.EXCEPT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_compound_operator)
        self._la = 0 # Token type
        try:
            self.state = 1564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.UNION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1558
                self.match(SQLiteParser.UNION)
                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ALL:
                    self.state = 1559
                    self.match(SQLiteParser.ALL)


                pass
            elif token in [SQLiteParser.INTERSECT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1562
                self.match(SQLiteParser.INTERSECT)
                pass
            elif token in [SQLiteParser.EXCEPT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1563
                self.match(SQLiteParser.EXCEPT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET(self):
            return self.getToken(SQLiteParser.SET, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1566
                self.with_clause()


            self.state = 1569
            self.match(SQLiteParser.UPDATE)
            self.state = 1572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 1570
                self.match(SQLiteParser.OR)
                self.state = 1571
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.FAIL - 72)) | (1 << (SQLiteParser.IGNORE - 72)) | (1 << (SQLiteParser.REPLACE - 72)) | (1 << (SQLiteParser.ROLLBACK - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1574
            self.qualified_table_name()
            self.state = 1575
            self.match(SQLiteParser.SET)
            self.state = 1578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1576
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1577
                self.column_name_list()
                pass


            self.state = 1580
            self.match(SQLiteParser.ASSIGN)
            self.state = 1581
            self.expr(0)
            self.state = 1592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1582
                self.match(SQLiteParser.COMMA)
                self.state = 1585
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 1583
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1584
                    self.column_name_list()
                    pass


                self.state = 1587
                self.match(SQLiteParser.ASSIGN)
                self.state = 1588
                self.expr(0)
                self.state = 1594
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 1595
                self.match(SQLiteParser.WHERE)
                self.state = 1596
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)




    def column_name_list(self):

        localctx = SQLiteParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1599
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1600
            self.column_name()
            self.state = 1605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1601
                self.match(SQLiteParser.COMMA)
                self.state = 1602
                self.column_name()
                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1608
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET(self):
            return self.getToken(SQLiteParser.SET, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)




    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1610
                self.with_clause()


            self.state = 1613
            self.match(SQLiteParser.UPDATE)
            self.state = 1616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1614
                self.match(SQLiteParser.OR)
                self.state = 1615
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.FAIL - 72)) | (1 << (SQLiteParser.IGNORE - 72)) | (1 << (SQLiteParser.REPLACE - 72)) | (1 << (SQLiteParser.ROLLBACK - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1618
            self.qualified_table_name()
            self.state = 1619
            self.match(SQLiteParser.SET)
            self.state = 1622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 1620
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1621
                self.column_name_list()
                pass


            self.state = 1624
            self.match(SQLiteParser.ASSIGN)
            self.state = 1625
            self.expr(0)
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1626
                self.match(SQLiteParser.COMMA)
                self.state = 1629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                if la_ == 1:
                    self.state = 1627
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1628
                    self.column_name_list()
                    pass


                self.state = 1631
                self.match(SQLiteParser.ASSIGN)
                self.state = 1632
                self.expr(0)
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 1639
                self.match(SQLiteParser.WHERE)
                self.state = 1640
                self.expr(0)


            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT or _la==SQLiteParser.ORDER:
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER:
                    self.state = 1643
                    self.order_by_stmt()


                self.state = 1646
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def alias(self):
            return self.getTypedRuleContext(SQLiteParser.AliasContext,0)


        def INDEXED(self):
            return self.getToken(SQLiteParser.INDEXED, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_qualified_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 1649
                self.schema_name()
                self.state = 1650
                self.match(SQLiteParser.DOT)


            self.state = 1654
            self.table_name()
            self.state = 1657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.AS:
                self.state = 1655
                self.match(SQLiteParser.AS)
                self.state = 1656
                self.alias()


            self.state = 1664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.INDEXED]:
                self.state = 1659
                self.match(SQLiteParser.INDEXED)
                self.state = 1660
                self.match(SQLiteParser.BY)
                self.state = 1661
                self.index_name()
                pass
            elif token in [SQLiteParser.NOT]:
                self.state = 1662
                self.match(SQLiteParser.NOT)
                self.state = 1663
                self.match(SQLiteParser.INDEXED)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.ATTACH, SQLiteParser.BEGIN, SQLiteParser.COMMIT, SQLiteParser.CREATE, SQLiteParser.DEFAULT, SQLiteParser.DELETE, SQLiteParser.DETACH, SQLiteParser.DROP, SQLiteParser.END, SQLiteParser.EXPLAIN, SQLiteParser.INSERT, SQLiteParser.LIMIT, SQLiteParser.ORDER, SQLiteParser.PRAGMA, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.REPLACE, SQLiteParser.ROLLBACK, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.UPDATE, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VACUUM(self):
            return self.getToken(SQLiteParser.VACUUM, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def INTO(self):
            return self.getToken(SQLiteParser.INTO, 0)

        def filename(self):
            return self.getTypedRuleContext(SQLiteParser.FilenameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)




    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_vacuum_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.match(SQLiteParser.VACUUM)
            self.state = 1668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.state = 1667
                self.schema_name()


            self.state = 1672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.INTO:
                self.state = 1670
                self.match(SQLiteParser.INTO)
                self.state = 1671
                self.filename()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(SQLiteParser.FILTER, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_filter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_clause" ):
                listener.enterFilter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_clause" ):
                listener.exitFilter_clause(self)




    def filter_clause(self):

        localctx = SQLiteParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.match(SQLiteParser.FILTER)
            self.state = 1675
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1676
            self.match(SQLiteParser.WHERE)
            self.state = 1677
            self.expr(0)
            self.state = 1678
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY)
            else:
                return self.getToken(SQLiteParser.BY, i)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION(self):
            return self.getToken(SQLiteParser.PARTITION, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_defn" ):
                listener.enterWindow_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_defn" ):
                listener.exitWindow_defn(self)




    def window_defn(self):

        localctx = SQLiteParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_window_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 1681
                self.base_window_name()


            self.state = 1694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.PARTITION:
                self.state = 1684
                self.match(SQLiteParser.PARTITION)
                self.state = 1685
                self.match(SQLiteParser.BY)
                self.state = 1686
                self.expr(0)
                self.state = 1691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1687
                    self.match(SQLiteParser.COMMA)
                    self.state = 1688
                    self.expr(0)
                    self.state = 1693
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1696
            self.match(SQLiteParser.ORDER)
            self.state = 1697
            self.match(SQLiteParser.BY)
            self.state = 1698
            self.ordering_term()
            self.state = 1703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1699
                self.match(SQLiteParser.COMMA)
                self.state = 1700
                self.ordering_term()
                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS - 127)) | (1 << (SQLiteParser.RANGE - 127)) | (1 << (SQLiteParser.GROUPS - 127)))) != 0):
                self.state = 1706
                self.frame_spec()


            self.state = 1709
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(SQLiteParser.OVER, 0)

        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION(self):
            return self.getToken(SQLiteParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY)
            else:
                return self.getToken(SQLiteParser.BY, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = SQLiteParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1711
            self.match(SQLiteParser.OVER)
            self.state = 1745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 1712
                self.window_name()
                pass

            elif la_ == 2:
                self.state = 1713
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1715
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 1714
                    self.base_window_name()


                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1717
                    self.match(SQLiteParser.PARTITION)
                    self.state = 1718
                    self.match(SQLiteParser.BY)
                    self.state = 1719
                    self.expr(0)
                    self.state = 1724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1720
                        self.match(SQLiteParser.COMMA)
                        self.state = 1721
                        self.expr(0)
                        self.state = 1726
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER:
                    self.state = 1729
                    self.match(SQLiteParser.ORDER)
                    self.state = 1730
                    self.match(SQLiteParser.BY)
                    self.state = 1731
                    self.ordering_term()
                    self.state = 1736
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1732
                        self.match(SQLiteParser.COMMA)
                        self.state = 1733
                        self.ordering_term()
                        self.state = 1738
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS - 127)) | (1 << (SQLiteParser.RANGE - 127)) | (1 << (SQLiteParser.GROUPS - 127)))) != 0):
                    self.state = 1741
                    self.frame_spec()


                self.state = 1744
                self.match(SQLiteParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def EXCLUDE(self):
            return self.getToken(SQLiteParser.EXCLUDE, 0)

        def GROUP(self):
            return self.getToken(SQLiteParser.GROUP, 0)

        def TIES(self):
            return self.getToken(SQLiteParser.TIES, 0)

        def NO(self):
            return self.getToken(SQLiteParser.NO, 0)

        def OTHERS(self):
            return self.getToken(SQLiteParser.OTHERS, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_spec" ):
                listener.enterFrame_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_spec" ):
                listener.exitFrame_spec(self)




    def frame_spec(self):

        localctx = SQLiteParser.Frame_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_frame_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1747
            self.frame_clause()
            self.state = 1755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.EXCLUDE]:
                self.state = 1748
                self.match(SQLiteParser.EXCLUDE)

                self.state = 1749
                self.match(SQLiteParser.NO)
                self.state = 1750
                self.match(SQLiteParser.OTHERS)
                pass
            elif token in [SQLiteParser.CURRENT]:
                self.state = 1751
                self.match(SQLiteParser.CURRENT)
                self.state = 1752
                self.match(SQLiteParser.ROW)
                pass
            elif token in [SQLiteParser.GROUP]:
                self.state = 1753
                self.match(SQLiteParser.GROUP)
                pass
            elif token in [SQLiteParser.TIES]:
                self.state = 1754
                self.match(SQLiteParser.TIES)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(SQLiteParser.RANGE, 0)

        def ROWS(self):
            return self.getToken(SQLiteParser.ROWS, 0)

        def GROUPS(self):
            return self.getToken(SQLiteParser.GROUPS, 0)

        def frame_single(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_singleContext,0)


        def BETWEEN(self):
            return self.getToken(SQLiteParser.BETWEEN, 0)

        def frame_left(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_leftContext,0)


        def AND(self):
            return self.getToken(SQLiteParser.AND, 0)

        def frame_right(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_rightContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_clause" ):
                listener.enterFrame_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_clause" ):
                listener.exitFrame_clause(self)




    def frame_clause(self):

        localctx = SQLiteParser.Frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_frame_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            _la = self._input.LA(1)
            if not(((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS - 127)) | (1 << (SQLiteParser.RANGE - 127)) | (1 << (SQLiteParser.GROUPS - 127)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.state = 1758
                self.frame_single()
                pass

            elif la_ == 2:
                self.state = 1759
                self.match(SQLiteParser.BETWEEN)
                self.state = 1760
                self.frame_left()
                self.state = 1761
                self.match(SQLiteParser.AND)
                self.state = 1762
                self.frame_right()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_func(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_function_invocation" ):
                listener.enterSimple_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_function_invocation" ):
                listener.exitSimple_function_invocation(self)




    def simple_function_invocation(self):

        localctx = SQLiteParser.Simple_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_simple_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.simple_func()
            self.state = 1767
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1777
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.TRIM, SQLiteParser.EXTRACT, SQLiteParser.YEAR, SQLiteParser.MONTH, SQLiteParser.DAY, SQLiteParser.HOUR, SQLiteParser.MINUTE, SQLiteParser.SECOND, SQLiteParser.POSITION, SQLiteParser.SUBSTRING, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1768
                self.expr(0)
                self.state = 1773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1769
                    self.match(SQLiteParser.COMMA)
                    self.state = 1770
                    self.expr(0)
                    self.state = 1775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1776
                self.match(SQLiteParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1779
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_func(self):
            return self.getTypedRuleContext(SQLiteParser.Aggregate_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def DISTINCT(self):
            return self.getToken(SQLiteParser.DISTINCT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_invocation" ):
                listener.enterAggregate_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_invocation" ):
                listener.exitAggregate_function_invocation(self)




    def aggregate_function_invocation(self):

        localctx = SQLiteParser.Aggregate_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_aggregate_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1781
            self.aggregate_func()
            self.state = 1782
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.TRIM, SQLiteParser.EXTRACT, SQLiteParser.YEAR, SQLiteParser.MONTH, SQLiteParser.DAY, SQLiteParser.HOUR, SQLiteParser.MINUTE, SQLiteParser.SECOND, SQLiteParser.POSITION, SQLiteParser.SUBSTRING, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1783
                    self.match(SQLiteParser.DISTINCT)


                self.state = 1786
                self.expr(0)
                self.state = 1791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1787
                    self.match(SQLiteParser.COMMA)
                    self.state = 1788
                    self.expr(0)
                    self.state = 1793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1794
                self.match(SQLiteParser.STAR)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
            self.state = 1797
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FILTER:
                self.state = 1798
                self.filter_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_function(self):
            return self.getTypedRuleContext(SQLiteParser.Window_functionContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def OVER(self):
            return self.getToken(SQLiteParser.OVER, 0)

        def window_defn(self):
            return self.getTypedRuleContext(SQLiteParser.Window_defnContext,0)


        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function_invocation" ):
                listener.enterWindow_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function_invocation" ):
                listener.exitWindow_function_invocation(self)




    def window_function_invocation(self):

        localctx = SQLiteParser.Window_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_window_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.window_function()
            self.state = 1802
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.TRIM, SQLiteParser.EXTRACT, SQLiteParser.YEAR, SQLiteParser.MONTH, SQLiteParser.DAY, SQLiteParser.HOUR, SQLiteParser.MINUTE, SQLiteParser.SECOND, SQLiteParser.POSITION, SQLiteParser.SUBSTRING, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1803
                self.expr(0)
                self.state = 1808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1804
                    self.match(SQLiteParser.COMMA)
                    self.state = 1805
                    self.expr(0)
                    self.state = 1810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1811
                self.match(SQLiteParser.STAR)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
            self.state = 1814
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FILTER:
                self.state = 1815
                self.filter_clause()


            self.state = 1818
            self.match(SQLiteParser.OVER)
            self.state = 1821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 1819
                self.window_defn()
                pass

            elif la_ == 2:
                self.state = 1820
                self.window_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SQLiteParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def RECURSIVE(self):
            return self.getToken(SQLiteParser.RECURSIVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_stmt" ):
                listener.enterCommon_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_stmt" ):
                listener.exitCommon_table_stmt(self)




    def common_table_stmt(self):

        localctx = SQLiteParser.Common_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_common_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823
            self.match(SQLiteParser.WITH)
            self.state = 1825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.state = 1824
                self.match(SQLiteParser.RECURSIVE)


            self.state = 1827
            self.common_table_expression()
            self.state = 1832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1828
                self.match(SQLiteParser.COMMA)
                self.state = 1829
                self.common_table_expression()
                self.state = 1834
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_stmt" ):
                listener.enterOrder_by_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_stmt" ):
                listener.exitOrder_by_stmt(self)




    def order_by_stmt(self):

        localctx = SQLiteParser.Order_by_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_order_by_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1835
            self.match(SQLiteParser.ORDER)
            self.state = 1836
            self.match(SQLiteParser.BY)
            self.state = 1837
            self.ordering_term()
            self.state = 1842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1838
                self.match(SQLiteParser.COMMA)
                self.state = 1839
                self.ordering_term()
                self.state = 1844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(SQLiteParser.LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def OFFSET(self):
            return self.getToken(SQLiteParser.OFFSET, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_limit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_stmt" ):
                listener.enterLimit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_stmt" ):
                listener.exitLimit_stmt(self)




    def limit_stmt(self):

        localctx = SQLiteParser.Limit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_limit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.match(SQLiteParser.LIMIT)
            self.state = 1846
            self.expr(0)
            self.state = 1849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COMMA or _la==SQLiteParser.OFFSET:
                self.state = 1847
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.OFFSET):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1848
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def NULLS(self):
            return self.getToken(SQLiteParser.NULLS, 0)

        def FIRST(self):
            return self.getToken(SQLiteParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SQLiteParser.LAST, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1851
            self.expr(0)
            self.state = 1854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COLLATE:
                self.state = 1852
                self.match(SQLiteParser.COLLATE)
                self.state = 1853
                self.collation_name()


            self.state = 1857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                self.state = 1856
                self.asc_desc()


            self.state = 1861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.NULLS:
                self.state = 1859
                self.match(SQLiteParser.NULLS)
                self.state = 1860
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.FIRST or _la==SQLiteParser.LAST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(SQLiteParser.ASC, 0)

        def DESC(self):
            return self.getToken(SQLiteParser.DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc" ):
                listener.enterAsc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc" ):
                listener.exitAsc_desc(self)




    def asc_desc(self):

        localctx = SQLiteParser.Asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1863
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.ASC or _la==SQLiteParser.DESC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_leftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING(self):
            return self.getToken(SQLiteParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SQLiteParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(SQLiteParser.UNBOUNDED, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_left

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_left" ):
                listener.enterFrame_left(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_left" ):
                listener.exitFrame_left(self)




    def frame_left(self):

        localctx = SQLiteParser.Frame_leftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_frame_left)
        try:
            self.state = 1875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1865
                self.expr(0)
                self.state = 1866
                self.match(SQLiteParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1868
                self.expr(0)
                self.state = 1869
                self.match(SQLiteParser.FOLLOWING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1871
                self.match(SQLiteParser.CURRENT)
                self.state = 1872
                self.match(SQLiteParser.ROW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1873
                self.match(SQLiteParser.UNBOUNDED)
                self.state = 1874
                self.match(SQLiteParser.PRECEDING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_rightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING(self):
            return self.getToken(SQLiteParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SQLiteParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(SQLiteParser.UNBOUNDED, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_right

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_right" ):
                listener.enterFrame_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_right" ):
                listener.exitFrame_right(self)




    def frame_right(self):

        localctx = SQLiteParser.Frame_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_frame_right)
        try:
            self.state = 1887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1877
                self.expr(0)
                self.state = 1878
                self.match(SQLiteParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1880
                self.expr(0)
                self.state = 1881
                self.match(SQLiteParser.FOLLOWING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1883
                self.match(SQLiteParser.CURRENT)
                self.state = 1884
                self.match(SQLiteParser.ROW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1885
                self.match(SQLiteParser.UNBOUNDED)
                self.state = 1886
                self.match(SQLiteParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING(self):
            return self.getToken(SQLiteParser.PRECEDING, 0)

        def UNBOUNDED(self):
            return self.getToken(SQLiteParser.UNBOUNDED, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_single" ):
                listener.enterFrame_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_single" ):
                listener.exitFrame_single(self)




    def frame_single(self):

        localctx = SQLiteParser.Frame_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_frame_single)
        try:
            self.state = 1896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1889
                self.expr(0)
                self.state = 1890
                self.match(SQLiteParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1892
                self.match(SQLiteParser.UNBOUNDED)
                self.state = 1893
                self.match(SQLiteParser.PRECEDING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1894
                self.match(SQLiteParser.CURRENT)
                self.state = 1895
                self.match(SQLiteParser.ROW)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def OVER(self):
            return self.getToken(SQLiteParser.OVER, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_expr_asc_descContext,0)


        def FIRST_VALUE(self):
            return self.getToken(SQLiteParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(SQLiteParser.LAST_VALUE, 0)

        def partition_by(self):
            return self.getTypedRuleContext(SQLiteParser.Partition_byContext,0)


        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def CUME_DIST(self):
            return self.getToken(SQLiteParser.CUME_DIST, 0)

        def PERCENT_RANK(self):
            return self.getToken(SQLiteParser.PERCENT_RANK, 0)

        def order_by_expr(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_exprContext,0)


        def DENSE_RANK(self):
            return self.getToken(SQLiteParser.DENSE_RANK, 0)

        def RANK(self):
            return self.getToken(SQLiteParser.RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(SQLiteParser.ROW_NUMBER, 0)

        def LAG(self):
            return self.getToken(SQLiteParser.LAG, 0)

        def LEAD(self):
            return self.getToken(SQLiteParser.LEAD, 0)

        def offset(self):
            return self.getTypedRuleContext(SQLiteParser.OffsetContext,0)


        def default_value(self):
            return self.getTypedRuleContext(SQLiteParser.Default_valueContext,0)


        def NTH_VALUE(self):
            return self.getToken(SQLiteParser.NTH_VALUE, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def NTILE(self):
            return self.getToken(SQLiteParser.NTILE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function" ):
                listener.enterWindow_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function" ):
                listener.exitWindow_function(self)




    def window_function(self):

        localctx = SQLiteParser.Window_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_window_function)
        self._la = 0 # Token type
        try:
            self.state = 1983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.FIRST_VALUE, SQLiteParser.LAST_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1898
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.FIRST_VALUE or _la==SQLiteParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1899
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1900
                self.expr(0)
                self.state = 1901
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1902
                self.match(SQLiteParser.OVER)
                self.state = 1903
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1904
                    self.partition_by()


                self.state = 1907
                self.order_by_expr_asc_desc()
                self.state = 1909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS - 127)) | (1 << (SQLiteParser.RANGE - 127)) | (1 << (SQLiteParser.GROUPS - 127)))) != 0):
                    self.state = 1908
                    self.frame_clause()


                self.state = 1911
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.CUME_DIST, SQLiteParser.PERCENT_RANK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1913
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.CUME_DIST or _la==SQLiteParser.PERCENT_RANK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1914
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1915
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1916
                self.match(SQLiteParser.OVER)
                self.state = 1917
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1918
                    self.partition_by()


                self.state = 1922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER:
                    self.state = 1921
                    self.order_by_expr()


                self.state = 1924
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.DENSE_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1925
                _la = self._input.LA(1)
                if not(((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (SQLiteParser.DENSE_RANK - 159)) | (1 << (SQLiteParser.RANK - 159)) | (1 << (SQLiteParser.ROW_NUMBER - 159)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1926
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1927
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1928
                self.match(SQLiteParser.OVER)
                self.state = 1929
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1930
                    self.partition_by()


                self.state = 1933
                self.order_by_expr_asc_desc()
                self.state = 1934
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.LAG, SQLiteParser.LEAD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1936
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.LAG or _la==SQLiteParser.LEAD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1937
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1938
                self.expr(0)
                self.state = 1940
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                if la_ == 1:
                    self.state = 1939
                    self.offset()


                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA:
                    self.state = 1942
                    self.default_value()


                self.state = 1945
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1946
                self.match(SQLiteParser.OVER)
                self.state = 1947
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1948
                    self.partition_by()


                self.state = 1951
                self.order_by_expr_asc_desc()
                self.state = 1952
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.NTH_VALUE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1954
                self.match(SQLiteParser.NTH_VALUE)
                self.state = 1955
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1956
                self.expr(0)
                self.state = 1957
                self.match(SQLiteParser.COMMA)
                self.state = 1958
                self.signed_number()
                self.state = 1959
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1960
                self.match(SQLiteParser.OVER)
                self.state = 1961
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1962
                    self.partition_by()


                self.state = 1965
                self.order_by_expr_asc_desc()
                self.state = 1967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS - 127)) | (1 << (SQLiteParser.RANGE - 127)) | (1 << (SQLiteParser.GROUPS - 127)))) != 0):
                    self.state = 1966
                    self.frame_clause()


                self.state = 1969
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.NTILE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1971
                self.match(SQLiteParser.NTILE)
                self.state = 1972
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1973
                self.expr(0)
                self.state = 1974
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1975
                self.match(SQLiteParser.OVER)
                self.state = 1976
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1977
                    self.partition_by()


                self.state = 1980
                self.order_by_expr_asc_desc()
                self.state = 1981
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = SQLiteParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985
            self.match(SQLiteParser.COMMA)
            self.state = 1986
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = SQLiteParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_default_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1988
            self.match(SQLiteParser.COMMA)
            self.state = 1989
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SQLiteParser.PARTITION, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by" ):
                listener.enterPartition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by" ):
                listener.exitPartition_by(self)




    def partition_by(self):

        localctx = SQLiteParser.Partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_partition_by)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1991
            self.match(SQLiteParser.PARTITION)
            self.state = 1992
            self.match(SQLiteParser.BY)
            self.state = 1994 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1993
                    self.expr(0)

                else:
                    raise NoViableAltException(self)
                self.state = 1996 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr" ):
                listener.enterOrder_by_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr" ):
                listener.exitOrder_by_expr(self)




    def order_by_expr(self):

        localctx = SQLiteParser.Order_by_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_order_by_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self.match(SQLiteParser.ORDER)
            self.state = 1999
            self.match(SQLiteParser.BY)
            self.state = 2001 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2000
                self.expr(0)
                self.state = 2003 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.ABORT) | (1 << SQLiteParser.ACTION) | (1 << SQLiteParser.ADD) | (1 << SQLiteParser.AFTER) | (1 << SQLiteParser.ALL) | (1 << SQLiteParser.ALTER) | (1 << SQLiteParser.ANALYZE) | (1 << SQLiteParser.AND) | (1 << SQLiteParser.AS) | (1 << SQLiteParser.ASC) | (1 << SQLiteParser.ATTACH) | (1 << SQLiteParser.AUTOINCREMENT) | (1 << SQLiteParser.BEFORE) | (1 << SQLiteParser.BEGIN) | (1 << SQLiteParser.BETWEEN) | (1 << SQLiteParser.BY) | (1 << SQLiteParser.CASCADE) | (1 << SQLiteParser.CASE) | (1 << SQLiteParser.CAST) | (1 << SQLiteParser.CHECK) | (1 << SQLiteParser.COLLATE) | (1 << SQLiteParser.COLUMN) | (1 << SQLiteParser.COMMIT) | (1 << SQLiteParser.CONFLICT) | (1 << SQLiteParser.CONSTRAINT) | (1 << SQLiteParser.CREATE) | (1 << SQLiteParser.CROSS) | (1 << SQLiteParser.CURRENT_DATE) | (1 << SQLiteParser.CURRENT_TIME) | (1 << SQLiteParser.CURRENT_TIMESTAMP) | (1 << SQLiteParser.DATABASE) | (1 << SQLiteParser.DEFAULT) | (1 << SQLiteParser.DEFERRABLE) | (1 << SQLiteParser.DEFERRED) | (1 << SQLiteParser.DELETE) | (1 << SQLiteParser.DESC) | (1 << SQLiteParser.DETACH) | (1 << SQLiteParser.DISTINCT) | (1 << SQLiteParser.DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.EACH - 64)) | (1 << (SQLiteParser.ELSE - 64)) | (1 << (SQLiteParser.END - 64)) | (1 << (SQLiteParser.ESCAPE - 64)) | (1 << (SQLiteParser.EXCEPT - 64)) | (1 << (SQLiteParser.EXCLUSIVE - 64)) | (1 << (SQLiteParser.EXISTS - 64)) | (1 << (SQLiteParser.EXPLAIN - 64)) | (1 << (SQLiteParser.FAIL - 64)) | (1 << (SQLiteParser.FOR - 64)) | (1 << (SQLiteParser.FOREIGN - 64)) | (1 << (SQLiteParser.FROM - 64)) | (1 << (SQLiteParser.FULL - 64)) | (1 << (SQLiteParser.GLOB - 64)) | (1 << (SQLiteParser.GROUP - 64)) | (1 << (SQLiteParser.HAVING - 64)) | (1 << (SQLiteParser.IF - 64)) | (1 << (SQLiteParser.IGNORE - 64)) | (1 << (SQLiteParser.IMMEDIATE - 64)) | (1 << (SQLiteParser.IN - 64)) | (1 << (SQLiteParser.INDEX - 64)) | (1 << (SQLiteParser.INDEXED - 64)) | (1 << (SQLiteParser.INITIALLY - 64)) | (1 << (SQLiteParser.INNER - 64)) | (1 << (SQLiteParser.INSERT - 64)) | (1 << (SQLiteParser.INSTEAD - 64)) | (1 << (SQLiteParser.INTERSECT - 64)) | (1 << (SQLiteParser.INTO - 64)) | (1 << (SQLiteParser.IS - 64)) | (1 << (SQLiteParser.ISNULL - 64)) | (1 << (SQLiteParser.JOIN - 64)) | (1 << (SQLiteParser.KEY - 64)) | (1 << (SQLiteParser.LEFT - 64)) | (1 << (SQLiteParser.LIKE - 64)) | (1 << (SQLiteParser.LIMIT - 64)) | (1 << (SQLiteParser.MATCH - 64)) | (1 << (SQLiteParser.NATURAL - 64)) | (1 << (SQLiteParser.NO - 64)) | (1 << (SQLiteParser.NOT - 64)) | (1 << (SQLiteParser.NOTNULL - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF - 64)) | (1 << (SQLiteParser.OFFSET - 64)) | (1 << (SQLiteParser.ON - 64)) | (1 << (SQLiteParser.OR - 64)) | (1 << (SQLiteParser.ORDER - 64)) | (1 << (SQLiteParser.OUTER - 64)) | (1 << (SQLiteParser.PLAN - 64)) | (1 << (SQLiteParser.PRAGMA - 64)) | (1 << (SQLiteParser.PRIMARY - 64)) | (1 << (SQLiteParser.QUERY - 64)) | (1 << (SQLiteParser.RAISE - 64)) | (1 << (SQLiteParser.RECURSIVE - 64)) | (1 << (SQLiteParser.REFERENCES - 64)) | (1 << (SQLiteParser.REGEXP - 64)) | (1 << (SQLiteParser.REINDEX - 64)) | (1 << (SQLiteParser.RELEASE - 64)) | (1 << (SQLiteParser.RENAME - 64)) | (1 << (SQLiteParser.REPLACE - 64)) | (1 << (SQLiteParser.RESTRICT - 64)) | (1 << (SQLiteParser.RIGHT - 64)) | (1 << (SQLiteParser.ROLLBACK - 64)) | (1 << (SQLiteParser.ROW - 64)) | (1 << (SQLiteParser.ROWS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.SAVEPOINT - 128)) | (1 << (SQLiteParser.SELECT - 128)) | (1 << (SQLiteParser.SET - 128)) | (1 << (SQLiteParser.TABLE - 128)) | (1 << (SQLiteParser.TEMP - 128)) | (1 << (SQLiteParser.TEMPORARY - 128)) | (1 << (SQLiteParser.THEN - 128)) | (1 << (SQLiteParser.TO - 128)) | (1 << (SQLiteParser.TRANSACTION - 128)) | (1 << (SQLiteParser.TRIGGER - 128)) | (1 << (SQLiteParser.UNION - 128)) | (1 << (SQLiteParser.UNIQUE - 128)) | (1 << (SQLiteParser.UPDATE - 128)) | (1 << (SQLiteParser.USING - 128)) | (1 << (SQLiteParser.VACUUM - 128)) | (1 << (SQLiteParser.VALUES - 128)) | (1 << (SQLiteParser.VIEW - 128)) | (1 << (SQLiteParser.VIRTUAL - 128)) | (1 << (SQLiteParser.WHEN - 128)) | (1 << (SQLiteParser.WHERE - 128)) | (1 << (SQLiteParser.WITH - 128)) | (1 << (SQLiteParser.WITHOUT - 128)) | (1 << (SQLiteParser.FIRST_VALUE - 128)) | (1 << (SQLiteParser.OVER - 128)) | (1 << (SQLiteParser.PARTITION - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.PRECEDING - 128)) | (1 << (SQLiteParser.UNBOUNDED - 128)) | (1 << (SQLiteParser.CURRENT - 128)) | (1 << (SQLiteParser.FOLLOWING - 128)) | (1 << (SQLiteParser.CUME_DIST - 128)) | (1 << (SQLiteParser.DENSE_RANK - 128)) | (1 << (SQLiteParser.LAG - 128)) | (1 << (SQLiteParser.LAST_VALUE - 128)) | (1 << (SQLiteParser.LEAD - 128)) | (1 << (SQLiteParser.NTH_VALUE - 128)) | (1 << (SQLiteParser.NTILE - 128)) | (1 << (SQLiteParser.PERCENT_RANK - 128)) | (1 << (SQLiteParser.RANK - 128)) | (1 << (SQLiteParser.ROW_NUMBER - 128)) | (1 << (SQLiteParser.GENERATED - 128)) | (1 << (SQLiteParser.ALWAYS - 128)) | (1 << (SQLiteParser.STORED - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW - 128)) | (1 << (SQLiteParser.NULLS - 128)) | (1 << (SQLiteParser.FIRST - 128)) | (1 << (SQLiteParser.LAST - 128)) | (1 << (SQLiteParser.FILTER - 128)) | (1 << (SQLiteParser.GROUPS - 128)) | (1 << (SQLiteParser.EXCLUDE - 128)) | (1 << (SQLiteParser.TRIM - 128)) | (1 << (SQLiteParser.EXTRACT - 128)) | (1 << (SQLiteParser.YEAR - 128)) | (1 << (SQLiteParser.MONTH - 128)) | (1 << (SQLiteParser.DAY - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SQLiteParser.HOUR - 192)) | (1 << (SQLiteParser.MINUTE - 192)) | (1 << (SQLiteParser.SECOND - 192)) | (1 << (SQLiteParser.POSITION - 192)) | (1 << (SQLiteParser.SUBSTRING - 192)) | (1 << (SQLiteParser.IDENTIFIER - 192)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 192)) | (1 << (SQLiteParser.BIND_PARAMETER - 192)) | (1 << (SQLiteParser.STRING_LITERAL - 192)) | (1 << (SQLiteParser.BLOB_LITERAL - 192)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_expr_asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr_asc_desc" ):
                listener.enterOrder_by_expr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr_asc_desc" ):
                listener.exitOrder_by_expr_asc_desc(self)




    def order_by_expr_asc_desc(self):

        localctx = SQLiteParser.Order_by_expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_order_by_expr_asc_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            self.match(SQLiteParser.ORDER)
            self.state = 2006
            self.match(SQLiteParser.BY)
            self.state = 2007
            self.order_by_expr_asc_desc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def asc_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Asc_descContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Asc_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_asc_desc" ):
                listener.enterExpr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_asc_desc" ):
                listener.exitExpr_asc_desc(self)




    def expr_asc_desc(self):

        localctx = SQLiteParser.Expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_expr_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2009
            self.expr(0)
            self.state = 2011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                self.state = 2010
                self.asc_desc()


            self.state = 2020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 2013
                self.match(SQLiteParser.COMMA)
                self.state = 2014
                self.expr(0)
                self.state = 2016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                    self.state = 2015
                    self.asc_desc()


                self.state = 2022
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initial_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_initial_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial_select" ):
                listener.enterInitial_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial_select" ):
                listener.exitInitial_select(self)




    def initial_select(self):

        localctx = SQLiteParser.Initial_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_initial_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2023
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_select" ):
                listener.enterRecursive_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_select" ):
                listener.exitRecursive_select(self)




    def recursive_select(self):

        localctx = SQLiteParser.Recursive_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_recursive_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2025
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SQLiteParser.TILDE, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE))) != 0) or _la==SQLiteParser.NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_messageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_message" ):
                listener.enterError_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_message" ):
                listener.exitError_message(self)




    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2029
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_argument" ):
                listener.enterModule_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_argument" ):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = SQLiteParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_module_argument)
        try:
            self.state = 2033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2031
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2032
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def ACTION(self):
            return self.getToken(SQLiteParser.ACTION, 0)

        def ADD(self):
            return self.getToken(SQLiteParser.ADD, 0)

        def AFTER(self):
            return self.getToken(SQLiteParser.AFTER, 0)

        def ALL(self):
            return self.getToken(SQLiteParser.ALL, 0)

        def ALTER(self):
            return self.getToken(SQLiteParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(SQLiteParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(SQLiteParser.AND, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def ASC(self):
            return self.getToken(SQLiteParser.ASC, 0)

        def ATTACH(self):
            return self.getToken(SQLiteParser.ATTACH, 0)

        def AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT, 0)

        def BEFORE(self):
            return self.getToken(SQLiteParser.BEFORE, 0)

        def BEGIN(self):
            return self.getToken(SQLiteParser.BEGIN, 0)

        def BETWEEN(self):
            return self.getToken(SQLiteParser.BETWEEN, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def CASCADE(self):
            return self.getToken(SQLiteParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(SQLiteParser.CASE, 0)

        def CAST(self):
            return self.getToken(SQLiteParser.CAST, 0)

        def CHECK(self):
            return self.getToken(SQLiteParser.CHECK, 0)

        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(SQLiteParser.COLUMN, 0)

        def COMMIT(self):
            return self.getToken(SQLiteParser.COMMIT, 0)

        def CONFLICT(self):
            return self.getToken(SQLiteParser.CONFLICT, 0)

        def CONSTRAINT(self):
            return self.getToken(SQLiteParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(SQLiteParser.CROSS, 0)

        def CURRENT_DATE(self):
            return self.getToken(SQLiteParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(SQLiteParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP, 0)

        def DATABASE(self):
            return self.getToken(SQLiteParser.DATABASE, 0)

        def DEFAULT(self):
            return self.getToken(SQLiteParser.DEFAULT, 0)

        def DEFERRABLE(self):
            return self.getToken(SQLiteParser.DEFERRABLE, 0)

        def DEFERRED(self):
            return self.getToken(SQLiteParser.DEFERRED, 0)

        def DELETE(self):
            return self.getToken(SQLiteParser.DELETE, 0)

        def DESC(self):
            return self.getToken(SQLiteParser.DESC, 0)

        def DETACH(self):
            return self.getToken(SQLiteParser.DETACH, 0)

        def DISTINCT(self):
            return self.getToken(SQLiteParser.DISTINCT, 0)

        def DROP(self):
            return self.getToken(SQLiteParser.DROP, 0)

        def EACH(self):
            return self.getToken(SQLiteParser.EACH, 0)

        def ELSE(self):
            return self.getToken(SQLiteParser.ELSE, 0)

        def END(self):
            return self.getToken(SQLiteParser.END, 0)

        def ESCAPE(self):
            return self.getToken(SQLiteParser.ESCAPE, 0)

        def EXCEPT(self):
            return self.getToken(SQLiteParser.EXCEPT, 0)

        def EXCLUSIVE(self):
            return self.getToken(SQLiteParser.EXCLUSIVE, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(SQLiteParser.EXPLAIN, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def FOR(self):
            return self.getToken(SQLiteParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(SQLiteParser.FOREIGN, 0)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def FULL(self):
            return self.getToken(SQLiteParser.FULL, 0)

        def GLOB(self):
            return self.getToken(SQLiteParser.GLOB, 0)

        def GROUP(self):
            return self.getToken(SQLiteParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(SQLiteParser.HAVING, 0)

        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(SQLiteParser.IMMEDIATE, 0)

        def IN(self):
            return self.getToken(SQLiteParser.IN, 0)

        def INDEX(self):
            return self.getToken(SQLiteParser.INDEX, 0)

        def INDEXED(self):
            return self.getToken(SQLiteParser.INDEXED, 0)

        def INITIALLY(self):
            return self.getToken(SQLiteParser.INITIALLY, 0)

        def INNER(self):
            return self.getToken(SQLiteParser.INNER, 0)

        def INSERT(self):
            return self.getToken(SQLiteParser.INSERT, 0)

        def INSTEAD(self):
            return self.getToken(SQLiteParser.INSTEAD, 0)

        def INTERSECT(self):
            return self.getToken(SQLiteParser.INTERSECT, 0)

        def INTO(self):
            return self.getToken(SQLiteParser.INTO, 0)

        def IS(self):
            return self.getToken(SQLiteParser.IS, 0)

        def ISNULL(self):
            return self.getToken(SQLiteParser.ISNULL, 0)

        def JOIN(self):
            return self.getToken(SQLiteParser.JOIN, 0)

        def KEY(self):
            return self.getToken(SQLiteParser.KEY, 0)

        def LEFT(self):
            return self.getToken(SQLiteParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(SQLiteParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(SQLiteParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(SQLiteParser.MATCH, 0)

        def NATURAL(self):
            return self.getToken(SQLiteParser.NATURAL, 0)

        def NO(self):
            return self.getToken(SQLiteParser.NO, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def NOTNULL(self):
            return self.getToken(SQLiteParser.NOTNULL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def OF(self):
            return self.getToken(SQLiteParser.OF, 0)

        def OFFSET(self):
            return self.getToken(SQLiteParser.OFFSET, 0)

        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(SQLiteParser.OUTER, 0)

        def PLAN(self):
            return self.getToken(SQLiteParser.PLAN, 0)

        def PRAGMA(self):
            return self.getToken(SQLiteParser.PRAGMA, 0)

        def PRIMARY(self):
            return self.getToken(SQLiteParser.PRIMARY, 0)

        def QUERY(self):
            return self.getToken(SQLiteParser.QUERY, 0)

        def RAISE(self):
            return self.getToken(SQLiteParser.RAISE, 0)

        def RECURSIVE(self):
            return self.getToken(SQLiteParser.RECURSIVE, 0)

        def REFERENCES(self):
            return self.getToken(SQLiteParser.REFERENCES, 0)

        def REGEXP(self):
            return self.getToken(SQLiteParser.REGEXP, 0)

        def REINDEX(self):
            return self.getToken(SQLiteParser.REINDEX, 0)

        def RELEASE(self):
            return self.getToken(SQLiteParser.RELEASE, 0)

        def RENAME(self):
            return self.getToken(SQLiteParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def RESTRICT(self):
            return self.getToken(SQLiteParser.RESTRICT, 0)

        def RIGHT(self):
            return self.getToken(SQLiteParser.RIGHT, 0)

        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SQLiteParser.ROWS, 0)

        def SAVEPOINT(self):
            return self.getToken(SQLiteParser.SAVEPOINT, 0)

        def SELECT(self):
            return self.getToken(SQLiteParser.SELECT, 0)

        def SET(self):
            return self.getToken(SQLiteParser.SET, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def TEMP(self):
            return self.getToken(SQLiteParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SQLiteParser.TEMPORARY, 0)

        def THEN(self):
            return self.getToken(SQLiteParser.THEN, 0)

        def TO(self):
            return self.getToken(SQLiteParser.TO, 0)

        def TRANSACTION(self):
            return self.getToken(SQLiteParser.TRANSACTION, 0)

        def TRIGGER(self):
            return self.getToken(SQLiteParser.TRIGGER, 0)

        def UNION(self):
            return self.getToken(SQLiteParser.UNION, 0)

        def UNIQUE(self):
            return self.getToken(SQLiteParser.UNIQUE, 0)

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def USING(self):
            return self.getToken(SQLiteParser.USING, 0)

        def VACUUM(self):
            return self.getToken(SQLiteParser.VACUUM, 0)

        def VALUES(self):
            return self.getToken(SQLiteParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(SQLiteParser.VIEW, 0)

        def VIRTUAL(self):
            return self.getToken(SQLiteParser.VIRTUAL, 0)

        def WHEN(self):
            return self.getToken(SQLiteParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def WITH(self):
            return self.getToken(SQLiteParser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(SQLiteParser.WITHOUT, 0)

        def FIRST_VALUE(self):
            return self.getToken(SQLiteParser.FIRST_VALUE, 0)

        def OVER(self):
            return self.getToken(SQLiteParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SQLiteParser.PARTITION, 0)

        def RANGE(self):
            return self.getToken(SQLiteParser.RANGE, 0)

        def PRECEDING(self):
            return self.getToken(SQLiteParser.PRECEDING, 0)

        def UNBOUNDED(self):
            return self.getToken(SQLiteParser.UNBOUNDED, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def FOLLOWING(self):
            return self.getToken(SQLiteParser.FOLLOWING, 0)

        def CUME_DIST(self):
            return self.getToken(SQLiteParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(SQLiteParser.DENSE_RANK, 0)

        def LAG(self):
            return self.getToken(SQLiteParser.LAG, 0)

        def LAST_VALUE(self):
            return self.getToken(SQLiteParser.LAST_VALUE, 0)

        def LEAD(self):
            return self.getToken(SQLiteParser.LEAD, 0)

        def NTH_VALUE(self):
            return self.getToken(SQLiteParser.NTH_VALUE, 0)

        def NTILE(self):
            return self.getToken(SQLiteParser.NTILE, 0)

        def PERCENT_RANK(self):
            return self.getToken(SQLiteParser.PERCENT_RANK, 0)

        def RANK(self):
            return self.getToken(SQLiteParser.RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(SQLiteParser.ROW_NUMBER, 0)

        def GENERATED(self):
            return self.getToken(SQLiteParser.GENERATED, 0)

        def ALWAYS(self):
            return self.getToken(SQLiteParser.ALWAYS, 0)

        def STORED(self):
            return self.getToken(SQLiteParser.STORED, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def WINDOW(self):
            return self.getToken(SQLiteParser.WINDOW, 0)

        def NULLS(self):
            return self.getToken(SQLiteParser.NULLS, 0)

        def FIRST(self):
            return self.getToken(SQLiteParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SQLiteParser.LAST, 0)

        def FILTER(self):
            return self.getToken(SQLiteParser.FILTER, 0)

        def GROUPS(self):
            return self.getToken(SQLiteParser.GROUPS, 0)

        def EXCLUDE(self):
            return self.getToken(SQLiteParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2037
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.ABORT) | (1 << SQLiteParser.ACTION) | (1 << SQLiteParser.ADD) | (1 << SQLiteParser.AFTER) | (1 << SQLiteParser.ALL) | (1 << SQLiteParser.ALTER) | (1 << SQLiteParser.ANALYZE) | (1 << SQLiteParser.AND) | (1 << SQLiteParser.AS) | (1 << SQLiteParser.ASC) | (1 << SQLiteParser.ATTACH) | (1 << SQLiteParser.AUTOINCREMENT) | (1 << SQLiteParser.BEFORE) | (1 << SQLiteParser.BEGIN) | (1 << SQLiteParser.BETWEEN) | (1 << SQLiteParser.BY) | (1 << SQLiteParser.CASCADE) | (1 << SQLiteParser.CASE) | (1 << SQLiteParser.CAST) | (1 << SQLiteParser.CHECK) | (1 << SQLiteParser.COLLATE) | (1 << SQLiteParser.COLUMN) | (1 << SQLiteParser.COMMIT) | (1 << SQLiteParser.CONFLICT) | (1 << SQLiteParser.CONSTRAINT) | (1 << SQLiteParser.CREATE) | (1 << SQLiteParser.CROSS) | (1 << SQLiteParser.CURRENT_DATE) | (1 << SQLiteParser.CURRENT_TIME) | (1 << SQLiteParser.CURRENT_TIMESTAMP) | (1 << SQLiteParser.DATABASE) | (1 << SQLiteParser.DEFAULT) | (1 << SQLiteParser.DEFERRABLE) | (1 << SQLiteParser.DEFERRED) | (1 << SQLiteParser.DELETE) | (1 << SQLiteParser.DESC) | (1 << SQLiteParser.DETACH) | (1 << SQLiteParser.DISTINCT) | (1 << SQLiteParser.DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.EACH - 64)) | (1 << (SQLiteParser.ELSE - 64)) | (1 << (SQLiteParser.END - 64)) | (1 << (SQLiteParser.ESCAPE - 64)) | (1 << (SQLiteParser.EXCEPT - 64)) | (1 << (SQLiteParser.EXCLUSIVE - 64)) | (1 << (SQLiteParser.EXISTS - 64)) | (1 << (SQLiteParser.EXPLAIN - 64)) | (1 << (SQLiteParser.FAIL - 64)) | (1 << (SQLiteParser.FOR - 64)) | (1 << (SQLiteParser.FOREIGN - 64)) | (1 << (SQLiteParser.FROM - 64)) | (1 << (SQLiteParser.FULL - 64)) | (1 << (SQLiteParser.GLOB - 64)) | (1 << (SQLiteParser.GROUP - 64)) | (1 << (SQLiteParser.HAVING - 64)) | (1 << (SQLiteParser.IF - 64)) | (1 << (SQLiteParser.IGNORE - 64)) | (1 << (SQLiteParser.IMMEDIATE - 64)) | (1 << (SQLiteParser.IN - 64)) | (1 << (SQLiteParser.INDEX - 64)) | (1 << (SQLiteParser.INDEXED - 64)) | (1 << (SQLiteParser.INITIALLY - 64)) | (1 << (SQLiteParser.INNER - 64)) | (1 << (SQLiteParser.INSERT - 64)) | (1 << (SQLiteParser.INSTEAD - 64)) | (1 << (SQLiteParser.INTERSECT - 64)) | (1 << (SQLiteParser.INTO - 64)) | (1 << (SQLiteParser.IS - 64)) | (1 << (SQLiteParser.ISNULL - 64)) | (1 << (SQLiteParser.JOIN - 64)) | (1 << (SQLiteParser.KEY - 64)) | (1 << (SQLiteParser.LEFT - 64)) | (1 << (SQLiteParser.LIKE - 64)) | (1 << (SQLiteParser.LIMIT - 64)) | (1 << (SQLiteParser.MATCH - 64)) | (1 << (SQLiteParser.NATURAL - 64)) | (1 << (SQLiteParser.NO - 64)) | (1 << (SQLiteParser.NOT - 64)) | (1 << (SQLiteParser.NOTNULL - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF - 64)) | (1 << (SQLiteParser.OFFSET - 64)) | (1 << (SQLiteParser.ON - 64)) | (1 << (SQLiteParser.OR - 64)) | (1 << (SQLiteParser.ORDER - 64)) | (1 << (SQLiteParser.OUTER - 64)) | (1 << (SQLiteParser.PLAN - 64)) | (1 << (SQLiteParser.PRAGMA - 64)) | (1 << (SQLiteParser.PRIMARY - 64)) | (1 << (SQLiteParser.QUERY - 64)) | (1 << (SQLiteParser.RAISE - 64)) | (1 << (SQLiteParser.RECURSIVE - 64)) | (1 << (SQLiteParser.REFERENCES - 64)) | (1 << (SQLiteParser.REGEXP - 64)) | (1 << (SQLiteParser.REINDEX - 64)) | (1 << (SQLiteParser.RELEASE - 64)) | (1 << (SQLiteParser.RENAME - 64)) | (1 << (SQLiteParser.REPLACE - 64)) | (1 << (SQLiteParser.RESTRICT - 64)) | (1 << (SQLiteParser.RIGHT - 64)) | (1 << (SQLiteParser.ROLLBACK - 64)) | (1 << (SQLiteParser.ROW - 64)) | (1 << (SQLiteParser.ROWS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.SAVEPOINT - 128)) | (1 << (SQLiteParser.SELECT - 128)) | (1 << (SQLiteParser.SET - 128)) | (1 << (SQLiteParser.TABLE - 128)) | (1 << (SQLiteParser.TEMP - 128)) | (1 << (SQLiteParser.TEMPORARY - 128)) | (1 << (SQLiteParser.THEN - 128)) | (1 << (SQLiteParser.TO - 128)) | (1 << (SQLiteParser.TRANSACTION - 128)) | (1 << (SQLiteParser.TRIGGER - 128)) | (1 << (SQLiteParser.UNION - 128)) | (1 << (SQLiteParser.UNIQUE - 128)) | (1 << (SQLiteParser.UPDATE - 128)) | (1 << (SQLiteParser.USING - 128)) | (1 << (SQLiteParser.VACUUM - 128)) | (1 << (SQLiteParser.VALUES - 128)) | (1 << (SQLiteParser.VIEW - 128)) | (1 << (SQLiteParser.VIRTUAL - 128)) | (1 << (SQLiteParser.WHEN - 128)) | (1 << (SQLiteParser.WHERE - 128)) | (1 << (SQLiteParser.WITH - 128)) | (1 << (SQLiteParser.WITHOUT - 128)) | (1 << (SQLiteParser.FIRST_VALUE - 128)) | (1 << (SQLiteParser.OVER - 128)) | (1 << (SQLiteParser.PARTITION - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.PRECEDING - 128)) | (1 << (SQLiteParser.UNBOUNDED - 128)) | (1 << (SQLiteParser.CURRENT - 128)) | (1 << (SQLiteParser.FOLLOWING - 128)) | (1 << (SQLiteParser.CUME_DIST - 128)) | (1 << (SQLiteParser.DENSE_RANK - 128)) | (1 << (SQLiteParser.LAG - 128)) | (1 << (SQLiteParser.LAST_VALUE - 128)) | (1 << (SQLiteParser.LEAD - 128)) | (1 << (SQLiteParser.NTH_VALUE - 128)) | (1 << (SQLiteParser.NTILE - 128)) | (1 << (SQLiteParser.PERCENT_RANK - 128)) | (1 << (SQLiteParser.RANK - 128)) | (1 << (SQLiteParser.ROW_NUMBER - 128)) | (1 << (SQLiteParser.GENERATED - 128)) | (1 << (SQLiteParser.ALWAYS - 128)) | (1 << (SQLiteParser.STORED - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW - 128)) | (1 << (SQLiteParser.NULLS - 128)) | (1 << (SQLiteParser.FIRST - 128)) | (1 << (SQLiteParser.LAST - 128)) | (1 << (SQLiteParser.FILTER - 128)) | (1 << (SQLiteParser.GROUPS - 128)) | (1 << (SQLiteParser.EXCLUDE - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2039
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2041
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = SQLiteParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2043
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2045
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_index_name" ):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_index_name" ):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2047
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_new_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_table_name" ):
                listener.enterNew_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_table_name" ):
                listener.exitNew_table_name(self)




    def new_table_name(self):

        localctx = SQLiteParser.New_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_new_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2051
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2053
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = SQLiteParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = SQLiteParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2059
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = SQLiteParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_name" ):
                listener.enterModule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_name" ):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = SQLiteParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_name" ):
                listener.enterPragma_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_name" ):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2069
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_name" ):
                listener.enterTransaction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_name" ):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_name" ):
                listener.enterWindow_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_name" ):
                listener.exitWindow_name(self)




    def window_name(self):

        localctx = SQLiteParser.Window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = SQLiteParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_filename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilename" ):
                listener.enterFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilename" ):
                listener.exitFilename(self)




    def filename(self):

        localctx = SQLiteParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_base_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_window_name" ):
                listener.enterBase_window_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_window_name" ):
                listener.exitBase_window_name(self)




    def base_window_name(self):

        localctx = SQLiteParser.Base_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_base_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2079
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_func" ):
                listener.enterSimple_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_func" ):
                listener.exitSimple_func(self)




    def simple_func(self):

        localctx = SQLiteParser.Simple_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_simple_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_func" ):
                listener.enterAggregate_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_func" ):
                listener.exitAggregate_func(self)




    def aggregate_func(self):

        localctx = SQLiteParser.Aggregate_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_aggregate_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2083
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)




    def table_function_name(self):

        localctx = SQLiteParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2085
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_any_name)
        try:
            self.state = 2094
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2087
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2088
                self.keyword()
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2089
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2090
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 2091
                self.any_name()
                self.state = 2092
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[33] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




