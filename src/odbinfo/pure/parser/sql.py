""" Facade for the SQLiteParser generated by ANTLR"""
import dataclasses
from typing import List

from antlr4 import ParseTreeWalker

from odbinfo.pure.datatype.base import SQLToken
from odbinfo.pure.parser.scanner import get_token_stream, get_tokens
from odbinfo.pure.parser.sqlite.SQLiteLexer import SQLiteLexer
from odbinfo.pure.parser.sqlite.SQLiteParser import SQLiteParser
from odbinfo.pure.parser.sqlite.SQLiteParserListener import \
    SQLiteParserListener


@dataclasses.dataclass
class ParserResult:
    """Contains the tokens, tablenames and literal values found"""
    tokens: List[SQLToken]
    tablenames: List[SQLToken]
    literal_values: List[SQLToken]


class SQLListener(SQLiteParserListener):
    """Collect tablenames and literal values"""

    def __init__(self, tokens):
        super().__init__()
        self.tablenames = []
        self.literal_values = []
        self.tokens = tokens

    def enterTable_name(self, ctx):
        self.tablenames.append(self.tokens[ctx.start.tokenIndex])

    def enterLiteral_value(self, ctx):
        self.literal_values.append(self.tokens[ctx.start.tokenIndex])

    def parser_result(self) -> ParserResult:
        """returns the ParserResult"""
        return ParserResult(tokens=self.tokens,
                            tablenames=self.tablenames,
                            literal_values=self.literal_values)


def parse(sqlcommand: str) -> ParserResult:
    """ Returns a ParserResult object, after it runs the ANTLR parser on
        the `sqlcommand`
    """
    stream = get_token_stream(sqlcommand, SQLiteLexer)
    tokens = get_tokens(stream, SQLToken)
    parser = SQLiteParser(stream)

    tree = parser.parse()

    listener = SQLListener(tokens)

    walker = ParseTreeWalker()
    walker.walk(listener, tree)

    return listener.parser_result()
